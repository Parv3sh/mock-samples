{
  "uuid": "bb8ccafa-04df-4fe0-99c2-a43ff684e545",
  "lastMigration": 19,
  "name": "Binary Authorization API",
  "endpointPrefix": "",
  "latency": 0,
  "port": 3000,
  "hostname": "0.0.0.0",
  "routes": [
    {
      "uuid": "c9da2df7-f2b6-446f-8949-038ff5320884",
      "documentation": "Returns whether the given Attestation for the given image URI was signed by the given Attestor",
      "method": "post",
      "endpoint": "v1/:attestor:validateAttestationOccurrence",
      "responses": [
        {
          "uuid": "1040a8d4-5c83-48a5-9dcc-7ff4053ebde7",
          "body": "{\n  \"denialReason\": \"\",\n  \"result\": \"{{oneOf (array 'RESULT_UNSPECIFIED' 'VERIFIED' 'ATTESTATION_NOT_VERIFIABLE')}}\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Successful response",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "cab7005c-bc08-4368-866e-5e85c088d258",
      "documentation": "Deletes an attestor. Returns NOT_FOUND if the attestor does not exist.",
      "method": "delete",
      "endpoint": "v1/:name",
      "responses": [
        {
          "uuid": "596eaebe-5d57-4f11-bca0-4faee86d654a",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Successful response",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "865f58ef-b68d-4638-97a1-b9dafdaf0a76",
      "documentation": "Gets the current system policy in the specified location.",
      "method": "get",
      "endpoint": "v1/:name",
      "responses": [
        {
          "uuid": "71f64f37-0a4b-470c-9a0e-b33860cdc896",
          "body": "{\n  \"admissionWhitelistPatterns\": [\n    {\n      \"namePattern\": \"\"\n    }\n  ],\n  \"clusterAdmissionRules\": {},\n  \"defaultAdmissionRule\": {\n    \"enforcementMode\": \"{{oneOf (array 'ENFORCEMENT_MODE_UNSPECIFIED' 'ENFORCED_BLOCK_AND_AUDIT_LOG' 'DRYRUN_AUDIT_LOG_ONLY')}}\",\n    \"evaluationMode\": \"{{oneOf (array 'EVALUATION_MODE_UNSPECIFIED' 'ALWAYS_ALLOW' 'REQUIRE_ATTESTATION' 'ALWAYS_DENY')}}\",\n    \"requireAttestationsBy\": [\n      \"\"\n    ]\n  },\n  \"description\": \"\",\n  \"globalPolicyEvaluationMode\": \"{{oneOf (array 'GLOBAL_POLICY_EVALUATION_MODE_UNSPECIFIED' 'ENABLE' 'DISABLE')}}\",\n  \"istioServiceIdentityAdmissionRules\": {},\n  \"kubernetesNamespaceAdmissionRules\": {},\n  \"kubernetesServiceAccountAdmissionRules\": {},\n  \"name\": \"\",\n  \"updateTime\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Successful response",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "e5864dda-b964-4747-a559-e056cdc736a9",
      "documentation": "Updates an attestor. Returns NOT_FOUND if the attestor does not exist.",
      "method": "put",
      "endpoint": "v1/:name",
      "responses": [
        {
          "uuid": "66ae5850-63ef-4ee0-9729-4a470834781e",
          "body": "{\n  \"description\": \"\",\n  \"name\": \"\",\n  \"updateTime\": \"\",\n  \"userOwnedGrafeasNote\": {\n    \"delegationServiceAccountEmail\": \"\",\n    \"noteReference\": \"\",\n    \"publicKeys\": [\n      {\n        \"asciiArmoredPgpPublicKey\": \"\",\n        \"comment\": \"\",\n        \"id\": \"\",\n        \"pkixPublicKey\": {\n          \"publicKeyPem\": \"\",\n          \"signatureAlgorithm\": \"{{oneOf (array 'SIGNATURE_ALGORITHM_UNSPECIFIED' 'RSA_PSS_2048_SHA256' 'RSA_PSS_3072_SHA256' 'RSA_PSS_4096_SHA256' 'RSA_PSS_4096_SHA512' 'RSA_SIGN_PKCS1_2048_SHA256' 'RSA_SIGN_PKCS1_3072_SHA256' 'RSA_SIGN_PKCS1_4096_SHA256' 'RSA_SIGN_PKCS1_4096_SHA512' 'ECDSA_P256_SHA256' 'EC_SIGN_P256_SHA256' 'ECDSA_P384_SHA384' 'EC_SIGN_P384_SHA384' 'ECDSA_P521_SHA512' 'EC_SIGN_P521_SHA512')}}\"\n        }\n      }\n    ]\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Successful response",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "1a03732c-67d5-4754-a87a-620a7d85fe9a",
      "documentation": "Lists attestors. Returns INVALID_ARGUMENT if the project does not exist.",
      "method": "get",
      "endpoint": "v1/:parent/attestors",
      "responses": [
        {
          "uuid": "9d600605-1dc8-4e12-94b9-ee2aefab41e0",
          "body": "{\n  \"attestors\": [\n    {\n      \"description\": \"\",\n      \"name\": \"\",\n      \"updateTime\": \"\",\n      \"userOwnedGrafeasNote\": {\n        \"delegationServiceAccountEmail\": \"\",\n        \"noteReference\": \"\",\n        \"publicKeys\": [\n          {\n            \"asciiArmoredPgpPublicKey\": \"\",\n            \"comment\": \"\",\n            \"id\": \"\",\n            \"pkixPublicKey\": {\n              \"publicKeyPem\": \"\",\n              \"signatureAlgorithm\": \"{{oneOf (array 'SIGNATURE_ALGORITHM_UNSPECIFIED' 'RSA_PSS_2048_SHA256' 'RSA_PSS_3072_SHA256' 'RSA_PSS_4096_SHA256' 'RSA_PSS_4096_SHA512' 'RSA_SIGN_PKCS1_2048_SHA256' 'RSA_SIGN_PKCS1_3072_SHA256' 'RSA_SIGN_PKCS1_4096_SHA256' 'RSA_SIGN_PKCS1_4096_SHA512' 'ECDSA_P256_SHA256' 'EC_SIGN_P256_SHA256' 'ECDSA_P384_SHA384' 'EC_SIGN_P384_SHA384' 'ECDSA_P521_SHA512' 'EC_SIGN_P521_SHA512')}}\"\n            }\n          }\n        ]\n      }\n    }\n  ],\n  \"nextPageToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Successful response",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "c652a865-b903-4267-a60c-26b95a9c5f46",
      "documentation": "Creates an attestor, and returns a copy of the new attestor. Returns NOT_FOUND if the project does not exist, INVALID_ARGUMENT if the request is malformed, ALREADY_EXISTS if the attestor already exists.",
      "method": "post",
      "endpoint": "v1/:parent/attestors",
      "responses": [
        {
          "uuid": "b2d3a296-6139-49cb-873a-900cd8768a0a",
          "body": "{\n  \"description\": \"\",\n  \"name\": \"\",\n  \"updateTime\": \"\",\n  \"userOwnedGrafeasNote\": {\n    \"delegationServiceAccountEmail\": \"\",\n    \"noteReference\": \"\",\n    \"publicKeys\": [\n      {\n        \"asciiArmoredPgpPublicKey\": \"\",\n        \"comment\": \"\",\n        \"id\": \"\",\n        \"pkixPublicKey\": {\n          \"publicKeyPem\": \"\",\n          \"signatureAlgorithm\": \"{{oneOf (array 'SIGNATURE_ALGORITHM_UNSPECIFIED' 'RSA_PSS_2048_SHA256' 'RSA_PSS_3072_SHA256' 'RSA_PSS_4096_SHA256' 'RSA_PSS_4096_SHA512' 'RSA_SIGN_PKCS1_2048_SHA256' 'RSA_SIGN_PKCS1_3072_SHA256' 'RSA_SIGN_PKCS1_4096_SHA256' 'RSA_SIGN_PKCS1_4096_SHA512' 'ECDSA_P256_SHA256' 'EC_SIGN_P256_SHA256' 'ECDSA_P384_SHA384' 'EC_SIGN_P384_SHA384' 'ECDSA_P521_SHA512' 'EC_SIGN_P521_SHA512')}}\"\n        }\n      }\n    ]\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Successful response",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "f31af3f5-bf37-4f32-a26d-2e230d21da79",
      "documentation": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
      "method": "get",
      "endpoint": "v1/:resource:getIamPolicy",
      "responses": [
        {
          "uuid": "58915455-1e6a-4bf5-a75a-d229b56d6365",
          "body": "{\n  \"bindings\": [\n    {\n      \"condition\": {\n        \"description\": \"\",\n        \"expression\": \"\",\n        \"location\": \"\",\n        \"title\": \"\"\n      },\n      \"members\": [\n        \"\"\n      ],\n      \"role\": \"\"\n    }\n  ],\n  \"etag\": \"\",\n  \"version\": {{faker 'random.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Successful response",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "43b4eb25-df16-409f-abd4-8ff50c16b1bd",
      "documentation": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
      "method": "post",
      "endpoint": "v1/:resource:setIamPolicy",
      "responses": [
        {
          "uuid": "e442300c-7086-4424-9f88-86e30c7a8f4b",
          "body": "{\n  \"bindings\": [\n    {\n      \"condition\": {\n        \"description\": \"\",\n        \"expression\": \"\",\n        \"location\": \"\",\n        \"title\": \"\"\n      },\n      \"members\": [\n        \"\"\n      ],\n      \"role\": \"\"\n    }\n  ],\n  \"etag\": \"\",\n  \"version\": {{faker 'random.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Successful response",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "69156ab7-695d-48bb-9338-993e19b3574b",
      "documentation": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
      "method": "post",
      "endpoint": "v1/:resource:testIamPermissions",
      "responses": [
        {
          "uuid": "0781933e-fe9d-4509-920e-bd060a2f0607",
          "body": "{\n  \"permissions\": [\n    \"\"\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Successful response",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    }
  ],
  "proxyMode": false,
  "proxyHost": "",
  "proxyRemovePrefix": false,
  "tlsOptions": {
    "enabled": false,
    "type": "CERT",
    "pfxPath": "",
    "certPath": "",
    "keyPath": "",
    "caPath": "",
    "passphrase": ""
  },
  "cors": true,
  "headers": [],
  "proxyReqHeaders": [
    {
      "key": "",
      "value": ""
    }
  ],
  "proxyResHeaders": [
    {
      "key": "",
      "value": ""
    }
  ]
}