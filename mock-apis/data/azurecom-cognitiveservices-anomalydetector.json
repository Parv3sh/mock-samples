{
  "uuid": "13556e90-8746-4cd3-80e5-f43960aa4f15",
  "lastMigration": 19,
  "name": "Anomaly Detector Client",
  "endpointPrefix": "",
  "latency": 0,
  "port": 3000,
  "hostname": "0.0.0.0",
  "routes": [
    {
      "uuid": "62a56690-e75b-4e39-8aa7-257af0396e9c",
      "documentation": "Detect change point for the entire series",
      "method": "post",
      "endpoint": "timeseries/changePoint/detect",
      "responses": [
        {
          "uuid": "5826345d-33b8-4277-abc1-7ea519db4b8e",
          "body": "{\n  \"confidenceScores\": [\n    {{faker 'random.float'}}\n  ],\n  \"isChangePoint\": [\n    {{faker 'random.boolean'}}\n  ],\n  \"period\": {{faker 'random.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Successful operation.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "731cf317-bd20-4ae2-96ca-9bd9bc3816c4",
          "body": "{\n  \"code\": \"{{oneOf (array 'InvalidCustomInterval' 'BadArgument' 'InvalidGranularity' 'InvalidPeriod' 'InvalidModelArgument' 'InvalidSeries' 'InvalidJsonFormat' 'RequiredGranularity' 'RequiredSeries')}}\",\n  \"message\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Error response.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "8b53f0c1-9e44-4cc8-b90d-5d6c803305c7",
      "documentation": "Detect anomalies for the entire series in batch.",
      "method": "post",
      "endpoint": "timeseries/entire/detect",
      "responses": [
        {
          "uuid": "07d9855a-d830-470e-bab4-9d6de547c510",
          "body": "{\n  \"expectedValues\": [\n    {{faker 'random.float'}}\n  ],\n  \"isAnomaly\": [\n    {{faker 'random.boolean'}}\n  ],\n  \"isNegativeAnomaly\": [\n    {{faker 'random.boolean'}}\n  ],\n  \"isPositiveAnomaly\": [\n    {{faker 'random.boolean'}}\n  ],\n  \"lowerMargins\": [\n    {{faker 'random.float'}}\n  ],\n  \"period\": {{faker 'random.number'}},\n  \"upperMargins\": [\n    {{faker 'random.float'}}\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Successful operation.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a28a15af-2eea-425b-82ca-442efd21b9b2",
          "body": "{\n  \"code\": \"{{oneOf (array 'InvalidCustomInterval' 'BadArgument' 'InvalidGranularity' 'InvalidPeriod' 'InvalidModelArgument' 'InvalidSeries' 'InvalidJsonFormat' 'RequiredGranularity' 'RequiredSeries')}}\",\n  \"message\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Error response.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "88a7e51d-59fa-402a-b1ce-c8222a221a6a",
      "documentation": "Detect anomaly status of the latest point in time series.",
      "method": "post",
      "endpoint": "timeseries/last/detect",
      "responses": [
        {
          "uuid": "926e089b-3bdd-4cbb-9d45-14b596e486a6",
          "body": "{\n  \"expectedValue\": {{faker 'random.float'}},\n  \"isAnomaly\": {{faker 'random.boolean'}},\n  \"isNegativeAnomaly\": {{faker 'random.boolean'}},\n  \"isPositiveAnomaly\": {{faker 'random.boolean'}},\n  \"lowerMargin\": {{faker 'random.float'}},\n  \"period\": {{faker 'random.number'}},\n  \"suggestedWindow\": {{faker 'random.number'}},\n  \"upperMargin\": {{faker 'random.float'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Successful operation.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2baeadc3-695c-4782-a1eb-040dd255cca0",
          "body": "{\n  \"code\": \"{{oneOf (array 'InvalidCustomInterval' 'BadArgument' 'InvalidGranularity' 'InvalidPeriod' 'InvalidModelArgument' 'InvalidSeries' 'InvalidJsonFormat' 'RequiredGranularity' 'RequiredSeries')}}\",\n  \"message\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Error response.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    }
  ],
  "proxyMode": false,
  "proxyHost": "",
  "proxyRemovePrefix": false,
  "tlsOptions": {
    "enabled": false,
    "type": "CERT",
    "pfxPath": "",
    "certPath": "",
    "keyPath": "",
    "caPath": "",
    "passphrase": ""
  },
  "cors": true,
  "headers": [],
  "proxyReqHeaders": [
    {
      "key": "",
      "value": ""
    }
  ],
  "proxyResHeaders": [
    {
      "key": "",
      "value": ""
    }
  ]
}