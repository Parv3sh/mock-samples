{
  "uuid": "a98fb982-9095-4e28-943b-861ee9d4b188",
  "lastMigration": 19,
  "name": "Amazon Lex Model Building Service",
  "endpointPrefix": "",
  "latency": 0,
  "port": 3000,
  "hostname": "0.0.0.0",
  "routes": [
    {
      "uuid": "d24e2563-ea90-4b34-9956-9dfa41549d9c",
      "documentation": "<p>Creates a new version of the bot based on the <code>$LATEST</code> version. If the <code>$LATEST</code> version of this resource hasn't changed since you created the last version, Amazon Lex doesn't create a new version. It returns the last created version.</p> <note> <p>You can update only the <code>$LATEST</code> version of the bot. You can't update the numbered versions that you create with the <code>CreateBotVersion</code> operation.</p> </note> <p> When you create the first version of a bot, Amazon Lex sets the version to 1. Subsequent versions increment by 1. For more information, see <a>versioning-intro</a>. </p> <p> This operation requires permission for the <code>lex:CreateBotVersion</code> action. </p>",
      "method": "post",
      "endpoint": "bots/:name/versions",
      "responses": [
        {
          "uuid": "bc712070-8b67-4569-be69-9ac47926ff18",
          "body": "{\n  \"name\": \"\",\n  \"description\": \"\",\n  \"intents\": [\n    {\n      \"intentName\": \"\",\n      \"intentVersion\": \"\"\n    }\n  ],\n  \"clarificationPrompt\": {\n    \"messages\": [\n      {\n        \"contentType\": \"\",\n        \"content\": \"\",\n        \"groupNumber\": {{faker 'random.number'}}\n      }\n    ],\n    \"maxAttempts\": {{faker 'random.number'}},\n    \"responseCard\": \"\"\n  },\n  \"abortStatement\": {\n    \"messages\": [\n      {\n        \"contentType\": \"\",\n        \"content\": \"\",\n        \"groupNumber\": {{faker 'random.number'}}\n      }\n    ],\n    \"responseCard\": \"\"\n  },\n  \"status\": \"\",\n  \"failureReason\": \"\",\n  \"lastUpdatedDate\": \"{{faker 'date.recent' 365}}\",\n  \"createdDate\": \"{{faker 'date.recent' 365}}\",\n  \"idleSessionTTLInSeconds\": {{faker 'random.number'}},\n  \"voiceId\": \"\",\n  \"checksum\": \"\",\n  \"version\": \"\",\n  \"locale\": \"\",\n  \"childDirected\": {{faker 'random.boolean'}},\n  \"enableModelImprovements\": {{faker 'random.boolean'}},\n  \"detectSentiment\": {{faker 'random.boolean'}}\n}",
          "latency": 0,
          "statusCode": 201,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7fbc9e6b-a655-4f73-8be6-ccf19c1585fd",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "05713f5e-d2be-4a75-a101-21fcae55c5da",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b048c36e-72c7-4cde-9e54-ba2dba3368b3",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ec853ece-6f20-4fb5-b91e-76492b96fab0",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c2966501-6aef-41ec-a0d1-357815e2e536",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "208b4f66-5c43-4310-be0e-a32ef00a6a29",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "PreconditionFailedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "1e0adf12-537c-447e-9edd-4b723368edac",
      "documentation": "<p>Creates a new version of an intent based on the <code>$LATEST</code> version of the intent. If the <code>$LATEST</code> version of this intent hasn't changed since you last updated it, Amazon Lex doesn't create a new version. It returns the last version you created.</p> <note> <p>You can update only the <code>$LATEST</code> version of the intent. You can't update the numbered versions that you create with the <code>CreateIntentVersion</code> operation.</p> </note> <p> When you create a version of an intent, Amazon Lex sets the version to 1. Subsequent versions increment by 1. For more information, see <a>versioning-intro</a>. </p> <p>This operation requires permissions to perform the <code>lex:CreateIntentVersion</code> action. </p>",
      "method": "post",
      "endpoint": "intents/:name/versions",
      "responses": [
        {
          "uuid": "dbe2d772-6611-48df-8e3a-ea263e81eb88",
          "body": "{\n  \"name\": \"\",\n  \"description\": \"\",\n  \"slots\": [\n    {\n      \"name\": \"\",\n      \"description\": \"\",\n      \"slotConstraint\": \"\",\n      \"slotType\": \"\",\n      \"slotTypeVersion\": \"\",\n      \"valueElicitationPrompt\": {\n        \"messages\": [\n          {\n            \"contentType\": \"\",\n            \"content\": \"\",\n            \"groupNumber\": {{faker 'random.number'}}\n          }\n        ],\n        \"maxAttempts\": {{faker 'random.number'}},\n        \"responseCard\": \"\"\n      },\n      \"priority\": {{faker 'random.number'}},\n      \"sampleUtterances\": [\n        \"\"\n      ],\n      \"responseCard\": \"\",\n      \"obfuscationSetting\": \"\",\n      \"defaultValueSpec\": {\n        \"defaultValueList\": [\n          {\n            \"defaultValue\": \"\"\n          }\n        ]\n      }\n    }\n  ],\n  \"sampleUtterances\": [\n    \"\"\n  ],\n  \"confirmationPrompt\": {\n    \"messages\": [\n      {\n        \"contentType\": \"\",\n        \"content\": \"\",\n        \"groupNumber\": {{faker 'random.number'}}\n      }\n    ],\n    \"maxAttempts\": {{faker 'random.number'}},\n    \"responseCard\": \"\"\n  },\n  \"rejectionStatement\": {\n    \"messages\": [\n      {\n        \"contentType\": \"\",\n        \"content\": \"\",\n        \"groupNumber\": {{faker 'random.number'}}\n      }\n    ],\n    \"responseCard\": \"\"\n  },\n  \"followUpPrompt\": {\n    \"prompt\": {\n      \"messages\": [\n        {\n          \"contentType\": \"\",\n          \"content\": \"\",\n          \"groupNumber\": {{faker 'random.number'}}\n        }\n      ],\n      \"maxAttempts\": {{faker 'random.number'}},\n      \"responseCard\": \"\"\n    },\n    \"rejectionStatement\": {\n      \"messages\": [\n        {\n          \"contentType\": \"\",\n          \"content\": \"\",\n          \"groupNumber\": {{faker 'random.number'}}\n        }\n      ],\n      \"responseCard\": \"\"\n    }\n  },\n  \"conclusionStatement\": {\n    \"messages\": [\n      {\n        \"contentType\": \"\",\n        \"content\": \"\",\n        \"groupNumber\": {{faker 'random.number'}}\n      }\n    ],\n    \"responseCard\": \"\"\n  },\n  \"dialogCodeHook\": {\n    \"uri\": \"\",\n    \"messageVersion\": \"\"\n  },\n  \"fulfillmentActivity\": {\n    \"type\": \"\",\n    \"codeHook\": {\n      \"uri\": \"\",\n      \"messageVersion\": \"\"\n    }\n  },\n  \"parentIntentSignature\": \"\",\n  \"lastUpdatedDate\": \"{{faker 'date.recent' 365}}\",\n  \"createdDate\": \"{{faker 'date.recent' 365}}\",\n  \"version\": \"\",\n  \"checksum\": \"\",\n  \"kendraConfiguration\": {\n    \"kendraIndex\": \"\",\n    \"queryFilterString\": \"\",\n    \"role\": \"\"\n  },\n  \"inputContexts\": [\n    {\n      \"name\": \"\"\n    }\n  ],\n  \"outputContexts\": [\n    {\n      \"name\": \"\",\n      \"timeToLiveInSeconds\": {{faker 'random.number'}},\n      \"turnsToLive\": {{faker 'random.number'}}\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 201,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ed0cf15e-80ae-4824-9553-647f0cf0593e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "153e0083-5bfe-431b-8f25-820e57f7b728",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c2c59b74-c5ac-408e-b480-c0096d5fadcf",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2c1a319c-d460-4feb-ae3c-096ff9383971",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "492fcc8d-18bc-4079-8224-44bd9291223c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3b972ad0-7575-4438-8e1c-b3d3b314b7d1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "PreconditionFailedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "91f80806-8642-43e9-9cd2-54d4c9ad9c5e",
      "documentation": "<p>Creates a new version of a slot type based on the <code>$LATEST</code> version of the specified slot type. If the <code>$LATEST</code> version of this resource has not changed since the last version that you created, Amazon Lex doesn't create a new version. It returns the last version that you created. </p> <note> <p>You can update only the <code>$LATEST</code> version of a slot type. You can't update the numbered versions that you create with the <code>CreateSlotTypeVersion</code> operation.</p> </note> <p>When you create a version of a slot type, Amazon Lex sets the version to 1. Subsequent versions increment by 1. For more information, see <a>versioning-intro</a>. </p> <p>This operation requires permissions for the <code>lex:CreateSlotTypeVersion</code> action.</p>",
      "method": "post",
      "endpoint": "slottypes/:name/versions",
      "responses": [
        {
          "uuid": "52ef236f-2787-4763-83ad-830cbb138959",
          "body": "{\n  \"name\": \"\",\n  \"description\": \"\",\n  \"enumerationValues\": [\n    {\n      \"value\": \"\",\n      \"synonyms\": [\n        \"\"\n      ]\n    }\n  ],\n  \"lastUpdatedDate\": \"{{faker 'date.recent' 365}}\",\n  \"createdDate\": \"{{faker 'date.recent' 365}}\",\n  \"version\": \"\",\n  \"checksum\": \"\",\n  \"valueSelectionStrategy\": \"\",\n  \"parentSlotTypeSignature\": \"\",\n  \"slotTypeConfigurations\": [\n    {\n      \"regexConfiguration\": {\n        \"pattern\": \"\"\n      }\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 201,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "917e5079-b65f-4689-a29a-717e5584dece",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0dcd3a4a-79d7-4567-a392-d347db825e54",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b21026e6-a20a-4379-89ea-fa13c62bda61",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5a8348f1-5df2-4a79-9e23-71a492bf61e4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5b356c48-4ad8-4345-8ead-e876e1e7dbdd",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c40cb936-53d2-4839-b620-7feabf422d5b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "PreconditionFailedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "06d958bf-c005-4eef-97f0-9cb6bae2447d",
      "documentation": "<p>Deletes all versions of the bot, including the <code>$LATEST</code> version. To delete a specific version of the bot, use the <a>DeleteBotVersion</a> operation. The <code>DeleteBot</code> operation doesn't immediately remove the bot schema. Instead, it is marked for deletion and removed later.</p> <p>Amazon Lex stores utterances indefinitely for improving the ability of your bot to respond to user inputs. These utterances are not removed when the bot is deleted. To remove the utterances, use the <a>DeleteUtterances</a> operation.</p> <p>If a bot has an alias, you can't delete it. Instead, the <code>DeleteBot</code> operation returns a <code>ResourceInUseException</code> exception that includes a reference to the alias that refers to the bot. To remove the reference to the bot, delete the alias. If you get the same exception again, delete the referring alias until the <code>DeleteBot</code> operation is successful.</p> <p>This operation requires permissions for the <code>lex:DeleteBot</code> action.</p>",
      "method": "delete",
      "endpoint": "bots/:name",
      "responses": [
        {
          "uuid": "e88e2232-ce16-493c-8c8f-f207109a2438",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "64b338f0-42db-450e-9803-2b8ab7992f99",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e594c012-f0d6-4f99-b9a7-973604f0eda4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "6a96f459-a2c5-4504-874b-80868f56e2fa",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "efed278e-a964-4d8a-ab2b-d38fa352e1b5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "154e90a4-6857-41f2-909e-aca863112ff5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "16ca56fe-fba7-492d-9100-15bda34046c2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "ResourceInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "5bf2d4d0-19c5-4d90-95ca-3325cb0866b8",
      "documentation": "<p>Deletes an alias for the specified bot. </p> <p>You can't delete an alias that is used in the association between a bot and a messaging channel. If an alias is used in a channel association, the <code>DeleteBot</code> operation returns a <code>ResourceInUseException</code> exception that includes a reference to the channel association that refers to the bot. You can remove the reference to the alias by deleting the channel association. If you get the same exception again, delete the referring association until the <code>DeleteBotAlias</code> operation is successful.</p>",
      "method": "delete",
      "endpoint": "bots/:botName/aliases/:name",
      "responses": [
        {
          "uuid": "fec77288-ffec-4651-905e-c1ea48c9de6e",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "292a4340-5f97-4568-a9b8-8e9240db15d3",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a9b854c2-2b82-4f4e-9b7d-3cef23df1249",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5cc118a3-0666-49dd-a403-3fe78cfaa853",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "77937e50-8494-4ca8-9af0-9e677ff57bd7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "795e6bdd-aa08-4bc7-85ee-dd6ef71afa94",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c0c1df40-cb07-4fd8-93cb-79be9aef60a8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "ResourceInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "6dc18c54-012f-4376-846b-efe88ddddc7f",
      "documentation": "<p>Returns information about an Amazon Lex bot alias. For more information about aliases, see <a>versioning-aliases</a>.</p> <p>This operation requires permissions for the <code>lex:GetBotAlias</code> action.</p>",
      "method": "get",
      "endpoint": "bots/:botName/aliases/:name",
      "responses": [
        {
          "uuid": "6bb47252-0f48-40ac-a611-f083ddd8b976",
          "body": "{\n  \"name\": \"\",\n  \"description\": \"\",\n  \"botVersion\": \"\",\n  \"botName\": \"\",\n  \"lastUpdatedDate\": \"{{faker 'date.recent' 365}}\",\n  \"createdDate\": \"{{faker 'date.recent' 365}}\",\n  \"checksum\": \"\",\n  \"conversationLogs\": {\n    \"logSettings\": [\n      {\n        \"logType\": \"\",\n        \"destination\": \"\",\n        \"kmsKeyArn\": \"\",\n        \"resourceArn\": \"\",\n        \"resourcePrefix\": \"\"\n      }\n    ],\n    \"iamRoleArn\": \"\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1e9fc9f2-2b9e-434c-b690-26db7bc22006",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e025f5b8-5643-46e9-95d8-b3bf012af305",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "16426dd7-ce95-4073-9163-d08169b13104",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1b866553-c4b2-42df-9ed2-6225cc75177c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "c1372ca8-c715-41b0-8469-1356e9ec7096",
      "documentation": "<p>Creates an alias for the specified version of the bot or replaces an alias for the specified bot. To change the version of the bot that the alias points to, replace the alias. For more information about aliases, see <a>versioning-aliases</a>.</p> <p>This operation requires permissions for the <code>lex:PutBotAlias</code> action. </p>",
      "method": "put",
      "endpoint": "bots/:botName/aliases/:name",
      "responses": [
        {
          "uuid": "ac51d9f5-b853-433d-a9c3-f582160c980a",
          "body": "{\n  \"name\": \"\",\n  \"description\": \"\",\n  \"botVersion\": \"\",\n  \"botName\": \"\",\n  \"lastUpdatedDate\": \"{{faker 'date.recent' 365}}\",\n  \"createdDate\": \"{{faker 'date.recent' 365}}\",\n  \"checksum\": \"\",\n  \"conversationLogs\": {\n    \"logSettings\": [\n      {\n        \"logType\": \"\",\n        \"destination\": \"\",\n        \"kmsKeyArn\": \"\",\n        \"resourceArn\": \"\",\n        \"resourcePrefix\": \"\"\n      }\n    ],\n    \"iamRoleArn\": \"\"\n  },\n  \"tags\": [\n    {\n      \"key\": \"\",\n      \"value\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "215f107e-cb49-4231-8fb3-2135557302b5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e47b8b9b-79a5-483c-b8bd-3de96f2e56cb",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "6fca5ffd-790e-435a-90b6-38d8c7da0027",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ebdcbb0a-a4ae-44e8-b8a9-b50f30401440",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "53bdf4bb-7a6e-440f-b200-18e7a36b5b48",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "PreconditionFailedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "18613c9f-0b32-415a-90ae-ae974fd63019",
      "documentation": "<p>Deletes the association between an Amazon Lex bot and a messaging platform.</p> <p>This operation requires permission for the <code>lex:DeleteBotChannelAssociation</code> action.</p>",
      "method": "delete",
      "endpoint": "bots/:botName/aliases/:aliasName/channels/:name",
      "responses": [
        {
          "uuid": "5e45818e-a7e0-4935-a851-1450f36799d1",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "145ae007-17ae-4b65-a270-1be70a28ad3d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "dd3a9171-c61e-45bf-a426-b457b3bb6e9d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "864ae366-0025-4583-845b-7a4ee69c9c3c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1de8da37-879c-4352-9267-3dd3f9ca768a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ce6c6e51-86d2-4a79-b2b9-3a23bf24261f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "8128fe23-479c-4efa-82b2-65c30170b0ce",
      "documentation": "<p>Returns information about the association between an Amazon Lex bot and a messaging platform.</p> <p>This operation requires permissions for the <code>lex:GetBotChannelAssociation</code> action.</p>",
      "method": "get",
      "endpoint": "bots/:botName/aliases/:aliasName/channels/:name",
      "responses": [
        {
          "uuid": "2d1237dd-f482-4114-b851-dd94a5bfae23",
          "body": "{\n  \"name\": \"\",\n  \"description\": \"\",\n  \"botAlias\": \"\",\n  \"botName\": \"\",\n  \"createdDate\": \"{{faker 'date.recent' 365}}\",\n  \"type\": \"\",\n  \"botConfiguration\": {},\n  \"status\": \"\",\n  \"failureReason\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2588f848-f0fb-4687-8359-9f52416da85a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "6a1c435d-cdb6-4a20-be41-cc3fe16e7387",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1ec40b81-845d-4a85-bbfd-2cf92160ec7d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ec40fd08-669e-48ce-8d64-ccfeae5fb5b9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "3c7b074a-1f9c-440a-8ec6-ca32095f6b68",
      "documentation": "<p>Deletes a specific version of a bot. To delete all versions of a bot, use the <a>DeleteBot</a> operation. </p> <p>This operation requires permissions for the <code>lex:DeleteBotVersion</code> action.</p>",
      "method": "delete",
      "endpoint": "bots/:name/versions/:version",
      "responses": [
        {
          "uuid": "2f690875-dd9f-4902-bec3-bbd41649cc47",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "917b3296-e747-4d16-8e94-cbede4a137aa",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ca2cb2c5-001a-4e01-91b7-b5217adfaed3",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ee430617-57c7-49d9-9476-5db5cf061b47",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "896ba115-269c-4a63-880b-ec1ee8f346e5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d95331d0-512c-4a34-a929-7ba33c7cb54f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0c895b5b-c54d-4d68-bc83-52767afc2850",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "ResourceInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "e392c77e-33d0-4069-9530-2c50fd22914d",
      "documentation": "<p>Deletes all versions of the intent, including the <code>$LATEST</code> version. To delete a specific version of the intent, use the <a>DeleteIntentVersion</a> operation.</p> <p> You can delete a version of an intent only if it is not referenced. To delete an intent that is referred to in one or more bots (see <a>how-it-works</a>), you must remove those references first. </p> <note> <p> If you get the <code>ResourceInUseException</code> exception, it provides an example reference that shows where the intent is referenced. To remove the reference to the intent, either update the bot or delete it. If you get the same exception when you attempt to delete the intent again, repeat until the intent has no references and the call to <code>DeleteIntent</code> is successful. </p> </note> <p> This operation requires permission for the <code>lex:DeleteIntent</code> action. </p>",
      "method": "delete",
      "endpoint": "intents/:name",
      "responses": [
        {
          "uuid": "fc123dfe-deb5-4b2c-b7e7-b74cda375702",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "604df475-69f7-47a9-be41-bea396879155",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "51024784-9198-4d56-89ae-78e3f0306adf",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "25b81e10-4fc6-4169-a4d8-b512ac436590",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "4947d475-0ad0-48bf-a761-53ae71cfba13",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b244a995-7990-4bdd-8d53-04f37e122e99",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c372fa0d-f34e-4e30-b5fd-ec6719d748fc",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "ResourceInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "d15a84a2-099b-438f-9925-bed743943616",
      "documentation": "<p>Deletes a specific version of an intent. To delete all versions of a intent, use the <a>DeleteIntent</a> operation. </p> <p>This operation requires permissions for the <code>lex:DeleteIntentVersion</code> action.</p>",
      "method": "delete",
      "endpoint": "intents/:name/versions/:version",
      "responses": [
        {
          "uuid": "021f7aab-2a1d-4216-ae32-9d306a2c1cd3",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7968dcc4-76c5-4ccf-8e3d-9a3566c2a534",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ce701cb0-b9c5-4e7b-b599-2421c683e5a6",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "15e65427-0294-44c7-83ed-91dc66e3493c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "549cf7f7-c0ad-47fc-be0a-69949745a9a9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a937814e-db16-4275-85a8-1afe551af422",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "139e479c-389b-4099-9b5a-27c2091d0355",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "ResourceInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "a14adaaa-cac0-4336-857b-8bf58e49c77f",
      "documentation": "<p> Returns information about an intent. In addition to the intent name, you must specify the intent version. </p> <p> This operation requires permissions to perform the <code>lex:GetIntent</code> action. </p>",
      "method": "get",
      "endpoint": "intents/:name/versions/:version",
      "responses": [
        {
          "uuid": "ad197fcf-90a3-46ce-84c1-ae59f9dbb219",
          "body": "{\n  \"version\": \"$LATEST\",\n  \"name\": \"DocOrderPizza\",\n  \"checksum\": \"ca9bc13d-afc8-4706-bbaf-091f7a5935d6\",\n  \"conclusionStatement\": {\n    \"messages\": [\n      {\n        \"content\": \"All right, I ordered  you a {Crust} crust {Type} pizza with {Sauce} sauce.\",\n        \"contentType\": \"PlainText\"\n      },\n      {\n        \"content\": \"OK, your {Crust} crust {Type} pizza with {Sauce} sauce is on the way.\",\n        \"contentType\": \"PlainText\"\n      }\n    ],\n    \"responseCard\": \"foo\"\n  },\n  \"confirmationPrompt\": {\n    \"maxAttempts\": 1,\n    \"messages\": [\n      {\n        \"content\": \"Should I order  your {Crust} crust {Type} pizza with {Sauce} sauce?\",\n        \"contentType\": \"PlainText\"\n      }\n    ]\n  },\n  \"createdDate\": 1494359783.453,\n  \"description\": \"Order a pizza from a local pizzeria.\",\n  \"fulfillmentActivity\": {\n    \"type\": \"ReturnIntent\"\n  },\n  \"lastUpdatedDate\": 1494359783.453,\n  \"rejectionStatement\": {\n    \"messages\": [\n      {\n        \"content\": \"Ok, I'll cancel your order.\",\n        \"contentType\": \"PlainText\"\n      },\n      {\n        \"content\": \"I cancelled your order.\",\n        \"contentType\": \"PlainText\"\n      }\n    ]\n  },\n  \"sampleUtterances\": [\n    \"Order me a pizza.\",\n    \"Order me a {Type} pizza.\",\n    \"I want a {Crust} crust {Type} pizza\",\n    \"I want a {Crust} crust {Type} pizza with {Sauce} sauce.\"\n  ],\n  \"slots\": [\n    {\n      \"name\": \"Type\",\n      \"description\": \"The type of pizza to order.\",\n      \"priority\": 1,\n      \"sampleUtterances\": [\n        \"Get me a {Type} pizza.\",\n        \"A {Type} pizza please.\",\n        \"I'd like a {Type} pizza.\"\n      ],\n      \"slotConstraint\": \"Required\",\n      \"slotType\": \"DocPizzaType\",\n      \"slotTypeVersion\": \"$LATEST\",\n      \"valueElicitationPrompt\": {\n        \"maxAttempts\": 1,\n        \"messages\": [\n          {\n            \"content\": \"What type of pizza would you like?\",\n            \"contentType\": \"PlainText\"\n          },\n          {\n            \"content\": \"Vegie or cheese pizza?\",\n            \"contentType\": \"PlainText\"\n          },\n          {\n            \"content\": \"I can get you a vegie or a cheese pizza.\",\n            \"contentType\": \"PlainText\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"Crust\",\n      \"description\": \"The type of pizza crust to order.\",\n      \"priority\": 2,\n      \"sampleUtterances\": [\n        \"Make it a {Crust} crust.\",\n        \"I'd like a {Crust} crust.\"\n      ],\n      \"slotConstraint\": \"Required\",\n      \"slotType\": \"DocPizzaCrustType\",\n      \"slotTypeVersion\": \"$LATEST\",\n      \"valueElicitationPrompt\": {\n        \"maxAttempts\": 1,\n        \"messages\": [\n          {\n            \"content\": \"What type of crust would you like?\",\n            \"contentType\": \"PlainText\"\n          },\n          {\n            \"content\": \"Thick or thin crust?\",\n            \"contentType\": \"PlainText\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"Sauce\",\n      \"description\": \"The type of sauce to use on the pizza.\",\n      \"priority\": 3,\n      \"sampleUtterances\": [\n        \"Make it {Sauce} sauce.\",\n        \"I'd like {Sauce} sauce.\"\n      ],\n      \"slotConstraint\": \"Required\",\n      \"slotType\": \"DocPizzaSauceType\",\n      \"slotTypeVersion\": \"$LATEST\",\n      \"valueElicitationPrompt\": {\n        \"maxAttempts\": 1,\n        \"messages\": [\n          {\n            \"content\": \"White or red sauce?\",\n            \"contentType\": \"PlainText\"\n          },\n          {\n            \"content\": \"Garlic or tomato sauce?\",\n            \"contentType\": \"PlainText\"\n          }\n        ]\n      }\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2ec193d5-791b-4141-9d8c-f97835f4d065",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "89ccd004-a1d6-4b14-b926-d24a8bbd2cba",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "197d8782-34c5-4342-9949-eecb1f433fc0",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "da86a56b-617e-4e1a-b327-10b11bc44e02",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "6a123ce1-6464-4757-aa5e-58c120a2c3c3",
      "documentation": "<p>Deletes all versions of the slot type, including the <code>$LATEST</code> version. To delete a specific version of the slot type, use the <a>DeleteSlotTypeVersion</a> operation.</p> <p> You can delete a version of a slot type only if it is not referenced. To delete a slot type that is referred to in one or more intents, you must remove those references first. </p> <note> <p> If you get the <code>ResourceInUseException</code> exception, the exception provides an example reference that shows the intent where the slot type is referenced. To remove the reference to the slot type, either update the intent or delete it. If you get the same exception when you attempt to delete the slot type again, repeat until the slot type has no references and the <code>DeleteSlotType</code> call is successful. </p> </note> <p>This operation requires permission for the <code>lex:DeleteSlotType</code> action.</p>",
      "method": "delete",
      "endpoint": "slottypes/:name",
      "responses": [
        {
          "uuid": "58a8e60b-7a8f-47fe-bdc6-933bd44f0ae8",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "fedf91ab-6970-4b13-aae2-a47e3d81af1a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "238cac3b-f70c-4eaf-9e80-2cb434131f41",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d0131e2b-4dbf-4ab5-a6b6-c6a7c751ebee",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d552304f-4c2d-4fb1-bd51-a0229cf5dec6",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "8c9c6f5f-5574-49e1-919b-bed6761f958e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "06450314-b8c1-48fc-a95c-cc16dbebcbb7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "ResourceInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "aded50d5-f263-44b8-b426-937475ca8d07",
      "documentation": "<p>Deletes a specific version of a slot type. To delete all versions of a slot type, use the <a>DeleteSlotType</a> operation. </p> <p>This operation requires permissions for the <code>lex:DeleteSlotTypeVersion</code> action.</p>",
      "method": "delete",
      "endpoint": "slottypes/:name/version/:version",
      "responses": [
        {
          "uuid": "2fa67b9e-5dce-44e4-b104-db66d9535dc5",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e6b73c36-6276-4f08-a9eb-483e88045b09",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "4a5d8d52-7bb6-4d9b-81f0-73514f6d02f5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "22d9c0f9-c730-4b4e-bd7e-1ccdf9ee08c7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f4541962-6c81-42aa-ab0f-a9acc562bfbb",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9b0f82e7-9278-4ed3-9954-1fc85bbed13b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5c0aa781-ed2d-4439-82db-38ea89fa9852",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "ResourceInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "ceac4db7-b57c-4b23-b0bc-db4290504ed4",
      "documentation": "<p>Deletes stored utterances.</p> <p>Amazon Lex stores the utterances that users send to your bot. Utterances are stored for 15 days for use with the <a>GetUtterancesView</a> operation, and then stored indefinitely for use in improving the ability of your bot to respond to user input.</p> <p>Use the <code>DeleteUtterances</code> operation to manually delete stored utterances for a specific user. When you use the <code>DeleteUtterances</code> operation, utterances stored for improving your bot's ability to respond to user input are deleted immediately. Utterances stored for use with the <code>GetUtterancesView</code> operation are deleted after 15 days.</p> <p>This operation requires permissions for the <code>lex:DeleteUtterances</code> action.</p>",
      "method": "delete",
      "endpoint": "bots/:botName/utterances/:userId",
      "responses": [
        {
          "uuid": "9874b4ad-0dd3-4c0c-8312-31d591e396e2",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e84562ab-7915-403c-9680-cf7d858601bc",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a2d7c988-2b31-4eaa-98cf-d89e6607ac01",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a7e0de0f-ca05-4e89-98ad-b16e012ce926",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "afa5c8a2-59d7-41c6-984c-22756927ee6a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "b8648ddb-3901-476a-bbc9-71bd072850f9",
      "documentation": "<p>Returns metadata information for a specific bot. You must provide the bot name and the bot version or alias. </p> <p> This operation requires permissions for the <code>lex:GetBot</code> action. </p>",
      "method": "get",
      "endpoint": "bots/:name/versions/:versionoralias",
      "responses": [
        {
          "uuid": "ec532fbb-256f-4311-b6d8-a5a306ecaf91",
          "body": "{\n  \"version\": \"$LATEST\",\n  \"name\": \"DocOrderPizzaBot\",\n  \"abortStatement\": {\n    \"messages\": [\n      {\n        \"content\": \"I don't understand. Can you try again?\",\n        \"contentType\": \"PlainText\"\n      },\n      {\n        \"content\": \"I'm sorry, I don't understand.\",\n        \"contentType\": \"PlainText\"\n      }\n    ]\n  },\n  \"checksum\": \"20172ee3-fa06-49b2-bbc5-667c090303e9\",\n  \"childDirected\": true,\n  \"clarificationPrompt\": {\n    \"maxAttempts\": 1,\n    \"messages\": [\n      {\n        \"content\": \"I'm sorry, I didn't hear that. Can you repeate what you just said?\",\n        \"contentType\": \"PlainText\"\n      },\n      {\n        \"content\": \"Can you say that again?\",\n        \"contentType\": \"PlainText\"\n      }\n    ]\n  },\n  \"createdDate\": 1494360160.133,\n  \"description\": \"Orders a pizza from a local pizzeria.\",\n  \"idleSessionTTLInSeconds\": 300,\n  \"intents\": [\n    {\n      \"intentName\": \"DocOrderPizza\",\n      \"intentVersion\": \"$LATEST\"\n    }\n  ],\n  \"lastUpdatedDate\": 1494360160.133,\n  \"locale\": \"en-US\",\n  \"status\": \"NOT_BUILT\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "90bed590-a37f-4bb2-b255-edbc28c8d6d4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "80ad3093-0862-4dc3-ba65-bff8e2f3cfac",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ed4233be-5d6e-4b3c-9d98-a7c1d318c1b8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5b5941f5-d186-46c6-b69a-646568951d0e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "38245237-fb38-4561-9172-c765aeeb52a8",
      "documentation": "<p>Returns a list of aliases for a specified Amazon Lex bot.</p> <p>This operation requires permissions for the <code>lex:GetBotAliases</code> action.</p>",
      "method": "get",
      "endpoint": "bots/:botName/aliases/",
      "responses": [
        {
          "uuid": "4640bc51-5ef2-4a7f-9463-5902bf7c2a79",
          "body": "{\n  \"BotAliases\": [\n    {\n      \"name\": \"\",\n      \"description\": \"\",\n      \"botVersion\": \"\",\n      \"botName\": \"\",\n      \"lastUpdatedDate\": \"{{faker 'date.recent' 365}}\",\n      \"createdDate\": \"{{faker 'date.recent' 365}}\",\n      \"checksum\": \"\",\n      \"conversationLogs\": {\n        \"logSettings\": [\n          {\n            \"logType\": \"\",\n            \"destination\": \"\",\n            \"kmsKeyArn\": \"\",\n            \"resourceArn\": \"\",\n            \"resourcePrefix\": \"\"\n          }\n        ],\n        \"iamRoleArn\": \"\"\n      }\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "6d0d2521-91fb-4317-aca1-3b26be19b991",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2b64c901-4e64-441f-b6da-15822270ce5d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "43e07664-b3f6-4323-97a2-aba5aa939e25",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "c156ed6d-556d-4dd6-a9e6-74ce31d00c90",
      "documentation": "<p> Returns a list of all of the channels associated with the specified bot. </p> <p>The <code>GetBotChannelAssociations</code> operation requires permissions for the <code>lex:GetBotChannelAssociations</code> action.</p>",
      "method": "get",
      "endpoint": "bots/:botName/aliases/:aliasName/channels/",
      "responses": [
        {
          "uuid": "65f8f166-dc56-473c-8ad7-561ab983c24d",
          "body": "{\n  \"botChannelAssociations\": [\n    {\n      \"name\": \"\",\n      \"description\": \"\",\n      \"botAlias\": \"\",\n      \"botName\": \"\",\n      \"createdDate\": \"{{faker 'date.recent' 365}}\",\n      \"type\": \"\",\n      \"botConfiguration\": {},\n      \"status\": \"\",\n      \"failureReason\": \"\"\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a56c5972-b8ac-4426-a225-0dba4a5c340c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "98906737-95c5-45c4-a74d-69239ac5ea2a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5e914e55-8c83-4bc7-a1c8-31ec80f91f6a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "3edeea65-3844-4708-b6d6-95107107609d",
      "documentation": "<p>Gets information about all of the versions of a bot.</p> <p>The <code>GetBotVersions</code> operation returns a <code>BotMetadata</code> object for each version of a bot. For example, if a bot has three numbered versions, the <code>GetBotVersions</code> operation returns four <code>BotMetadata</code> objects in the response, one for each numbered version and one for the <code>$LATEST</code> version. </p> <p>The <code>GetBotVersions</code> operation always returns at least one version, the <code>$LATEST</code> version.</p> <p>This operation requires permissions for the <code>lex:GetBotVersions</code> action.</p>",
      "method": "get",
      "endpoint": "bots/:name/versions/",
      "responses": [
        {
          "uuid": "d18ef3b1-4da9-4d2d-9c6c-a60cb9c01e62",
          "body": "{\n  \"bots\": [\n    {\n      \"name\": \"\",\n      \"description\": \"\",\n      \"status\": \"\",\n      \"lastUpdatedDate\": \"{{faker 'date.recent' 365}}\",\n      \"createdDate\": \"{{faker 'date.recent' 365}}\",\n      \"version\": \"\"\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "fb41a68b-0e38-4eaa-be6e-74a132f5f230",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a841c7df-cb9a-4d96-8384-236e124aea44",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "be1d2912-4a92-461b-8aaa-77aa19ce78f5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d8dd3000-8080-4834-8723-6ecaff32a8ee",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "bc863d60-e142-4c63-9fa9-aa2a1c855233",
      "documentation": "<p>Returns bot information as follows: </p> <ul> <li> <p>If you provide the <code>nameContains</code> field, the response includes information for the <code>$LATEST</code> version of all bots whose name contains the specified string.</p> </li> <li> <p>If you don't specify the <code>nameContains</code> field, the operation returns information about the <code>$LATEST</code> version of all of your bots.</p> </li> </ul> <p>This operation requires permission for the <code>lex:GetBots</code> action.</p>",
      "method": "get",
      "endpoint": "bots/",
      "responses": [
        {
          "uuid": "d7603295-a3e3-4665-bd69-e39eb547eb54",
          "body": "{\n  \"bots\": [\n    {\n      \"version\": \"$LATEST\",\n      \"name\": \"DocOrderPizzaBot\",\n      \"createdDate\": 1494360160.133,\n      \"description\": \"Orders a pizza from a local pizzeria.\",\n      \"lastUpdatedDate\": 1494360160.133,\n      \"status\": \"NOT_BUILT\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "dc16edc9-29dc-41d5-8d3c-e5653c893e04",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5879d9a7-46f3-43c4-995b-7b64f1c1393e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "cf3c37d9-ccbc-40f7-bbe5-a02b21ebb1ab",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ac143ac8-64cf-4171-b02c-96875abf3db7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "061d21bb-5ee0-484f-9272-0e288167b251",
      "documentation": "<p>Returns information about a built-in intent.</p> <p>This operation requires permission for the <code>lex:GetBuiltinIntent</code> action.</p>",
      "method": "get",
      "endpoint": "builtins/intents/:signature",
      "responses": [
        {
          "uuid": "a8191ebf-a716-432b-b13c-2872da265d9d",
          "body": "{\n  \"signature\": \"\",\n  \"supportedLocales\": [\n    \"{{oneOf (array 'de-DE' 'en-AU' 'en-GB' 'en-IN' 'en-US' 'es-419' 'es-ES' 'es-US' 'fr-FR' 'fr-CA' 'it-IT' 'ja-JP' 'ko-KR')}}\"\n  ],\n  \"slots\": [\n    {\n      \"name\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "98b476b1-d796-4f7c-8b0e-f30adaa995a6",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "54b925d9-7725-432e-a11a-9d24d33541c5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "fcceeca3-2f90-4d94-98a0-5cfb616c8022",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b51dc398-bf37-4387-8dba-3716a84876d4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "03a36941-1970-4288-9565-704982da25d6",
      "documentation": "<p>Gets a list of built-in intents that meet the specified criteria.</p> <p>This operation requires permission for the <code>lex:GetBuiltinIntents</code> action.</p>",
      "method": "get",
      "endpoint": "builtins/intents/",
      "responses": [
        {
          "uuid": "de0b2886-bc7a-425e-a964-02f7e6c945ff",
          "body": "{\n  \"intents\": [\n    {\n      \"signature\": \"\",\n      \"supportedLocales\": [\n        \"{{oneOf (array 'de-DE' 'en-AU' 'en-GB' 'en-IN' 'en-US' 'es-419' 'es-ES' 'es-US' 'fr-FR' 'fr-CA' 'it-IT' 'ja-JP' 'ko-KR')}}\"\n      ]\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "35e0a853-81a3-42bd-a032-3125fcf222be",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "67cdf205-ba02-4127-8e93-3fb2a2180c09",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5221161b-60a1-4f67-b3c7-13898f4a9b81",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "d4f33e39-5ce0-43c9-8ba9-e58407002fbe",
      "documentation": "<p>Gets a list of built-in slot types that meet the specified criteria.</p> <p>For a list of built-in slot types, see <a href=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference\">Slot Type Reference</a> in the <i>Alexa Skills Kit</i>.</p> <p>This operation requires permission for the <code>lex:GetBuiltInSlotTypes</code> action.</p>",
      "method": "get",
      "endpoint": "builtins/slottypes/",
      "responses": [
        {
          "uuid": "164c0629-6736-4d8d-8767-98c1c6f7f3a3",
          "body": "{\n  \"slotTypes\": [\n    {\n      \"signature\": \"\",\n      \"supportedLocales\": [\n        \"{{oneOf (array 'de-DE' 'en-AU' 'en-GB' 'en-IN' 'en-US' 'es-419' 'es-ES' 'es-US' 'fr-FR' 'fr-CA' 'it-IT' 'ja-JP' 'ko-KR')}}\"\n      ]\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f5a6d28e-6b17-4434-a0d4-060637484d57",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "98f4a000-282c-4541-b988-2203343ef030",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "fa388389-d12d-4148-a0a1-d61df703db0a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "5b0d4b80-d830-4757-a1b7-58ee49fa5b5a",
      "documentation": "Exports the contents of a Amazon Lex resource in a specified format. ",
      "method": "get",
      "endpoint": "exports/#name&version&resourceType&exportType",
      "responses": [
        {
          "uuid": "9207f8cf-1ce9-44af-8b88-e8ce58d3c24d",
          "body": "{\n  \"name\": \"\",\n  \"version\": \"\",\n  \"resourceType\": \"\",\n  \"exportType\": \"\",\n  \"exportStatus\": \"\",\n  \"failureReason\": \"\",\n  \"url\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "afddcdeb-c62d-4852-aa76-94697a6fa10d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7e5152bc-4696-406f-ba13-4779bcfb214a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d5716dcd-73e4-46eb-be9a-4a68650559b3",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "60001f0a-0e25-4db2-98de-442202c96c24",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "1b6be7ae-21a9-4885-8f5a-87b6b0139cca",
      "documentation": "Gets information about an import job started with the <code>StartImport</code> operation.",
      "method": "get",
      "endpoint": "imports/:importId",
      "responses": [
        {
          "uuid": "3c834701-8fc3-4470-b1cf-6141291eece9",
          "body": "{\n  \"name\": \"\",\n  \"resourceType\": \"\",\n  \"mergeStrategy\": \"\",\n  \"importId\": \"\",\n  \"importStatus\": \"\",\n  \"failureReason\": [\n    \"\"\n  ],\n  \"createdDate\": \"{{faker 'date.recent' 365}}\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1c9fa4b9-19fe-4650-98e4-d8058eef2ad7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5111ecae-ba9c-434d-92a9-f5789fbdefea",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2040f2bf-b91f-4f4d-a066-6b357aaa10b4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "42db9df9-a1a3-48c8-be78-f1819d5f1b37",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "32f18360-2644-4370-9c3e-a4f771ee95e0",
      "documentation": "<p>Gets information about all of the versions of an intent.</p> <p>The <code>GetIntentVersions</code> operation returns an <code>IntentMetadata</code> object for each version of an intent. For example, if an intent has three numbered versions, the <code>GetIntentVersions</code> operation returns four <code>IntentMetadata</code> objects in the response, one for each numbered version and one for the <code>$LATEST</code> version. </p> <p>The <code>GetIntentVersions</code> operation always returns at least one version, the <code>$LATEST</code> version.</p> <p>This operation requires permissions for the <code>lex:GetIntentVersions</code> action.</p>",
      "method": "get",
      "endpoint": "intents/:name/versions/",
      "responses": [
        {
          "uuid": "9c631a43-fddb-4512-9189-8f17df4cbb46",
          "body": "{\n  \"intents\": [\n    {\n      \"name\": \"\",\n      \"description\": \"\",\n      \"lastUpdatedDate\": \"{{faker 'date.recent' 365}}\",\n      \"createdDate\": \"{{faker 'date.recent' 365}}\",\n      \"version\": \"\"\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a56aa341-fbaf-4b6f-8b4b-b73d8f895ab1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5cb729b4-4fdc-48aa-842f-e23413f176d9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "aff70124-5a8c-4940-8ce0-bc7b3c646bf6",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "35ba9bcd-c8e2-4224-ac13-966b8e1fe5fd",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "8897ae29-8bd7-4d10-add5-f0e2aaebebbc",
      "documentation": "<p>Returns intent information as follows: </p> <ul> <li> <p>If you specify the <code>nameContains</code> field, returns the <code>$LATEST</code> version of all intents that contain the specified string.</p> </li> <li> <p> If you don't specify the <code>nameContains</code> field, returns information about the <code>$LATEST</code> version of all intents. </p> </li> </ul> <p> The operation requires permission for the <code>lex:GetIntents</code> action. </p>",
      "method": "get",
      "endpoint": "intents/",
      "responses": [
        {
          "uuid": "f3a55f1c-bec9-4a02-a6cd-ec3749ab6da4",
          "body": "{\n  \"intents\": [\n    {\n      \"version\": \"$LATEST\",\n      \"name\": \"DocOrderPizza\",\n      \"createdDate\": 1494359783.453,\n      \"description\": \"Order a pizza from a local pizzeria.\",\n      \"lastUpdatedDate\": 1494359783.453\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "8baad276-164d-4b2c-968f-a8472b8f1d55",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "bbef9bc0-b29b-46f8-8bd7-5e0cc6e146b7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ddb5919b-7265-4ecd-9875-38c523cae4db",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1ed8e3a5-c280-49e1-9a9e-f5d4166f8976",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "1b4c8097-e92e-4ae5-998c-e75dadb9ae33",
      "documentation": "Provides details about an ongoing or complete migration from an Amazon Lex V1 bot to an Amazon Lex V2 bot. Use this operation to view the migration alerts and warnings related to the migration.",
      "method": "get",
      "endpoint": "migrations/:migrationId",
      "responses": [
        {
          "uuid": "a3249182-5fe5-4966-b334-c9ec00eaf7ab",
          "body": "{\n  \"migrationId\": \"\",\n  \"v1BotName\": \"\",\n  \"v1BotVersion\": \"\",\n  \"v1BotLocale\": \"\",\n  \"v2BotId\": \"\",\n  \"v2BotRole\": \"\",\n  \"migrationStatus\": \"\",\n  \"migrationStrategy\": \"\",\n  \"migrationTimestamp\": \"{{faker 'date.recent' 365}}\",\n  \"alerts\": [\n    {\n      \"type\": \"\",\n      \"message\": \"\",\n      \"details\": [\n        \"\"\n      ],\n      \"referenceURLs\": [\n        \"\"\n      ]\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "12dd94f5-93fa-47ee-b3f2-d498379054bc",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2c5e05aa-477a-439b-bc3b-0310f563a7a2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f208f7e1-43c3-41fc-9362-53d594a7bc9c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ad3add1f-b7bd-4df3-a54e-68ab37c4f2d3",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "8e17f1c2-659b-4033-a1be-31757d78051e",
      "documentation": "Gets a list of migrations between Amazon Lex V1 and Amazon Lex V2.",
      "method": "get",
      "endpoint": "migrations",
      "responses": [
        {
          "uuid": "13a9d77e-2201-46f0-9ed3-71d7efb2c27d",
          "body": "{\n  \"migrationSummaries\": [\n    {\n      \"migrationId\": \"\",\n      \"v1BotName\": \"\",\n      \"v1BotVersion\": \"\",\n      \"v1BotLocale\": \"\",\n      \"v2BotId\": \"\",\n      \"v2BotRole\": \"\",\n      \"migrationStatus\": \"\",\n      \"migrationStrategy\": \"\",\n      \"migrationTimestamp\": \"{{faker 'date.recent' 365}}\"\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1bcc15ae-608a-4068-9b95-b5ac1cc26d0f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b10e3188-5eef-4444-9047-eaecfd9c6dd9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c736496f-b6ae-4879-99af-d250260b1fac",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "072a771a-9244-4677-9bcb-d61784958729",
      "documentation": "<p>Starts migrating a bot from Amazon Lex V1 to Amazon Lex V2. Migrate your bot when you want to take advantage of the new features of Amazon Lex V2.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/migrate.html\">Migrating a bot</a> in the <i>Amazon Lex developer guide</i>.</p>",
      "method": "post",
      "endpoint": "migrations",
      "responses": [
        {
          "uuid": "d7f36c10-0786-4578-8b24-9d5f273e9e07",
          "body": "{\n  \"v1BotName\": \"\",\n  \"v1BotVersion\": \"\",\n  \"v1BotLocale\": \"\",\n  \"v2BotId\": \"\",\n  \"v2BotRole\": \"\",\n  \"migrationId\": \"\",\n  \"migrationStrategy\": \"\",\n  \"migrationTimestamp\": \"{{faker 'date.recent' 365}}\"\n}",
          "latency": 0,
          "statusCode": 202,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7bd5dd18-ed61-4abd-a9da-37bd451d7e4f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d2c8ee2d-f6f6-4f66-a86e-6db790c09184",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "55e5f418-0b24-44ad-9988-d418e9f774f5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "071c3880-f92c-4a02-bed5-555353368eb2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "AccessDeniedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "8e23506a-9e0b-4b97-9af4-fd4e43bb9083",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "2dede1ac-52c9-4f6e-9760-29bfe2fc6421",
      "documentation": "<p>Returns information about a specific version of a slot type. In addition to specifying the slot type name, you must specify the slot type version.</p> <p>This operation requires permissions for the <code>lex:GetSlotType</code> action.</p>",
      "method": "get",
      "endpoint": "slottypes/:name/versions/:version",
      "responses": [
        {
          "uuid": "d11b57b3-b96e-4c31-a822-fcd53bde1162",
          "body": "{\n  \"version\": \"$LATEST\",\n  \"name\": \"DocPizzaCrustType\",\n  \"checksum\": \"210b3d5a-90a3-4b22-ac7e-f50c2c71095f\",\n  \"createdDate\": 1494359274.403,\n  \"description\": \"Available crust types\",\n  \"enumerationValues\": [\n    {\n      \"value\": \"thick\"\n    },\n    {\n      \"value\": \"thin\"\n    }\n  ],\n  \"lastUpdatedDate\": 1494359274.403\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9536f7c5-20f3-49a3-8999-f2a569914e21",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3410dca6-7d1b-489c-88bb-0c7f5494fc1d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0f9dda59-ea49-4963-81cb-eae134deedc9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "962fa301-2269-4f68-8220-e31f2b446e95",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "d7aecaa4-5f18-4b98-a69f-e0cd36d9ec71",
      "documentation": "<p>Gets information about all versions of a slot type.</p> <p>The <code>GetSlotTypeVersions</code> operation returns a <code>SlotTypeMetadata</code> object for each version of a slot type. For example, if a slot type has three numbered versions, the <code>GetSlotTypeVersions</code> operation returns four <code>SlotTypeMetadata</code> objects in the response, one for each numbered version and one for the <code>$LATEST</code> version. </p> <p>The <code>GetSlotTypeVersions</code> operation always returns at least one version, the <code>$LATEST</code> version.</p> <p>This operation requires permissions for the <code>lex:GetSlotTypeVersions</code> action.</p>",
      "method": "get",
      "endpoint": "slottypes/:name/versions/",
      "responses": [
        {
          "uuid": "3370681f-a69d-4f8e-bfb4-b4e5c5b17999",
          "body": "{\n  \"slotTypes\": [\n    {\n      \"name\": \"\",\n      \"description\": \"\",\n      \"lastUpdatedDate\": \"{{faker 'date.recent' 365}}\",\n      \"createdDate\": \"{{faker 'date.recent' 365}}\",\n      \"version\": \"\"\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0f552a9c-193c-4cca-8c3d-097443cb5e5c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "49b9700f-acd0-435e-96d9-5d4af9fcdc5e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7566ec39-865f-425d-8e36-6855c5e9c4b4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1fbee593-98a4-4970-9006-c9a055d30e4c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "bd41bb62-783f-44ab-8e0b-5592f8a0e9ac",
      "documentation": "<p>Returns slot type information as follows: </p> <ul> <li> <p>If you specify the <code>nameContains</code> field, returns the <code>$LATEST</code> version of all slot types that contain the specified string.</p> </li> <li> <p> If you don't specify the <code>nameContains</code> field, returns information about the <code>$LATEST</code> version of all slot types. </p> </li> </ul> <p> The operation requires permission for the <code>lex:GetSlotTypes</code> action. </p>",
      "method": "get",
      "endpoint": "slottypes/",
      "responses": [
        {
          "uuid": "b3b02bc9-2b9a-4b47-a4b7-ae52db5a433a",
          "body": "{\n  \"slotTypes\": [\n    {\n      \"version\": \"$LATEST\",\n      \"name\": \"DocPizzaCrustType\",\n      \"createdDate\": 1494359274.403,\n      \"description\": \"Available crust types\",\n      \"lastUpdatedDate\": 1494359274.403\n    },\n    {\n      \"version\": \"$LATEST\",\n      \"name\": \"DocPizzaSauceType\",\n      \"createdDate\": 1494356442.23,\n      \"description\": \"Available pizza sauces\",\n      \"lastUpdatedDate\": 1494356442.23\n    },\n    {\n      \"version\": \"$LATEST\",\n      \"name\": \"DocPizzaType\",\n      \"createdDate\": 1494359198.656,\n      \"description\": \"Available pizzas\",\n      \"lastUpdatedDate\": 1494359198.656\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ba1a3f41-a23b-4fbd-b010-c429b2e922e0",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "05563121-b6b8-4a51-b5a3-d7be15f352a5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "334014e2-9e9e-448a-9150-99f84d1ff3b3",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e4388007-cb0d-49ed-bafd-3ad3c1bb84c2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "5c007a41-fe63-49f8-a47b-8d9f746a7f75",
      "documentation": "<p>Use the <code>GetUtterancesView</code> operation to get information about the utterances that your users have made to your bot. You can use this list to tune the utterances that your bot responds to.</p> <p>For example, say that you have created a bot to order flowers. After your users have used your bot for a while, use the <code>GetUtterancesView</code> operation to see the requests that they have made and whether they have been successful. You might find that the utterance \"I want flowers\" is not being recognized. You could add this utterance to the <code>OrderFlowers</code> intent so that your bot recognizes that utterance.</p> <p>After you publish a new version of a bot, you can get information about the old version and the new so that you can compare the performance across the two versions. </p> <p>Utterance statistics are generated once a day. Data is available for the last 15 days. You can request information for up to 5 versions of your bot in each request. Amazon Lex returns the most frequent utterances received by the bot in the last 15 days. The response contains information about a maximum of 100 utterances for each version.</p> <p>If you set <code>childDirected</code> field to true when you created your bot, if you are using slot obfuscation with one or more slots, or if you opted out of participating in improving Amazon Lex, utterances are not available.</p> <p>This operation requires permissions for the <code>lex:GetUtterancesView</code> action.</p>",
      "method": "get",
      "endpoint": "bots/:botname/utterances#view=aggregation&bot_versions&status_type",
      "responses": [
        {
          "uuid": "01e9a355-307f-4b1e-b713-33a85fcc1665",
          "body": "{\n  \"botName\": \"\",\n  \"utterances\": [\n    {\n      \"botVersion\": \"\",\n      \"utterances\": [\n        {\n          \"utteranceString\": \"\",\n          \"count\": {{faker 'random.number'}},\n          \"distinctUsers\": {{faker 'random.number'}},\n          \"firstUtteredDate\": \"{{faker 'date.recent' 365}}\",\n          \"lastUtteredDate\": \"{{faker 'date.recent' 365}}\"\n        }\n      ]\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7a90ca7d-2e85-445f-962f-e8117190d321",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "30c38b85-4d2d-4758-b409-96ae33911874",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d72ec5ac-371e-4ed9-8155-cfa5c9d37d21",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "50e76304-4718-409b-a406-ed02cad2bcef",
      "documentation": "Gets a list of tags associated with the specified resource. Only bots, bot aliases, and bot channels can have tags associated with them.",
      "method": "get",
      "endpoint": "tags/:resourceArn",
      "responses": [
        {
          "uuid": "d0d12c12-fb99-4664-a0bc-a2c326fad027",
          "body": "{\n  \"tags\": [\n    {\n      \"key\": \"\",\n      \"value\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "4ba6f2a4-cd28-4236-8388-209474ee97ab",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1a674ee8-eb74-40b6-9fe7-860d062dde03",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "369ac2d8-9848-4b33-8034-77d7fe5ad0f9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d2f7889b-4e4c-42c2-8b92-cea223ad8e6a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "12f3ef71-9fdc-4e67-92fd-efcda4cc4c42",
      "documentation": "Adds the specified tags to the specified resource. If a tag key already exists, the existing value is replaced with the new value.",
      "method": "post",
      "endpoint": "tags/:resourceArn",
      "responses": [
        {
          "uuid": "d9388a90-3df2-450a-9410-ba5882fe595d",
          "body": "{}",
          "latency": 0,
          "statusCode": 204,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0a76e47e-6a75-4cb0-9a47-c6d53fd79ab3",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7fabc11e-b2cb-4355-89e9-c8d9692c38a5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c8dcee26-f706-4aa1-a4c5-776bdb8a7f28",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "694a4eb2-8eda-4a96-b2b7-4bdffcc39f9c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b6f00ac8-58d9-4a6a-8ddb-fab8f42640de",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "b4ee99f6-fe37-4a49-84a3-59ff81d574a9",
      "documentation": "<p>Creates an Amazon Lex conversational bot or replaces an existing bot. When you create or update a bot you are only required to specify a name, a locale, and whether the bot is directed toward children under age 13. You can use this to add intents later, or to remove intents from an existing bot. When you create a bot with the minimum information, the bot is created or updated but Amazon Lex returns the <code/> response <code>FAILED</code>. You can build the bot after you add one or more intents. For more information about Amazon Lex bots, see <a>how-it-works</a>. </p> <p>If you specify the name of an existing bot, the fields in the request replace the existing values in the <code>$LATEST</code> version of the bot. Amazon Lex removes any fields that you don't provide values for in the request, except for the <code>idleTTLInSeconds</code> and <code>privacySettings</code> fields, which are set to their default values. If you don't specify values for required fields, Amazon Lex throws an exception.</p> <p>This operation requires permissions for the <code>lex:PutBot</code> action. For more information, see <a>security-iam</a>.</p>",
      "method": "put",
      "endpoint": "bots/:name/versions/$LATEST",
      "responses": [
        {
          "uuid": "3589bf44-0327-44f5-a450-d1a474b5470c",
          "body": "{\n  \"version\": \"$LATEST\",\n  \"name\": \"DocOrderPizzaBot\",\n  \"abortStatement\": {\n    \"messages\": [\n      {\n        \"content\": \"I don't understand. Can you try again?\",\n        \"contentType\": \"PlainText\"\n      },\n      {\n        \"content\": \"I'm sorry, I don't understand.\",\n        \"contentType\": \"PlainText\"\n      }\n    ]\n  },\n  \"checksum\": \"20172ee3-fa06-49b2-bbc5-667c090303e9\",\n  \"childDirected\": true,\n  \"clarificationPrompt\": {\n    \"maxAttempts\": 1,\n    \"messages\": [\n      {\n        \"content\": \"I'm sorry, I didn't hear that. Can you repeate what you just said?\",\n        \"contentType\": \"PlainText\"\n      },\n      {\n        \"content\": \"Can you say that again?\",\n        \"contentType\": \"PlainText\"\n      }\n    ]\n  },\n  \"createdDate\": 1494360160.133,\n  \"description\": \"Orders a pizza from a local pizzeria.\",\n  \"idleSessionTTLInSeconds\": 300,\n  \"intents\": [\n    {\n      \"intentName\": \"DocOrderPizza\",\n      \"intentVersion\": \"$LATEST\"\n    }\n  ],\n  \"lastUpdatedDate\": 1494360160.133,\n  \"locale\": \"en-US\",\n  \"status\": \"NOT_BUILT\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7d8d0b94-d3b8-4ce5-89be-95e1ebf4671f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ca2b73c9-68e4-42c1-a88e-ea6d60865ce7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "6b1680c8-4d98-46e6-a820-9506e0524329",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2db3a617-56ec-44b2-b97d-dae6c39f7a01",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7051a42f-1986-47c4-8b9f-d2a59dd3727a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "PreconditionFailedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "4cd24f87-8326-4719-b15b-92f37ebeab34",
      "documentation": "<p>Creates an intent or replaces an existing intent.</p> <p>To define the interaction between the user and your bot, you use one or more intents. For a pizza ordering bot, for example, you would create an <code>OrderPizza</code> intent. </p> <p>To create an intent or replace an existing intent, you must provide the following:</p> <ul> <li> <p>Intent name. For example, <code>OrderPizza</code>.</p> </li> <li> <p>Sample utterances. For example, \"Can I order a pizza, please.\" and \"I want to order a pizza.\"</p> </li> <li> <p>Information to be gathered. You specify slot types for the information that your bot will request from the user. You can specify standard slot types, such as a date or a time, or custom slot types such as the size and crust of a pizza.</p> </li> <li> <p>How the intent will be fulfilled. You can provide a Lambda function or configure the intent to return the intent information to the client application. If you use a Lambda function, when all of the intent information is available, Amazon Lex invokes your Lambda function. If you configure your intent to return the intent information to the client application. </p> </li> </ul> <p>You can specify other optional information in the request, such as:</p> <ul> <li> <p>A confirmation prompt to ask the user to confirm an intent. For example, \"Shall I order your pizza?\"</p> </li> <li> <p>A conclusion statement to send to the user after the intent has been fulfilled. For example, \"I placed your pizza order.\"</p> </li> <li> <p>A follow-up prompt that asks the user for additional activity. For example, asking \"Do you want to order a drink with your pizza?\"</p> </li> </ul> <p>If you specify an existing intent name to update the intent, Amazon Lex replaces the values in the <code>$LATEST</code> version of the intent with the values in the request. Amazon Lex removes fields that you don't provide in the request. If you don't specify the required fields, Amazon Lex throws an exception. When you update the <code>$LATEST</code> version of an intent, the <code>status</code> field of any bot that uses the <code>$LATEST</code> version of the intent is set to <code>NOT_BUILT</code>.</p> <p>For more information, see <a>how-it-works</a>.</p> <p>This operation requires permissions for the <code>lex:PutIntent</code> action.</p>",
      "method": "put",
      "endpoint": "intents/:name/versions/$LATEST",
      "responses": [
        {
          "uuid": "3b7c6ccb-cb82-471f-b27c-5a29b3ae8ff1",
          "body": "{\n  \"version\": \"$LATEST\",\n  \"name\": \"DocOrderPizza\",\n  \"checksum\": \"ca9bc13d-afc8-4706-bbaf-091f7a5935d6\",\n  \"conclusionStatement\": {\n    \"messages\": [\n      {\n        \"content\": \"All right, I ordered  you a {Crust} crust {Type} pizza with {Sauce} sauce.\",\n        \"contentType\": \"PlainText\"\n      },\n      {\n        \"content\": \"OK, your {Crust} crust {Type} pizza with {Sauce} sauce is on the way.\",\n        \"contentType\": \"PlainText\"\n      }\n    ],\n    \"responseCard\": \"foo\"\n  },\n  \"confirmationPrompt\": {\n    \"maxAttempts\": 1,\n    \"messages\": [\n      {\n        \"content\": \"Should I order  your {Crust} crust {Type} pizza with {Sauce} sauce?\",\n        \"contentType\": \"PlainText\"\n      }\n    ]\n  },\n  \"createdDate\": 1494359783.453,\n  \"description\": \"Order a pizza from a local pizzeria.\",\n  \"fulfillmentActivity\": {\n    \"type\": \"ReturnIntent\"\n  },\n  \"lastUpdatedDate\": 1494359783.453,\n  \"rejectionStatement\": {\n    \"messages\": [\n      {\n        \"content\": \"Ok, I'll cancel your order.\",\n        \"contentType\": \"PlainText\"\n      },\n      {\n        \"content\": \"I cancelled your order.\",\n        \"contentType\": \"PlainText\"\n      }\n    ]\n  },\n  \"sampleUtterances\": [\n    \"Order me a pizza.\",\n    \"Order me a {Type} pizza.\",\n    \"I want a {Crust} crust {Type} pizza\",\n    \"I want a {Crust} crust {Type} pizza with {Sauce} sauce.\"\n  ],\n  \"slots\": [\n    {\n      \"name\": \"Sauce\",\n      \"description\": \"The type of sauce to use on the pizza.\",\n      \"priority\": 3,\n      \"sampleUtterances\": [\n        \"Make it {Sauce} sauce.\",\n        \"I'd like {Sauce} sauce.\"\n      ],\n      \"slotConstraint\": \"Required\",\n      \"slotType\": \"DocPizzaSauceType\",\n      \"slotTypeVersion\": \"$LATEST\",\n      \"valueElicitationPrompt\": {\n        \"maxAttempts\": 1,\n        \"messages\": [\n          {\n            \"content\": \"White or red sauce?\",\n            \"contentType\": \"PlainText\"\n          },\n          {\n            \"content\": \"Garlic or tomato sauce?\",\n            \"contentType\": \"PlainText\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"Type\",\n      \"description\": \"The type of pizza to order.\",\n      \"priority\": 1,\n      \"sampleUtterances\": [\n        \"Get me a {Type} pizza.\",\n        \"A {Type} pizza please.\",\n        \"I'd like a {Type} pizza.\"\n      ],\n      \"slotConstraint\": \"Required\",\n      \"slotType\": \"DocPizzaType\",\n      \"slotTypeVersion\": \"$LATEST\",\n      \"valueElicitationPrompt\": {\n        \"maxAttempts\": 1,\n        \"messages\": [\n          {\n            \"content\": \"What type of pizza would you like?\",\n            \"contentType\": \"PlainText\"\n          },\n          {\n            \"content\": \"Vegie or cheese pizza?\",\n            \"contentType\": \"PlainText\"\n          },\n          {\n            \"content\": \"I can get you a vegie or a cheese pizza.\",\n            \"contentType\": \"PlainText\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"Crust\",\n      \"description\": \"The type of pizza crust to order.\",\n      \"priority\": 2,\n      \"sampleUtterances\": [\n        \"Make it a {Crust} crust.\",\n        \"I'd like a {Crust} crust.\"\n      ],\n      \"slotConstraint\": \"Required\",\n      \"slotType\": \"DocPizzaCrustType\",\n      \"slotTypeVersion\": \"$LATEST\",\n      \"valueElicitationPrompt\": {\n        \"maxAttempts\": 1,\n        \"messages\": [\n          {\n            \"content\": \"What type of crust would you like?\",\n            \"contentType\": \"PlainText\"\n          },\n          {\n            \"content\": \"Thick or thin crust?\",\n            \"contentType\": \"PlainText\"\n          }\n        ]\n      }\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a97c69e2-2ded-461d-a7ed-bb3da98769c5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "cb80f3d8-a8d9-4a0b-8683-859e7fc86d63",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2029a9b8-ee64-4dab-8d85-62ca2fafeb3d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b0f258cf-2766-419a-85cf-3a3f2e8bd578",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9dec7595-f910-4ba9-8fd1-74b406b79a45",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "PreconditionFailedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "5fcac273-ceec-47da-b548-2d94bce50b53",
      "documentation": "<p>Creates a custom slot type or replaces an existing custom slot type.</p> <p>To create a custom slot type, specify a name for the slot type and a set of enumeration values, which are the values that a slot of this type can assume. For more information, see <a>how-it-works</a>.</p> <p>If you specify the name of an existing slot type, the fields in the request replace the existing values in the <code>$LATEST</code> version of the slot type. Amazon Lex removes the fields that you don't provide in the request. If you don't specify required fields, Amazon Lex throws an exception. When you update the <code>$LATEST</code> version of a slot type, if a bot uses the <code>$LATEST</code> version of an intent that contains the slot type, the bot's <code>status</code> field is set to <code>NOT_BUILT</code>.</p> <p>This operation requires permissions for the <code>lex:PutSlotType</code> action.</p>",
      "method": "put",
      "endpoint": "slottypes/:name/versions/$LATEST",
      "responses": [
        {
          "uuid": "0595c68d-1575-4a42-888b-37008e00fc53",
          "body": "{\n  \"version\": \"$LATEST\",\n  \"name\": \"DocPizzaSauceType\",\n  \"checksum\": \"cfd00ed1-775d-4357-947c-aca7e73b44ba\",\n  \"createdDate\": 1494356442.23,\n  \"description\": \"Available pizza sauces\",\n  \"enumerationValues\": [\n    {\n      \"value\": \"red\"\n    },\n    {\n      \"value\": \"white\"\n    }\n  ],\n  \"lastUpdatedDate\": 1494356442.23\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "26c61893-99f0-40f1-b921-63d5c75c462a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ba52498e-8592-44aa-bfc7-3732b04c0218",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b78f7567-b287-436f-ae48-ead90fafa128",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3aeac4f9-6ad4-4cbb-92b2-1487668001b2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "56083221-9e07-42bc-96a6-d8134625c096",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "PreconditionFailedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "ef3a63c4-6196-4cae-be38-a73db04f7e92",
      "documentation": "Starts a job to import a resource to Amazon Lex.",
      "method": "post",
      "endpoint": "imports/",
      "responses": [
        {
          "uuid": "8e874fc5-d6f1-4ca6-85c1-d2dce0baa608",
          "body": "{\n  \"name\": \"\",\n  \"resourceType\": \"\",\n  \"mergeStrategy\": \"\",\n  \"importId\": \"\",\n  \"importStatus\": \"\",\n  \"tags\": [\n    {\n      \"key\": \"\",\n      \"value\": \"\"\n    }\n  ],\n  \"createdDate\": \"{{faker 'date.recent' 365}}\"\n}",
          "latency": 0,
          "statusCode": 201,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ef1485dd-8d48-40df-97b0-668778550484",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ecb45caa-fbf6-4590-9f42-524acc685e2b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "6e5fc7d4-25d2-429e-a051-1c5c27d98cfc",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "7ff05115-52b5-4550-8748-b0b4d6b8269f",
      "documentation": "Removes tags from a bot, bot alias or bot channel.",
      "method": "delete",
      "endpoint": "tags/:resourceArn#tagKeys",
      "responses": [
        {
          "uuid": "42816db0-1325-4522-b0e9-a2053463015d",
          "body": "{}",
          "latency": 0,
          "statusCode": 204,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3b50e6ab-e922-4dbf-a641-1319404e823a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "925be7f0-e80e-4446-aa1a-0cdab17b6ac2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "324e47ee-21a0-48b0-928d-f0e3951a29d1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1f81e3bf-6945-49fe-b06e-55c87fa54485",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e4d3dda9-1b1e-463e-804a-7044f5836bd3",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    }
  ],
  "proxyMode": false,
  "proxyHost": "",
  "proxyRemovePrefix": false,
  "tlsOptions": {
    "enabled": false,
    "type": "CERT",
    "pfxPath": "",
    "certPath": "",
    "keyPath": "",
    "caPath": "",
    "passphrase": ""
  },
  "cors": true,
  "headers": [],
  "proxyReqHeaders": [
    {
      "key": "",
      "value": ""
    }
  ],
  "proxyResHeaders": [
    {
      "key": "",
      "value": ""
    }
  ]
}