{
  "uuid": "967f3a12-6b0b-4673-ae94-ad53eef05f39",
  "lastMigration": 19,
  "name": "Amazon Lex Model Building Service",
  "endpointPrefix": "",
  "latency": 0,
  "port": 3000,
  "hostname": "0.0.0.0",
  "routes": [
    {
      "uuid": "5029e049-c9c6-4023-a77e-7198875faded",
      "documentation": "<p>Creates a new version of the bot based on the <code>$LATEST</code> version. If the <code>$LATEST</code> version of this resource hasn't changed since you created the last version, Amazon Lex doesn't create a new version. It returns the last created version.</p> <note> <p>You can update only the <code>$LATEST</code> version of the bot. You can't update the numbered versions that you create with the <code>CreateBotVersion</code> operation.</p> </note> <p> When you create the first version of a bot, Amazon Lex sets the version to 1. Subsequent versions increment by 1. For more information, see <a>versioning-intro</a>. </p> <p> This operation requires permission for the <code>lex:CreateBotVersion</code> action. </p>",
      "method": "post",
      "endpoint": "bots/:name/versions",
      "responses": [
        {
          "uuid": "2d829c73-5fc6-4c3b-9b52-3a6cd91b832a",
          "body": "{\n  \"name\": \"\",\n  \"description\": \"\",\n  \"intents\": [\n    {\n      \"intentName\": \"\",\n      \"intentVersion\": \"\"\n    }\n  ],\n  \"clarificationPrompt\": {\n    \"messages\": [\n      {\n        \"contentType\": \"\",\n        \"content\": \"\",\n        \"groupNumber\": {{faker 'random.number'}}\n      }\n    ],\n    \"maxAttempts\": {{faker 'random.number'}},\n    \"responseCard\": \"\"\n  },\n  \"abortStatement\": {\n    \"messages\": [\n      {\n        \"contentType\": \"\",\n        \"content\": \"\",\n        \"groupNumber\": {{faker 'random.number'}}\n      }\n    ],\n    \"responseCard\": \"\"\n  },\n  \"status\": \"\",\n  \"failureReason\": \"\",\n  \"lastUpdatedDate\": \"{{faker 'date.recent' 365}}\",\n  \"createdDate\": \"{{faker 'date.recent' 365}}\",\n  \"idleSessionTTLInSeconds\": {{faker 'random.number'}},\n  \"voiceId\": \"\",\n  \"checksum\": \"\",\n  \"version\": \"\",\n  \"locale\": \"\",\n  \"childDirected\": {{faker 'random.boolean'}},\n  \"enableModelImprovements\": {{faker 'random.boolean'}},\n  \"detectSentiment\": {{faker 'random.boolean'}}\n}",
          "latency": 0,
          "statusCode": 201,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c81e98e3-9cc0-44fa-9012-87f3ec900fb0",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "42796f43-fc58-4cc8-ac88-1ca568d0b57f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a53ba70c-5038-4112-a90d-fd24ce80747a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "bae080ab-2577-4303-ac32-41e999e42c80",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "95494892-e790-495e-a68f-8f21c3b3f50d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c351d2b0-038e-4098-8d7a-93e401746f34",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "PreconditionFailedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "ef2d8c57-a87b-45b4-8842-3af9af229515",
      "documentation": "<p>Creates a new version of an intent based on the <code>$LATEST</code> version of the intent. If the <code>$LATEST</code> version of this intent hasn't changed since you last updated it, Amazon Lex doesn't create a new version. It returns the last version you created.</p> <note> <p>You can update only the <code>$LATEST</code> version of the intent. You can't update the numbered versions that you create with the <code>CreateIntentVersion</code> operation.</p> </note> <p> When you create a version of an intent, Amazon Lex sets the version to 1. Subsequent versions increment by 1. For more information, see <a>versioning-intro</a>. </p> <p>This operation requires permissions to perform the <code>lex:CreateIntentVersion</code> action. </p>",
      "method": "post",
      "endpoint": "intents/:name/versions",
      "responses": [
        {
          "uuid": "20a8c701-c304-4b81-bc97-2060a3941687",
          "body": "{\n  \"name\": \"\",\n  \"description\": \"\",\n  \"slots\": [\n    {\n      \"name\": \"\",\n      \"description\": \"\",\n      \"slotConstraint\": \"\",\n      \"slotType\": \"\",\n      \"slotTypeVersion\": \"\",\n      \"valueElicitationPrompt\": {\n        \"messages\": [\n          {\n            \"contentType\": \"\",\n            \"content\": \"\",\n            \"groupNumber\": {{faker 'random.number'}}\n          }\n        ],\n        \"maxAttempts\": {{faker 'random.number'}},\n        \"responseCard\": \"\"\n      },\n      \"priority\": {{faker 'random.number'}},\n      \"sampleUtterances\": [\n        \"\"\n      ],\n      \"responseCard\": \"\",\n      \"obfuscationSetting\": \"\",\n      \"defaultValueSpec\": {\n        \"defaultValueList\": [\n          {\n            \"defaultValue\": \"\"\n          }\n        ]\n      }\n    }\n  ],\n  \"sampleUtterances\": [\n    \"\"\n  ],\n  \"confirmationPrompt\": {\n    \"messages\": [\n      {\n        \"contentType\": \"\",\n        \"content\": \"\",\n        \"groupNumber\": {{faker 'random.number'}}\n      }\n    ],\n    \"maxAttempts\": {{faker 'random.number'}},\n    \"responseCard\": \"\"\n  },\n  \"rejectionStatement\": {\n    \"messages\": [\n      {\n        \"contentType\": \"\",\n        \"content\": \"\",\n        \"groupNumber\": {{faker 'random.number'}}\n      }\n    ],\n    \"responseCard\": \"\"\n  },\n  \"followUpPrompt\": {\n    \"prompt\": {\n      \"messages\": [\n        {\n          \"contentType\": \"\",\n          \"content\": \"\",\n          \"groupNumber\": {{faker 'random.number'}}\n        }\n      ],\n      \"maxAttempts\": {{faker 'random.number'}},\n      \"responseCard\": \"\"\n    },\n    \"rejectionStatement\": {\n      \"messages\": [\n        {\n          \"contentType\": \"\",\n          \"content\": \"\",\n          \"groupNumber\": {{faker 'random.number'}}\n        }\n      ],\n      \"responseCard\": \"\"\n    }\n  },\n  \"conclusionStatement\": {\n    \"messages\": [\n      {\n        \"contentType\": \"\",\n        \"content\": \"\",\n        \"groupNumber\": {{faker 'random.number'}}\n      }\n    ],\n    \"responseCard\": \"\"\n  },\n  \"dialogCodeHook\": {\n    \"uri\": \"\",\n    \"messageVersion\": \"\"\n  },\n  \"fulfillmentActivity\": {\n    \"type\": \"\",\n    \"codeHook\": {\n      \"uri\": \"\",\n      \"messageVersion\": \"\"\n    }\n  },\n  \"parentIntentSignature\": \"\",\n  \"lastUpdatedDate\": \"{{faker 'date.recent' 365}}\",\n  \"createdDate\": \"{{faker 'date.recent' 365}}\",\n  \"version\": \"\",\n  \"checksum\": \"\",\n  \"kendraConfiguration\": {\n    \"kendraIndex\": \"\",\n    \"queryFilterString\": \"\",\n    \"role\": \"\"\n  },\n  \"inputContexts\": [\n    {\n      \"name\": \"\"\n    }\n  ],\n  \"outputContexts\": [\n    {\n      \"name\": \"\",\n      \"timeToLiveInSeconds\": {{faker 'random.number'}},\n      \"turnsToLive\": {{faker 'random.number'}}\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 201,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9067c73b-b929-410f-89d3-9e9160896624",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "87f887f5-d712-461f-a589-ed4e5611d49d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "629a664f-d928-44e0-9b6a-cfee5dc6ea94",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a7190079-8742-42c5-a818-07a222b7645e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "37a74623-b7ae-4894-8f5c-ef932b8f7332",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "81520aa9-1cdd-430a-a241-6bb179a84aeb",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "PreconditionFailedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "4316dcc5-01e3-42c4-9e65-e47d948dc330",
      "documentation": "<p>Creates a new version of a slot type based on the <code>$LATEST</code> version of the specified slot type. If the <code>$LATEST</code> version of this resource has not changed since the last version that you created, Amazon Lex doesn't create a new version. It returns the last version that you created. </p> <note> <p>You can update only the <code>$LATEST</code> version of a slot type. You can't update the numbered versions that you create with the <code>CreateSlotTypeVersion</code> operation.</p> </note> <p>When you create a version of a slot type, Amazon Lex sets the version to 1. Subsequent versions increment by 1. For more information, see <a>versioning-intro</a>. </p> <p>This operation requires permissions for the <code>lex:CreateSlotTypeVersion</code> action.</p>",
      "method": "post",
      "endpoint": "slottypes/:name/versions",
      "responses": [
        {
          "uuid": "eb9f4fd4-0639-49f9-b824-d8d0c8002c8a",
          "body": "{\n  \"name\": \"\",\n  \"description\": \"\",\n  \"enumerationValues\": [\n    {\n      \"value\": \"\",\n      \"synonyms\": [\n        \"\"\n      ]\n    }\n  ],\n  \"lastUpdatedDate\": \"{{faker 'date.recent' 365}}\",\n  \"createdDate\": \"{{faker 'date.recent' 365}}\",\n  \"version\": \"\",\n  \"checksum\": \"\",\n  \"valueSelectionStrategy\": \"\",\n  \"parentSlotTypeSignature\": \"\",\n  \"slotTypeConfigurations\": [\n    {\n      \"regexConfiguration\": {\n        \"pattern\": \"\"\n      }\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 201,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "da75df6e-94c5-45f3-a1d3-b958c8aaa5df",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b452effb-11e8-478d-827d-e8c1130b8208",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d633c878-49c6-45f9-8706-4e8369db2bf5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9da856ad-b48d-4917-be13-9d8db2976f58",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e078a99c-e92b-4507-96e6-d1425b329397",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "87b5e264-cde1-4106-b4a0-e7e213cd31de",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "PreconditionFailedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "5df6ab93-9181-4a5e-9a9b-4be44c6818b1",
      "documentation": "<p>Deletes all versions of the bot, including the <code>$LATEST</code> version. To delete a specific version of the bot, use the <a>DeleteBotVersion</a> operation. The <code>DeleteBot</code> operation doesn't immediately remove the bot schema. Instead, it is marked for deletion and removed later.</p> <p>Amazon Lex stores utterances indefinitely for improving the ability of your bot to respond to user inputs. These utterances are not removed when the bot is deleted. To remove the utterances, use the <a>DeleteUtterances</a> operation.</p> <p>If a bot has an alias, you can't delete it. Instead, the <code>DeleteBot</code> operation returns a <code>ResourceInUseException</code> exception that includes a reference to the alias that refers to the bot. To remove the reference to the bot, delete the alias. If you get the same exception again, delete the referring alias until the <code>DeleteBot</code> operation is successful.</p> <p>This operation requires permissions for the <code>lex:DeleteBot</code> action.</p>",
      "method": "delete",
      "endpoint": "bots/:name",
      "responses": [
        {
          "uuid": "3003cade-b667-4497-ad7e-311259314f0e",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "365a53d6-a952-45c3-b4ef-6af60fae6b11",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "323b8386-bc9e-40e0-9456-c37ec641a30d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ca4cecdd-e319-4823-b747-88169a479618",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "973c66c5-1d81-4a37-8a85-32cfab3a95ab",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f40d985b-db99-4e81-8cbe-7532cf47bf32",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "517fe926-8dcf-4f66-8499-0f6e079ccaa5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "ResourceInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "ff23321e-0f2e-4b7f-8c7c-ae1e91e75796",
      "documentation": "<p>Deletes an alias for the specified bot. </p> <p>You can't delete an alias that is used in the association between a bot and a messaging channel. If an alias is used in a channel association, the <code>DeleteBot</code> operation returns a <code>ResourceInUseException</code> exception that includes a reference to the channel association that refers to the bot. You can remove the reference to the alias by deleting the channel association. If you get the same exception again, delete the referring association until the <code>DeleteBotAlias</code> operation is successful.</p>",
      "method": "delete",
      "endpoint": "bots/:botName/aliases/:name",
      "responses": [
        {
          "uuid": "c6b8636f-2825-46a4-96ae-49b7bef7cab9",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "fed542cb-d7e3-4a65-b14f-061cece35e24",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2b695156-720c-4a83-b0d8-067504b3e844",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f6b43b6f-c2bb-4d6c-beb8-7e682a057556",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "16ce08e5-e516-4110-8db6-b5957a6570cf",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "bae92d68-77da-4d85-ad82-649e7d1c6f38",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "58683bc5-04a1-4748-bb12-5d72689723d4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "ResourceInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "8c27afac-27e5-4509-a544-18cbed334ccd",
      "documentation": "<p>Returns information about an Amazon Lex bot alias. For more information about aliases, see <a>versioning-aliases</a>.</p> <p>This operation requires permissions for the <code>lex:GetBotAlias</code> action.</p>",
      "method": "get",
      "endpoint": "bots/:botName/aliases/:name",
      "responses": [
        {
          "uuid": "ac7a20f5-917a-482b-8a41-75a1ee835a3d",
          "body": "{\n  \"name\": \"\",\n  \"description\": \"\",\n  \"botVersion\": \"\",\n  \"botName\": \"\",\n  \"lastUpdatedDate\": \"{{faker 'date.recent' 365}}\",\n  \"createdDate\": \"{{faker 'date.recent' 365}}\",\n  \"checksum\": \"\",\n  \"conversationLogs\": {\n    \"logSettings\": [\n      {\n        \"logType\": \"\",\n        \"destination\": \"\",\n        \"kmsKeyArn\": \"\",\n        \"resourceArn\": \"\",\n        \"resourcePrefix\": \"\"\n      }\n    ],\n    \"iamRoleArn\": \"\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0eec9a1d-a660-4965-bf16-a36f4f39e54d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2450618b-0183-49eb-83e7-ddda8e0be812",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5e876c8f-4117-4e18-ba21-429d1a5f6e81",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "bacaeeb7-10a5-4240-b9bc-91fbe873fd65",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "5d8157d7-0ca5-46dc-990c-09fc0625f6ac",
      "documentation": "<p>Creates an alias for the specified version of the bot or replaces an alias for the specified bot. To change the version of the bot that the alias points to, replace the alias. For more information about aliases, see <a>versioning-aliases</a>.</p> <p>This operation requires permissions for the <code>lex:PutBotAlias</code> action. </p>",
      "method": "put",
      "endpoint": "bots/:botName/aliases/:name",
      "responses": [
        {
          "uuid": "39138903-65dd-4175-beb9-b70c2dd96806",
          "body": "{\n  \"name\": \"\",\n  \"description\": \"\",\n  \"botVersion\": \"\",\n  \"botName\": \"\",\n  \"lastUpdatedDate\": \"{{faker 'date.recent' 365}}\",\n  \"createdDate\": \"{{faker 'date.recent' 365}}\",\n  \"checksum\": \"\",\n  \"conversationLogs\": {\n    \"logSettings\": [\n      {\n        \"logType\": \"\",\n        \"destination\": \"\",\n        \"kmsKeyArn\": \"\",\n        \"resourceArn\": \"\",\n        \"resourcePrefix\": \"\"\n      }\n    ],\n    \"iamRoleArn\": \"\"\n  },\n  \"tags\": [\n    {\n      \"key\": \"\",\n      \"value\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "06d2ee81-8486-4cab-84d2-86c474740034",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3001e704-7445-403e-85ab-1900d7377a27",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e6998de7-4e61-435b-8d4c-b8f9e2da1d40",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "74282938-6b97-426c-86fb-2f1ba9157eb1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d273645f-b7f3-48a7-9c4c-f35dfbffc339",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "PreconditionFailedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "46dfd473-ee79-44f7-b1e5-74b9faa5caa0",
      "documentation": "<p>Deletes the association between an Amazon Lex bot and a messaging platform.</p> <p>This operation requires permission for the <code>lex:DeleteBotChannelAssociation</code> action.</p>",
      "method": "delete",
      "endpoint": "bots/:botName/aliases/:aliasName/channels/:name",
      "responses": [
        {
          "uuid": "51d8a493-504f-48b3-b120-5d78bedd38d4",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "41b5be75-0afb-4796-b63e-6b488d1e53fa",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "347b5e8a-23e9-48a4-a855-4b2b26ce807c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d4f0fbfa-510a-4fba-b8ab-327bbfa5277e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2013be38-0793-42eb-8a4d-6e517027883e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1a4b0ee3-6578-44ce-b81c-6543e34c0894",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "9a1a90c1-fb09-4e60-b8b0-181847f2cc86",
      "documentation": "<p>Returns information about the association between an Amazon Lex bot and a messaging platform.</p> <p>This operation requires permissions for the <code>lex:GetBotChannelAssociation</code> action.</p>",
      "method": "get",
      "endpoint": "bots/:botName/aliases/:aliasName/channels/:name",
      "responses": [
        {
          "uuid": "12eb1637-4489-40ed-8cec-b95faa1e46a7",
          "body": "{\n  \"name\": \"\",\n  \"description\": \"\",\n  \"botAlias\": \"\",\n  \"botName\": \"\",\n  \"createdDate\": \"{{faker 'date.recent' 365}}\",\n  \"type\": \"\",\n  \"botConfiguration\": {},\n  \"status\": \"\",\n  \"failureReason\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f8ff65cb-af3b-4393-bd8f-c1c7eaf12117",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e7775186-f90f-4bf3-b8ce-70a5b5eff3f9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "418c85f8-e38c-4468-a2b3-d429d5da13ed",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "393c3e65-7716-4156-91aa-846e5b8f5e4b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "e5efa88c-8b91-4ffc-b0ba-446f6bc6e545",
      "documentation": "<p>Deletes a specific version of a bot. To delete all versions of a bot, use the <a>DeleteBot</a> operation. </p> <p>This operation requires permissions for the <code>lex:DeleteBotVersion</code> action.</p>",
      "method": "delete",
      "endpoint": "bots/:name/versions/:version",
      "responses": [
        {
          "uuid": "73ee6b95-eb18-4053-934e-2835da933e4e",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c3636527-87da-4c30-aed4-46e8c01ce903",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9c678bb5-8d72-4cab-bbe1-37b9f46160d4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7dddc871-2301-4581-9aee-540497883fca",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2aaa026a-087b-44fe-9fe5-cd070c8cb579",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "4b07ba86-56a3-40ff-a9d4-235c0bc832f5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "576d1df0-e8a0-4d66-9d0d-448e17f16298",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "ResourceInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "3a904025-2c8a-440f-ad67-2c789c5c38ec",
      "documentation": "<p>Deletes all versions of the intent, including the <code>$LATEST</code> version. To delete a specific version of the intent, use the <a>DeleteIntentVersion</a> operation.</p> <p> You can delete a version of an intent only if it is not referenced. To delete an intent that is referred to in one or more bots (see <a>how-it-works</a>), you must remove those references first. </p> <note> <p> If you get the <code>ResourceInUseException</code> exception, it provides an example reference that shows where the intent is referenced. To remove the reference to the intent, either update the bot or delete it. If you get the same exception when you attempt to delete the intent again, repeat until the intent has no references and the call to <code>DeleteIntent</code> is successful. </p> </note> <p> This operation requires permission for the <code>lex:DeleteIntent</code> action. </p>",
      "method": "delete",
      "endpoint": "intents/:name",
      "responses": [
        {
          "uuid": "d1be60ff-2514-4794-a4a0-7fc772aceae0",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "86326783-f239-4536-8418-db029a260563",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b4ddc897-1f85-4b4b-a85f-601123fe6fb7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0fcf647a-a0c8-4119-8300-9177c2fc963a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b15a8345-288e-4ab5-9b86-f582d9237188",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "93d2900f-7c66-4201-b3eb-459300031db4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "145a9c82-193e-4fe3-ab0c-0984c1690ac4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "ResourceInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "a433c537-ee39-475e-9d46-055343560dd7",
      "documentation": "<p>Deletes a specific version of an intent. To delete all versions of a intent, use the <a>DeleteIntent</a> operation. </p> <p>This operation requires permissions for the <code>lex:DeleteIntentVersion</code> action.</p>",
      "method": "delete",
      "endpoint": "intents/:name/versions/:version",
      "responses": [
        {
          "uuid": "c253c51d-409e-40a5-9799-d6dcbe429872",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b0aa02a1-ca2b-499e-bd15-5ff6cca4e1a1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1d8696de-3906-4362-9088-ce983962cc78",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c1cf48c3-8250-4c88-958d-e608f3c9034f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "15c6d752-746b-4242-a506-b1bf6ab328db",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "476b857a-5368-4a5f-b9f9-675294c6a1fe",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "8543ae78-0b16-45e9-b064-6e910d97f316",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "ResourceInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "6bde32eb-92bd-43d8-8445-a3ba673fd032",
      "documentation": "<p> Returns information about an intent. In addition to the intent name, you must specify the intent version. </p> <p> This operation requires permissions to perform the <code>lex:GetIntent</code> action. </p>",
      "method": "get",
      "endpoint": "intents/:name/versions/:version",
      "responses": [
        {
          "uuid": "cfb2cf10-ad17-4eda-9bcc-d12c9d7b41b4",
          "body": "{\n  \"version\": \"$LATEST\",\n  \"name\": \"DocOrderPizza\",\n  \"checksum\": \"ca9bc13d-afc8-4706-bbaf-091f7a5935d6\",\n  \"conclusionStatement\": {\n    \"messages\": [\n      {\n        \"content\": \"All right, I ordered  you a {Crust} crust {Type} pizza with {Sauce} sauce.\",\n        \"contentType\": \"PlainText\"\n      },\n      {\n        \"content\": \"OK, your {Crust} crust {Type} pizza with {Sauce} sauce is on the way.\",\n        \"contentType\": \"PlainText\"\n      }\n    ],\n    \"responseCard\": \"foo\"\n  },\n  \"confirmationPrompt\": {\n    \"maxAttempts\": 1,\n    \"messages\": [\n      {\n        \"content\": \"Should I order  your {Crust} crust {Type} pizza with {Sauce} sauce?\",\n        \"contentType\": \"PlainText\"\n      }\n    ]\n  },\n  \"createdDate\": 1494359783.453,\n  \"description\": \"Order a pizza from a local pizzeria.\",\n  \"fulfillmentActivity\": {\n    \"type\": \"ReturnIntent\"\n  },\n  \"lastUpdatedDate\": 1494359783.453,\n  \"rejectionStatement\": {\n    \"messages\": [\n      {\n        \"content\": \"Ok, I'll cancel your order.\",\n        \"contentType\": \"PlainText\"\n      },\n      {\n        \"content\": \"I cancelled your order.\",\n        \"contentType\": \"PlainText\"\n      }\n    ]\n  },\n  \"sampleUtterances\": [\n    \"Order me a pizza.\",\n    \"Order me a {Type} pizza.\",\n    \"I want a {Crust} crust {Type} pizza\",\n    \"I want a {Crust} crust {Type} pizza with {Sauce} sauce.\"\n  ],\n  \"slots\": [\n    {\n      \"name\": \"Type\",\n      \"description\": \"The type of pizza to order.\",\n      \"priority\": 1,\n      \"sampleUtterances\": [\n        \"Get me a {Type} pizza.\",\n        \"A {Type} pizza please.\",\n        \"I'd like a {Type} pizza.\"\n      ],\n      \"slotConstraint\": \"Required\",\n      \"slotType\": \"DocPizzaType\",\n      \"slotTypeVersion\": \"$LATEST\",\n      \"valueElicitationPrompt\": {\n        \"maxAttempts\": 1,\n        \"messages\": [\n          {\n            \"content\": \"What type of pizza would you like?\",\n            \"contentType\": \"PlainText\"\n          },\n          {\n            \"content\": \"Vegie or cheese pizza?\",\n            \"contentType\": \"PlainText\"\n          },\n          {\n            \"content\": \"I can get you a vegie or a cheese pizza.\",\n            \"contentType\": \"PlainText\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"Crust\",\n      \"description\": \"The type of pizza crust to order.\",\n      \"priority\": 2,\n      \"sampleUtterances\": [\n        \"Make it a {Crust} crust.\",\n        \"I'd like a {Crust} crust.\"\n      ],\n      \"slotConstraint\": \"Required\",\n      \"slotType\": \"DocPizzaCrustType\",\n      \"slotTypeVersion\": \"$LATEST\",\n      \"valueElicitationPrompt\": {\n        \"maxAttempts\": 1,\n        \"messages\": [\n          {\n            \"content\": \"What type of crust would you like?\",\n            \"contentType\": \"PlainText\"\n          },\n          {\n            \"content\": \"Thick or thin crust?\",\n            \"contentType\": \"PlainText\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"Sauce\",\n      \"description\": \"The type of sauce to use on the pizza.\",\n      \"priority\": 3,\n      \"sampleUtterances\": [\n        \"Make it {Sauce} sauce.\",\n        \"I'd like {Sauce} sauce.\"\n      ],\n      \"slotConstraint\": \"Required\",\n      \"slotType\": \"DocPizzaSauceType\",\n      \"slotTypeVersion\": \"$LATEST\",\n      \"valueElicitationPrompt\": {\n        \"maxAttempts\": 1,\n        \"messages\": [\n          {\n            \"content\": \"White or red sauce?\",\n            \"contentType\": \"PlainText\"\n          },\n          {\n            \"content\": \"Garlic or tomato sauce?\",\n            \"contentType\": \"PlainText\"\n          }\n        ]\n      }\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ac71efd2-8ded-44b6-a87b-4bc40e311d05",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e6138693-d7e4-4510-b407-1b1913d86780",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f96c0679-9b89-4336-8dfd-ccc32ebade6b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f2231956-ca81-446c-a649-853a08ef71f9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "9271613e-044f-4031-ae9d-9e664a62a1e2",
      "documentation": "<p>Deletes all versions of the slot type, including the <code>$LATEST</code> version. To delete a specific version of the slot type, use the <a>DeleteSlotTypeVersion</a> operation.</p> <p> You can delete a version of a slot type only if it is not referenced. To delete a slot type that is referred to in one or more intents, you must remove those references first. </p> <note> <p> If you get the <code>ResourceInUseException</code> exception, the exception provides an example reference that shows the intent where the slot type is referenced. To remove the reference to the slot type, either update the intent or delete it. If you get the same exception when you attempt to delete the slot type again, repeat until the slot type has no references and the <code>DeleteSlotType</code> call is successful. </p> </note> <p>This operation requires permission for the <code>lex:DeleteSlotType</code> action.</p>",
      "method": "delete",
      "endpoint": "slottypes/:name",
      "responses": [
        {
          "uuid": "646c0e13-8a3e-4221-ac5a-3677f612cecf",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "63985679-28e7-4cfe-9330-88ebd760d7da",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1855cc38-eabd-4291-8cb2-6fc32e2018e0",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c3096d70-248e-4b38-9a89-fca46f90161f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "283a7cff-f4dc-4fc2-8595-38b5dbcd359f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c9903776-4840-482c-b168-b295c2ef8f7e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "8165df50-bf41-4568-84a3-2f6318b4f326",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "ResourceInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "090f60c4-c860-4837-bade-12c3f69634bf",
      "documentation": "<p>Deletes a specific version of a slot type. To delete all versions of a slot type, use the <a>DeleteSlotType</a> operation. </p> <p>This operation requires permissions for the <code>lex:DeleteSlotTypeVersion</code> action.</p>",
      "method": "delete",
      "endpoint": "slottypes/:name/version/:version",
      "responses": [
        {
          "uuid": "fb9c7d28-8e69-4780-acb4-955e204ea0c0",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "78122df2-b5d4-4df0-abdd-224d25c9d7b2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b54385a1-ab94-4b13-bcb3-81c35fb99162",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e4933250-7345-4dfa-b79c-c641d15d52c7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "99882e02-d104-4bc6-8c88-53c863381e72",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "451cfca1-5251-4180-bdab-1c9e06e26996",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "671caf6a-fe17-45a3-865b-435b533de8d1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "ResourceInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "16aa55b7-f123-4322-87ae-fb748ddafc92",
      "documentation": "<p>Deletes stored utterances.</p> <p>Amazon Lex stores the utterances that users send to your bot. Utterances are stored for 15 days for use with the <a>GetUtterancesView</a> operation, and then stored indefinitely for use in improving the ability of your bot to respond to user input.</p> <p>Use the <code>DeleteUtterances</code> operation to manually delete stored utterances for a specific user. When you use the <code>DeleteUtterances</code> operation, utterances stored for improving your bot's ability to respond to user input are deleted immediately. Utterances stored for use with the <code>GetUtterancesView</code> operation are deleted after 15 days.</p> <p>This operation requires permissions for the <code>lex:DeleteUtterances</code> action.</p>",
      "method": "delete",
      "endpoint": "bots/:botName/utterances/:userId",
      "responses": [
        {
          "uuid": "06a7c1be-7c0a-4628-91a8-25f7605b3871",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "939e416e-c724-471d-8bf1-76e262d15181",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c3e386c2-74b2-40a4-b07c-3e3a02e5557e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "703f196e-bcd4-4f55-9117-034e7e3e8d7a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "17410bf3-7da3-436c-9575-c5df8bd14a1f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "52a0af6f-d23a-450f-91dd-060e38a88b3b",
      "documentation": "<p>Returns metadata information for a specific bot. You must provide the bot name and the bot version or alias. </p> <p> This operation requires permissions for the <code>lex:GetBot</code> action. </p>",
      "method": "get",
      "endpoint": "bots/:name/versions/:versionoralias",
      "responses": [
        {
          "uuid": "d58fc233-98da-402f-81b2-abda59dc5354",
          "body": "{\n  \"version\": \"$LATEST\",\n  \"name\": \"DocOrderPizzaBot\",\n  \"abortStatement\": {\n    \"messages\": [\n      {\n        \"content\": \"I don't understand. Can you try again?\",\n        \"contentType\": \"PlainText\"\n      },\n      {\n        \"content\": \"I'm sorry, I don't understand.\",\n        \"contentType\": \"PlainText\"\n      }\n    ]\n  },\n  \"checksum\": \"20172ee3-fa06-49b2-bbc5-667c090303e9\",\n  \"childDirected\": true,\n  \"clarificationPrompt\": {\n    \"maxAttempts\": 1,\n    \"messages\": [\n      {\n        \"content\": \"I'm sorry, I didn't hear that. Can you repeate what you just said?\",\n        \"contentType\": \"PlainText\"\n      },\n      {\n        \"content\": \"Can you say that again?\",\n        \"contentType\": \"PlainText\"\n      }\n    ]\n  },\n  \"createdDate\": 1494360160.133,\n  \"description\": \"Orders a pizza from a local pizzeria.\",\n  \"idleSessionTTLInSeconds\": 300,\n  \"intents\": [\n    {\n      \"intentName\": \"DocOrderPizza\",\n      \"intentVersion\": \"$LATEST\"\n    }\n  ],\n  \"lastUpdatedDate\": 1494360160.133,\n  \"locale\": \"en-US\",\n  \"status\": \"NOT_BUILT\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "471f8c89-6cea-4c2e-847b-10ecb24195d1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f320511c-f99f-4d34-bbf4-75dfe5b12ca0",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d8407b78-bc77-4f67-9522-0880423be37e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "4fd1a02f-4e0b-42d3-8110-7c9ae1709574",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "8ac3cf7f-cc8f-4e57-8125-5c0fcae99fb2",
      "documentation": "<p>Returns a list of aliases for a specified Amazon Lex bot.</p> <p>This operation requires permissions for the <code>lex:GetBotAliases</code> action.</p>",
      "method": "get",
      "endpoint": "bots/:botName/aliases/",
      "responses": [
        {
          "uuid": "e01d9bf8-d25b-4edb-a357-2eadd19096ce",
          "body": "{\n  \"BotAliases\": [\n    {\n      \"name\": \"\",\n      \"description\": \"\",\n      \"botVersion\": \"\",\n      \"botName\": \"\",\n      \"lastUpdatedDate\": \"{{faker 'date.recent' 365}}\",\n      \"createdDate\": \"{{faker 'date.recent' 365}}\",\n      \"checksum\": \"\",\n      \"conversationLogs\": {\n        \"logSettings\": [\n          {\n            \"logType\": \"\",\n            \"destination\": \"\",\n            \"kmsKeyArn\": \"\",\n            \"resourceArn\": \"\",\n            \"resourcePrefix\": \"\"\n          }\n        ],\n        \"iamRoleArn\": \"\"\n      }\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "179e6f0b-f336-4d18-a947-91f97f51e23e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a45e9b9b-07f6-4bfc-9639-75e49c0d4727",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "990a3b4d-bcb9-415a-9665-5f63d5ca4970",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "452884ba-25f4-4e97-b6d2-189298cd45ae",
      "documentation": "<p> Returns a list of all of the channels associated with the specified bot. </p> <p>The <code>GetBotChannelAssociations</code> operation requires permissions for the <code>lex:GetBotChannelAssociations</code> action.</p>",
      "method": "get",
      "endpoint": "bots/:botName/aliases/:aliasName/channels/",
      "responses": [
        {
          "uuid": "82ff497d-c492-4903-87c4-65374d084b7b",
          "body": "{\n  \"botChannelAssociations\": [\n    {\n      \"name\": \"\",\n      \"description\": \"\",\n      \"botAlias\": \"\",\n      \"botName\": \"\",\n      \"createdDate\": \"{{faker 'date.recent' 365}}\",\n      \"type\": \"\",\n      \"botConfiguration\": {},\n      \"status\": \"\",\n      \"failureReason\": \"\"\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2f9ea98d-6b5c-49e2-af18-1625e803e1eb",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "776c1c3d-56fa-4ecd-b8f5-57ef4b4eade2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2c01e43d-0e21-46d3-9e25-5b4bc9eaaf1a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "0a46ce8f-a62e-41f3-8c50-c6dfb4ea420d",
      "documentation": "<p>Gets information about all of the versions of a bot.</p> <p>The <code>GetBotVersions</code> operation returns a <code>BotMetadata</code> object for each version of a bot. For example, if a bot has three numbered versions, the <code>GetBotVersions</code> operation returns four <code>BotMetadata</code> objects in the response, one for each numbered version and one for the <code>$LATEST</code> version. </p> <p>The <code>GetBotVersions</code> operation always returns at least one version, the <code>$LATEST</code> version.</p> <p>This operation requires permissions for the <code>lex:GetBotVersions</code> action.</p>",
      "method": "get",
      "endpoint": "bots/:name/versions/",
      "responses": [
        {
          "uuid": "d8b58d93-f75a-49a8-b6c8-e5e8132c1023",
          "body": "{\n  \"bots\": [\n    {\n      \"name\": \"\",\n      \"description\": \"\",\n      \"status\": \"\",\n      \"lastUpdatedDate\": \"{{faker 'date.recent' 365}}\",\n      \"createdDate\": \"{{faker 'date.recent' 365}}\",\n      \"version\": \"\"\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9f73e412-5ca9-4421-b329-2ff903cceacd",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9ae877b0-49c3-4185-88a6-0a7af4129da8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "caec34dc-5108-4f17-939b-800d0e3c1b89",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "544f7a2e-2b1d-4180-a3c5-fdcf028405d6",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "751f64f9-1d34-4c3a-99e9-c3b711d294cf",
      "documentation": "<p>Returns bot information as follows: </p> <ul> <li> <p>If you provide the <code>nameContains</code> field, the response includes information for the <code>$LATEST</code> version of all bots whose name contains the specified string.</p> </li> <li> <p>If you don't specify the <code>nameContains</code> field, the operation returns information about the <code>$LATEST</code> version of all of your bots.</p> </li> </ul> <p>This operation requires permission for the <code>lex:GetBots</code> action.</p>",
      "method": "get",
      "endpoint": "bots/",
      "responses": [
        {
          "uuid": "9fa97aca-8db5-45db-b6b4-74538cf596b1",
          "body": "{\n  \"bots\": [\n    {\n      \"version\": \"$LATEST\",\n      \"name\": \"DocOrderPizzaBot\",\n      \"createdDate\": 1494360160.133,\n      \"description\": \"Orders a pizza from a local pizzeria.\",\n      \"lastUpdatedDate\": 1494360160.133,\n      \"status\": \"NOT_BUILT\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5baf0a85-8f84-4eaa-96fe-28a75635e8b6",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "837565eb-2d2d-4fab-a84a-8d0c03ac0723",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a9b38e56-56aa-45d7-9436-79f4a37e0413",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "aa90e64b-2d7d-4808-888e-7aa064119ddf",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "29653887-a15a-4d19-a5b5-172324fbd263",
      "documentation": "<p>Returns information about a built-in intent.</p> <p>This operation requires permission for the <code>lex:GetBuiltinIntent</code> action.</p>",
      "method": "get",
      "endpoint": "builtins/intents/:signature",
      "responses": [
        {
          "uuid": "de5dd7cf-1252-4ed9-89d8-f4670a0d74c9",
          "body": "{\n  \"signature\": \"\",\n  \"supportedLocales\": [\n    \"{{oneOf (array 'de-DE' 'en-AU' 'en-GB' 'en-IN' 'en-US' 'es-419' 'es-ES' 'es-US' 'fr-FR' 'fr-CA' 'it-IT' 'ja-JP' 'ko-KR')}}\"\n  ],\n  \"slots\": [\n    {\n      \"name\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "44a8c3f2-c7c7-48ce-91b4-e2acf89e9251",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0989ea34-8c2c-4608-b8f6-fe0def25dfdd",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ad8874d7-2a9b-4a4a-a65f-44f98b697e26",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b4404aaa-2ec9-49ba-8fc3-ad80b809a6e8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "e581cd1e-175e-4703-9e0c-ec87061847d0",
      "documentation": "<p>Gets a list of built-in intents that meet the specified criteria.</p> <p>This operation requires permission for the <code>lex:GetBuiltinIntents</code> action.</p>",
      "method": "get",
      "endpoint": "builtins/intents/",
      "responses": [
        {
          "uuid": "8d546240-fbd1-4119-abca-4a3b8b31e881",
          "body": "{\n  \"intents\": [\n    {\n      \"signature\": \"\",\n      \"supportedLocales\": [\n        \"{{oneOf (array 'de-DE' 'en-AU' 'en-GB' 'en-IN' 'en-US' 'es-419' 'es-ES' 'es-US' 'fr-FR' 'fr-CA' 'it-IT' 'ja-JP' 'ko-KR')}}\"\n      ]\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "478519d6-4bcc-46ce-a78f-409bb8f9b785",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "cc484b43-92f2-455b-a0dd-269fb9dbaf3d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d47a23c9-1000-4cb5-b7dc-c943b6ddcd9b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "c4a591db-d13c-4f14-9350-20ca3067e9c4",
      "documentation": "<p>Gets a list of built-in slot types that meet the specified criteria.</p> <p>For a list of built-in slot types, see <a href=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference\">Slot Type Reference</a> in the <i>Alexa Skills Kit</i>.</p> <p>This operation requires permission for the <code>lex:GetBuiltInSlotTypes</code> action.</p>",
      "method": "get",
      "endpoint": "builtins/slottypes/",
      "responses": [
        {
          "uuid": "6db20e7e-ab3f-4bd0-ad3a-3e7fc6e06385",
          "body": "{\n  \"slotTypes\": [\n    {\n      \"signature\": \"\",\n      \"supportedLocales\": [\n        \"{{oneOf (array 'de-DE' 'en-AU' 'en-GB' 'en-IN' 'en-US' 'es-419' 'es-ES' 'es-US' 'fr-FR' 'fr-CA' 'it-IT' 'ja-JP' 'ko-KR')}}\"\n      ]\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "76b62e64-ee47-4f13-9619-0711f04a0e64",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "81545667-df4b-4d46-9d61-274e07d4f21f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f67642e3-d859-4ffe-bcd1-bd79eb9da73d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "5e81dff8-05d9-4ca6-8f66-12ec610e42f9",
      "documentation": "Exports the contents of a Amazon Lex resource in a specified format. ",
      "method": "get",
      "endpoint": "exports/#name&version&resourceType&exportType",
      "responses": [
        {
          "uuid": "41d0a845-f4c4-4edb-b0b9-00e824118ceb",
          "body": "{\n  \"name\": \"\",\n  \"version\": \"\",\n  \"resourceType\": \"\",\n  \"exportType\": \"\",\n  \"exportStatus\": \"\",\n  \"failureReason\": \"\",\n  \"url\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "081037fc-069b-45ca-8495-26021d7c4114",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ee63b102-dd5d-4c67-99b4-1cbdbc4119a4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a5b3c4dc-fdda-40f7-93c4-3c22793d1ea2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d6f1f5d2-9609-4c34-bd7e-1ca6ed3e2540",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "ba3a2cbc-3dca-4b07-baa0-fd4739a4a22a",
      "documentation": "Gets information about an import job started with the <code>StartImport</code> operation.",
      "method": "get",
      "endpoint": "imports/:importId",
      "responses": [
        {
          "uuid": "d47e7f83-3fe8-443c-877d-8fafdee299dd",
          "body": "{\n  \"name\": \"\",\n  \"resourceType\": \"\",\n  \"mergeStrategy\": \"\",\n  \"importId\": \"\",\n  \"importStatus\": \"\",\n  \"failureReason\": [\n    \"\"\n  ],\n  \"createdDate\": \"{{faker 'date.recent' 365}}\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0c53c9a4-510b-47ed-897c-ae8343d6bda4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "28bcf455-c988-45cf-90f8-5bd13b04be31",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "beefe91f-6c8b-427d-9fa9-972e68cd2ceb",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "17b68a7c-0915-4a97-84f8-56c44725524b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "40763442-3c50-4186-9a3d-249893288052",
      "documentation": "<p>Gets information about all of the versions of an intent.</p> <p>The <code>GetIntentVersions</code> operation returns an <code>IntentMetadata</code> object for each version of an intent. For example, if an intent has three numbered versions, the <code>GetIntentVersions</code> operation returns four <code>IntentMetadata</code> objects in the response, one for each numbered version and one for the <code>$LATEST</code> version. </p> <p>The <code>GetIntentVersions</code> operation always returns at least one version, the <code>$LATEST</code> version.</p> <p>This operation requires permissions for the <code>lex:GetIntentVersions</code> action.</p>",
      "method": "get",
      "endpoint": "intents/:name/versions/",
      "responses": [
        {
          "uuid": "d136e1b2-3425-4a15-accb-27a41278c113",
          "body": "{\n  \"intents\": [\n    {\n      \"name\": \"\",\n      \"description\": \"\",\n      \"lastUpdatedDate\": \"{{faker 'date.recent' 365}}\",\n      \"createdDate\": \"{{faker 'date.recent' 365}}\",\n      \"version\": \"\"\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "68cd0cc3-294b-453d-9761-497c5c0d44d2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a5ef578e-fd2b-49ed-b39b-2deda9749ef5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "93cf6b74-e2e7-4522-bf56-bf6053368cfa",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "55d6182d-90d7-41be-a5ba-6f1bdee0aeeb",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "e967133f-8f8a-42e8-863c-b8cca2ec29eb",
      "documentation": "<p>Returns intent information as follows: </p> <ul> <li> <p>If you specify the <code>nameContains</code> field, returns the <code>$LATEST</code> version of all intents that contain the specified string.</p> </li> <li> <p> If you don't specify the <code>nameContains</code> field, returns information about the <code>$LATEST</code> version of all intents. </p> </li> </ul> <p> The operation requires permission for the <code>lex:GetIntents</code> action. </p>",
      "method": "get",
      "endpoint": "intents/",
      "responses": [
        {
          "uuid": "b31545f2-0a6d-4ea9-8d1e-f04de571e81d",
          "body": "{\n  \"intents\": [\n    {\n      \"version\": \"$LATEST\",\n      \"name\": \"DocOrderPizza\",\n      \"createdDate\": 1494359783.453,\n      \"description\": \"Order a pizza from a local pizzeria.\",\n      \"lastUpdatedDate\": 1494359783.453\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7a2ed15f-3cc5-4bbe-a7e5-e1eba420e00f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b4f67510-1bbd-4275-a98a-2d8b06aa0e63",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "081fa65a-91bb-43dd-8d5c-3faeb1f377a2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "67e44625-62dc-4567-903d-bbf22329013a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "e9f6829d-703d-4878-bdc7-9f4b20003969",
      "documentation": "Provides details about an ongoing or complete migration from an Amazon Lex V1 bot to an Amazon Lex V2 bot. Use this operation to view the migration alerts and warnings related to the migration.",
      "method": "get",
      "endpoint": "migrations/:migrationId",
      "responses": [
        {
          "uuid": "372fcf50-c4a0-42e4-a1ef-57f3d3385145",
          "body": "{\n  \"migrationId\": \"\",\n  \"v1BotName\": \"\",\n  \"v1BotVersion\": \"\",\n  \"v1BotLocale\": \"\",\n  \"v2BotId\": \"\",\n  \"v2BotRole\": \"\",\n  \"migrationStatus\": \"\",\n  \"migrationStrategy\": \"\",\n  \"migrationTimestamp\": \"{{faker 'date.recent' 365}}\",\n  \"alerts\": [\n    {\n      \"type\": \"\",\n      \"message\": \"\",\n      \"details\": [\n        \"\"\n      ],\n      \"referenceURLs\": [\n        \"\"\n      ]\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "829113e8-243c-48bc-b7e7-bad5fe4c07c7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "532be6f2-ff88-4c2a-a06b-204d7f59cf26",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "aba27d11-8f72-45fe-ad3d-1ee714a9a3ce",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e5b579e0-fc2c-4574-a74b-5554bedb6309",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "d3cb5ebb-accf-47ff-9ff2-fae01981a196",
      "documentation": "Gets a list of migrations between Amazon Lex V1 and Amazon Lex V2.",
      "method": "get",
      "endpoint": "migrations",
      "responses": [
        {
          "uuid": "5972e49f-aa7c-40e9-8928-80449550c086",
          "body": "{\n  \"migrationSummaries\": [\n    {\n      \"migrationId\": \"\",\n      \"v1BotName\": \"\",\n      \"v1BotVersion\": \"\",\n      \"v1BotLocale\": \"\",\n      \"v2BotId\": \"\",\n      \"v2BotRole\": \"\",\n      \"migrationStatus\": \"\",\n      \"migrationStrategy\": \"\",\n      \"migrationTimestamp\": \"{{faker 'date.recent' 365}}\"\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e954f5d5-3061-4ba8-9f3b-999883870088",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e154d585-91c8-4326-808f-618695633c6a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a12d8e37-6abf-4d40-8866-242f561ff4cf",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "92d24dfe-49a7-474f-9e89-1d3125d0fcec",
      "documentation": "<p>Starts migrating a bot from Amazon Lex V1 to Amazon Lex V2. Migrate your bot when you want to take advantage of the new features of Amazon Lex V2.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/migrate.html\">Migrating a bot</a> in the <i>Amazon Lex developer guide</i>.</p>",
      "method": "post",
      "endpoint": "migrations",
      "responses": [
        {
          "uuid": "105454af-1731-4234-b542-dc68f8438cd0",
          "body": "{\n  \"v1BotName\": \"\",\n  \"v1BotVersion\": \"\",\n  \"v1BotLocale\": \"\",\n  \"v2BotId\": \"\",\n  \"v2BotRole\": \"\",\n  \"migrationId\": \"\",\n  \"migrationStrategy\": \"\",\n  \"migrationTimestamp\": \"{{faker 'date.recent' 365}}\"\n}",
          "latency": 0,
          "statusCode": 202,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "09c25fc3-81cc-419e-a039-5db490e298c1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5f42806c-3981-4b28-b3da-fb648313de9a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "57bcb29e-f501-41b3-9b53-54f7c5db469d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3cf59c01-710e-47c5-a394-0156837f8b66",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "AccessDeniedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "8e5bcfc9-f780-435b-b7ad-a114fa29f71a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "781779ad-b53d-4027-9bf0-b76c880083cd",
      "documentation": "<p>Returns information about a specific version of a slot type. In addition to specifying the slot type name, you must specify the slot type version.</p> <p>This operation requires permissions for the <code>lex:GetSlotType</code> action.</p>",
      "method": "get",
      "endpoint": "slottypes/:name/versions/:version",
      "responses": [
        {
          "uuid": "0a4e0cf5-1c81-4142-bd95-3434b3626ab7",
          "body": "{\n  \"version\": \"$LATEST\",\n  \"name\": \"DocPizzaCrustType\",\n  \"checksum\": \"210b3d5a-90a3-4b22-ac7e-f50c2c71095f\",\n  \"createdDate\": 1494359274.403,\n  \"description\": \"Available crust types\",\n  \"enumerationValues\": [\n    {\n      \"value\": \"thick\"\n    },\n    {\n      \"value\": \"thin\"\n    }\n  ],\n  \"lastUpdatedDate\": 1494359274.403\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "381b10e0-77a6-45d6-af55-d322e7f8f705",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a7d09ed2-66c6-491c-8218-c7bcde246327",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d906e946-f205-4cab-b74a-51fdfea42de1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "55da452a-2400-4c81-847b-f6e1efb2b949",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "bcc43c3d-56d4-4472-a80b-0a818b1ed8a5",
      "documentation": "<p>Gets information about all versions of a slot type.</p> <p>The <code>GetSlotTypeVersions</code> operation returns a <code>SlotTypeMetadata</code> object for each version of a slot type. For example, if a slot type has three numbered versions, the <code>GetSlotTypeVersions</code> operation returns four <code>SlotTypeMetadata</code> objects in the response, one for each numbered version and one for the <code>$LATEST</code> version. </p> <p>The <code>GetSlotTypeVersions</code> operation always returns at least one version, the <code>$LATEST</code> version.</p> <p>This operation requires permissions for the <code>lex:GetSlotTypeVersions</code> action.</p>",
      "method": "get",
      "endpoint": "slottypes/:name/versions/",
      "responses": [
        {
          "uuid": "d1099e31-690a-4d90-98ba-bac472b1fb66",
          "body": "{\n  \"slotTypes\": [\n    {\n      \"name\": \"\",\n      \"description\": \"\",\n      \"lastUpdatedDate\": \"{{faker 'date.recent' 365}}\",\n      \"createdDate\": \"{{faker 'date.recent' 365}}\",\n      \"version\": \"\"\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "aa4840b6-9878-4ee7-a215-b730dbe22334",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9efe006c-138d-4765-9c81-69948f834faa",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "863f65d6-4161-4a41-978e-dab665834846",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d108a67c-2bf7-4ea8-9443-4b3eed11e0cf",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "4e7ecdd2-a956-4126-b1dd-74ac7ada10d3",
      "documentation": "<p>Returns slot type information as follows: </p> <ul> <li> <p>If you specify the <code>nameContains</code> field, returns the <code>$LATEST</code> version of all slot types that contain the specified string.</p> </li> <li> <p> If you don't specify the <code>nameContains</code> field, returns information about the <code>$LATEST</code> version of all slot types. </p> </li> </ul> <p> The operation requires permission for the <code>lex:GetSlotTypes</code> action. </p>",
      "method": "get",
      "endpoint": "slottypes/",
      "responses": [
        {
          "uuid": "ca032b7f-c02d-4e50-9585-ef7e6d37e095",
          "body": "{\n  \"slotTypes\": [\n    {\n      \"version\": \"$LATEST\",\n      \"name\": \"DocPizzaCrustType\",\n      \"createdDate\": 1494359274.403,\n      \"description\": \"Available crust types\",\n      \"lastUpdatedDate\": 1494359274.403\n    },\n    {\n      \"version\": \"$LATEST\",\n      \"name\": \"DocPizzaSauceType\",\n      \"createdDate\": 1494356442.23,\n      \"description\": \"Available pizza sauces\",\n      \"lastUpdatedDate\": 1494356442.23\n    },\n    {\n      \"version\": \"$LATEST\",\n      \"name\": \"DocPizzaType\",\n      \"createdDate\": 1494359198.656,\n      \"description\": \"Available pizzas\",\n      \"lastUpdatedDate\": 1494359198.656\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "8505b7a5-0c6c-4b25-9a66-8f5360e1e91b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "953b0425-26bd-469a-b6bb-b49a8fdd9ada",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0dd1114d-3e29-42ce-a403-d0f85c1ad780",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "890735c5-b218-45db-b5c6-3b306570a3cc",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "e95fc17e-06dd-48be-8a2a-9405bd9bd04f",
      "documentation": "<p>Use the <code>GetUtterancesView</code> operation to get information about the utterances that your users have made to your bot. You can use this list to tune the utterances that your bot responds to.</p> <p>For example, say that you have created a bot to order flowers. After your users have used your bot for a while, use the <code>GetUtterancesView</code> operation to see the requests that they have made and whether they have been successful. You might find that the utterance \"I want flowers\" is not being recognized. You could add this utterance to the <code>OrderFlowers</code> intent so that your bot recognizes that utterance.</p> <p>After you publish a new version of a bot, you can get information about the old version and the new so that you can compare the performance across the two versions. </p> <p>Utterance statistics are generated once a day. Data is available for the last 15 days. You can request information for up to 5 versions of your bot in each request. Amazon Lex returns the most frequent utterances received by the bot in the last 15 days. The response contains information about a maximum of 100 utterances for each version.</p> <p>If you set <code>childDirected</code> field to true when you created your bot, if you are using slot obfuscation with one or more slots, or if you opted out of participating in improving Amazon Lex, utterances are not available.</p> <p>This operation requires permissions for the <code>lex:GetUtterancesView</code> action.</p>",
      "method": "get",
      "endpoint": "bots/:botname/utterances#view=aggregation&bot_versions&status_type",
      "responses": [
        {
          "uuid": "b0a0e32b-e752-42d9-b83d-425ac51951d5",
          "body": "{\n  \"botName\": \"\",\n  \"utterances\": [\n    {\n      \"botVersion\": \"\",\n      \"utterances\": [\n        {\n          \"utteranceString\": \"\",\n          \"count\": {{faker 'random.number'}},\n          \"distinctUsers\": {{faker 'random.number'}},\n          \"firstUtteredDate\": \"{{faker 'date.recent' 365}}\",\n          \"lastUtteredDate\": \"{{faker 'date.recent' 365}}\"\n        }\n      ]\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f0e1c246-0c63-4c68-8fdc-e91be47dc2b9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f967b5ee-7344-4164-ab68-766a6109f83b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a7f4afee-c248-4ab7-96ce-16f64b5fd45b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "7c3f6029-2793-487d-8566-997d2392240e",
      "documentation": "Gets a list of tags associated with the specified resource. Only bots, bot aliases, and bot channels can have tags associated with them.",
      "method": "get",
      "endpoint": "tags/:resourceArn",
      "responses": [
        {
          "uuid": "78c788e5-d4d5-4be9-a0ff-c01cdbe1aaa6",
          "body": "{\n  \"tags\": [\n    {\n      \"key\": \"\",\n      \"value\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "488299af-27ff-485f-a868-8e978b3eec8a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "86ff3d05-9608-40d0-9b88-a51b9987bd29",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "02487b87-b4a9-41dd-86cd-8405e05446a2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1d974dc6-dfb1-486c-8069-357d47c562d9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "eee509a8-fd9d-422e-a38c-e02d1c2b0616",
      "documentation": "Adds the specified tags to the specified resource. If a tag key already exists, the existing value is replaced with the new value.",
      "method": "post",
      "endpoint": "tags/:resourceArn",
      "responses": [
        {
          "uuid": "f58d0218-bba9-4de8-b524-1f2c592f517d",
          "body": "{}",
          "latency": 0,
          "statusCode": 204,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5c9745ab-eafc-478a-a895-8957f9698369",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "6156ea66-49b5-4278-9b94-024cda5e3b48",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "eedd539d-b2b9-453b-98c7-dd5aa43ac202",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f484a8a8-2ebc-46eb-a379-4ff49bc35322",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3d511e1e-41eb-4eed-9387-f190de4338c2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "15167838-0ac7-4c28-8914-aa2aca1c69b7",
      "documentation": "<p>Creates an Amazon Lex conversational bot or replaces an existing bot. When you create or update a bot you are only required to specify a name, a locale, and whether the bot is directed toward children under age 13. You can use this to add intents later, or to remove intents from an existing bot. When you create a bot with the minimum information, the bot is created or updated but Amazon Lex returns the <code/> response <code>FAILED</code>. You can build the bot after you add one or more intents. For more information about Amazon Lex bots, see <a>how-it-works</a>. </p> <p>If you specify the name of an existing bot, the fields in the request replace the existing values in the <code>$LATEST</code> version of the bot. Amazon Lex removes any fields that you don't provide values for in the request, except for the <code>idleTTLInSeconds</code> and <code>privacySettings</code> fields, which are set to their default values. If you don't specify values for required fields, Amazon Lex throws an exception.</p> <p>This operation requires permissions for the <code>lex:PutBot</code> action. For more information, see <a>security-iam</a>.</p>",
      "method": "put",
      "endpoint": "bots/:name/versions/$LATEST",
      "responses": [
        {
          "uuid": "ba5c8fd2-b62d-4956-83f7-ddc7531dbd6a",
          "body": "{\n  \"version\": \"$LATEST\",\n  \"name\": \"DocOrderPizzaBot\",\n  \"abortStatement\": {\n    \"messages\": [\n      {\n        \"content\": \"I don't understand. Can you try again?\",\n        \"contentType\": \"PlainText\"\n      },\n      {\n        \"content\": \"I'm sorry, I don't understand.\",\n        \"contentType\": \"PlainText\"\n      }\n    ]\n  },\n  \"checksum\": \"20172ee3-fa06-49b2-bbc5-667c090303e9\",\n  \"childDirected\": true,\n  \"clarificationPrompt\": {\n    \"maxAttempts\": 1,\n    \"messages\": [\n      {\n        \"content\": \"I'm sorry, I didn't hear that. Can you repeate what you just said?\",\n        \"contentType\": \"PlainText\"\n      },\n      {\n        \"content\": \"Can you say that again?\",\n        \"contentType\": \"PlainText\"\n      }\n    ]\n  },\n  \"createdDate\": 1494360160.133,\n  \"description\": \"Orders a pizza from a local pizzeria.\",\n  \"idleSessionTTLInSeconds\": 300,\n  \"intents\": [\n    {\n      \"intentName\": \"DocOrderPizza\",\n      \"intentVersion\": \"$LATEST\"\n    }\n  ],\n  \"lastUpdatedDate\": 1494360160.133,\n  \"locale\": \"en-US\",\n  \"status\": \"NOT_BUILT\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f126b0a1-5026-43ad-a7a4-89549567022d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e2c3f374-f53c-417f-b1ce-29af55a60272",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "215da754-e69d-4536-96a5-bf0b8512b0b6",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3eba8938-2db5-4de1-8cbf-206778461899",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c0227ff0-8473-47ff-b600-ab39fe12ec5a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "PreconditionFailedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "c85b2d20-1651-4769-aba5-af09f894c984",
      "documentation": "<p>Creates an intent or replaces an existing intent.</p> <p>To define the interaction between the user and your bot, you use one or more intents. For a pizza ordering bot, for example, you would create an <code>OrderPizza</code> intent. </p> <p>To create an intent or replace an existing intent, you must provide the following:</p> <ul> <li> <p>Intent name. For example, <code>OrderPizza</code>.</p> </li> <li> <p>Sample utterances. For example, \"Can I order a pizza, please.\" and \"I want to order a pizza.\"</p> </li> <li> <p>Information to be gathered. You specify slot types for the information that your bot will request from the user. You can specify standard slot types, such as a date or a time, or custom slot types such as the size and crust of a pizza.</p> </li> <li> <p>How the intent will be fulfilled. You can provide a Lambda function or configure the intent to return the intent information to the client application. If you use a Lambda function, when all of the intent information is available, Amazon Lex invokes your Lambda function. If you configure your intent to return the intent information to the client application. </p> </li> </ul> <p>You can specify other optional information in the request, such as:</p> <ul> <li> <p>A confirmation prompt to ask the user to confirm an intent. For example, \"Shall I order your pizza?\"</p> </li> <li> <p>A conclusion statement to send to the user after the intent has been fulfilled. For example, \"I placed your pizza order.\"</p> </li> <li> <p>A follow-up prompt that asks the user for additional activity. For example, asking \"Do you want to order a drink with your pizza?\"</p> </li> </ul> <p>If you specify an existing intent name to update the intent, Amazon Lex replaces the values in the <code>$LATEST</code> version of the intent with the values in the request. Amazon Lex removes fields that you don't provide in the request. If you don't specify the required fields, Amazon Lex throws an exception. When you update the <code>$LATEST</code> version of an intent, the <code>status</code> field of any bot that uses the <code>$LATEST</code> version of the intent is set to <code>NOT_BUILT</code>.</p> <p>For more information, see <a>how-it-works</a>.</p> <p>This operation requires permissions for the <code>lex:PutIntent</code> action.</p>",
      "method": "put",
      "endpoint": "intents/:name/versions/$LATEST",
      "responses": [
        {
          "uuid": "93ac9982-e90f-49ac-833e-cb6e6152e454",
          "body": "{\n  \"version\": \"$LATEST\",\n  \"name\": \"DocOrderPizza\",\n  \"checksum\": \"ca9bc13d-afc8-4706-bbaf-091f7a5935d6\",\n  \"conclusionStatement\": {\n    \"messages\": [\n      {\n        \"content\": \"All right, I ordered  you a {Crust} crust {Type} pizza with {Sauce} sauce.\",\n        \"contentType\": \"PlainText\"\n      },\n      {\n        \"content\": \"OK, your {Crust} crust {Type} pizza with {Sauce} sauce is on the way.\",\n        \"contentType\": \"PlainText\"\n      }\n    ],\n    \"responseCard\": \"foo\"\n  },\n  \"confirmationPrompt\": {\n    \"maxAttempts\": 1,\n    \"messages\": [\n      {\n        \"content\": \"Should I order  your {Crust} crust {Type} pizza with {Sauce} sauce?\",\n        \"contentType\": \"PlainText\"\n      }\n    ]\n  },\n  \"createdDate\": 1494359783.453,\n  \"description\": \"Order a pizza from a local pizzeria.\",\n  \"fulfillmentActivity\": {\n    \"type\": \"ReturnIntent\"\n  },\n  \"lastUpdatedDate\": 1494359783.453,\n  \"rejectionStatement\": {\n    \"messages\": [\n      {\n        \"content\": \"Ok, I'll cancel your order.\",\n        \"contentType\": \"PlainText\"\n      },\n      {\n        \"content\": \"I cancelled your order.\",\n        \"contentType\": \"PlainText\"\n      }\n    ]\n  },\n  \"sampleUtterances\": [\n    \"Order me a pizza.\",\n    \"Order me a {Type} pizza.\",\n    \"I want a {Crust} crust {Type} pizza\",\n    \"I want a {Crust} crust {Type} pizza with {Sauce} sauce.\"\n  ],\n  \"slots\": [\n    {\n      \"name\": \"Sauce\",\n      \"description\": \"The type of sauce to use on the pizza.\",\n      \"priority\": 3,\n      \"sampleUtterances\": [\n        \"Make it {Sauce} sauce.\",\n        \"I'd like {Sauce} sauce.\"\n      ],\n      \"slotConstraint\": \"Required\",\n      \"slotType\": \"DocPizzaSauceType\",\n      \"slotTypeVersion\": \"$LATEST\",\n      \"valueElicitationPrompt\": {\n        \"maxAttempts\": 1,\n        \"messages\": [\n          {\n            \"content\": \"White or red sauce?\",\n            \"contentType\": \"PlainText\"\n          },\n          {\n            \"content\": \"Garlic or tomato sauce?\",\n            \"contentType\": \"PlainText\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"Type\",\n      \"description\": \"The type of pizza to order.\",\n      \"priority\": 1,\n      \"sampleUtterances\": [\n        \"Get me a {Type} pizza.\",\n        \"A {Type} pizza please.\",\n        \"I'd like a {Type} pizza.\"\n      ],\n      \"slotConstraint\": \"Required\",\n      \"slotType\": \"DocPizzaType\",\n      \"slotTypeVersion\": \"$LATEST\",\n      \"valueElicitationPrompt\": {\n        \"maxAttempts\": 1,\n        \"messages\": [\n          {\n            \"content\": \"What type of pizza would you like?\",\n            \"contentType\": \"PlainText\"\n          },\n          {\n            \"content\": \"Vegie or cheese pizza?\",\n            \"contentType\": \"PlainText\"\n          },\n          {\n            \"content\": \"I can get you a vegie or a cheese pizza.\",\n            \"contentType\": \"PlainText\"\n          }\n        ]\n      }\n    },\n    {\n      \"name\": \"Crust\",\n      \"description\": \"The type of pizza crust to order.\",\n      \"priority\": 2,\n      \"sampleUtterances\": [\n        \"Make it a {Crust} crust.\",\n        \"I'd like a {Crust} crust.\"\n      ],\n      \"slotConstraint\": \"Required\",\n      \"slotType\": \"DocPizzaCrustType\",\n      \"slotTypeVersion\": \"$LATEST\",\n      \"valueElicitationPrompt\": {\n        \"maxAttempts\": 1,\n        \"messages\": [\n          {\n            \"content\": \"What type of crust would you like?\",\n            \"contentType\": \"PlainText\"\n          },\n          {\n            \"content\": \"Thick or thin crust?\",\n            \"contentType\": \"PlainText\"\n          }\n        ]\n      }\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "6c1f9fb6-e239-42b3-b121-9fb0f878b063",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "6186f2fb-0bd3-43e4-9a66-a31fee69bacc",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a54f949d-7cba-49fe-b2ca-b10abb898302",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ecdf38a6-f04b-4b3e-8e02-ca449b96aaad",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d80a42f7-a8fe-4fa9-9dc0-5473494b773a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "PreconditionFailedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "261033fb-e261-4647-b726-6c981c1ba41f",
      "documentation": "<p>Creates a custom slot type or replaces an existing custom slot type.</p> <p>To create a custom slot type, specify a name for the slot type and a set of enumeration values, which are the values that a slot of this type can assume. For more information, see <a>how-it-works</a>.</p> <p>If you specify the name of an existing slot type, the fields in the request replace the existing values in the <code>$LATEST</code> version of the slot type. Amazon Lex removes the fields that you don't provide in the request. If you don't specify required fields, Amazon Lex throws an exception. When you update the <code>$LATEST</code> version of a slot type, if a bot uses the <code>$LATEST</code> version of an intent that contains the slot type, the bot's <code>status</code> field is set to <code>NOT_BUILT</code>.</p> <p>This operation requires permissions for the <code>lex:PutSlotType</code> action.</p>",
      "method": "put",
      "endpoint": "slottypes/:name/versions/$LATEST",
      "responses": [
        {
          "uuid": "5f1a42e5-a736-47f7-98a0-1eec2eb15a9a",
          "body": "{\n  \"version\": \"$LATEST\",\n  \"name\": \"DocPizzaSauceType\",\n  \"checksum\": \"cfd00ed1-775d-4357-947c-aca7e73b44ba\",\n  \"createdDate\": 1494356442.23,\n  \"description\": \"Available pizza sauces\",\n  \"enumerationValues\": [\n    {\n      \"value\": \"red\"\n    },\n    {\n      \"value\": \"white\"\n    }\n  ],\n  \"lastUpdatedDate\": 1494356442.23\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "803d6dcd-5b7a-466a-a918-7fb85fbcdf8d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3ee5895b-7296-4fcc-8a2e-b9cd0bc17fda",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "8695fe41-0cb3-435c-a62c-1bfb531bc865",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f0155d13-4312-46aa-a51a-0a392661b277",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "30bdfd8b-bc36-4f29-b9a5-af2e30a460b8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "PreconditionFailedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "7444a932-125b-4d44-b18d-16f510104ba5",
      "documentation": "Starts a job to import a resource to Amazon Lex.",
      "method": "post",
      "endpoint": "imports/",
      "responses": [
        {
          "uuid": "2cab2eba-80f4-4938-a4e8-212f04c9b3a3",
          "body": "{\n  \"name\": \"\",\n  \"resourceType\": \"\",\n  \"mergeStrategy\": \"\",\n  \"importId\": \"\",\n  \"importStatus\": \"\",\n  \"tags\": [\n    {\n      \"key\": \"\",\n      \"value\": \"\"\n    }\n  ],\n  \"createdDate\": \"{{faker 'date.recent' 365}}\"\n}",
          "latency": 0,
          "statusCode": 201,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9d87e535-6ccd-4f80-a9e3-1b9afabeba4a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "afffa05f-88f7-481a-b04f-ecccd9ff485b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "8a95ac01-b921-4c97-91f1-fd8c00c3f3cb",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "88935017-019d-464e-949d-179fb7833de2",
      "documentation": "Removes tags from a bot, bot alias or bot channel.",
      "method": "delete",
      "endpoint": "tags/:resourceArn#tagKeys",
      "responses": [
        {
          "uuid": "47c679de-7de2-4e13-8570-21bf66f29544",
          "body": "{}",
          "latency": 0,
          "statusCode": 204,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "324f91b1-0a16-4536-82a7-b86162e5d4ea",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "NotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "50dd9076-2c9f-43d1-8895-9db98a1633b1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "BadRequestException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f7ed5132-a0b2-4a9c-a1cd-447e0c1e652e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "ConflictException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "73c98f0e-75ef-4e25-b6c6-35f9cce9cb8a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalFailureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c47e5dce-b687-4053-994c-e9214eeadd15",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    }
  ],
  "proxyMode": false,
  "proxyHost": "",
  "proxyRemovePrefix": false,
  "tlsOptions": {
    "enabled": false,
    "type": "CERT",
    "pfxPath": "",
    "certPath": "",
    "keyPath": "",
    "caPath": "",
    "passphrase": ""
  },
  "cors": true,
  "headers": [],
  "proxyReqHeaders": [
    {
      "key": "",
      "value": ""
    }
  ],
  "proxyResHeaders": [
    {
      "key": "",
      "value": ""
    }
  ]
}