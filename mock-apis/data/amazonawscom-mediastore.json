{
  "uuid": "51b1f9dd-dbab-4606-a225-ef74bd320f95",
  "lastMigration": 19,
  "name": "AWS Elemental MediaStore",
  "endpointPrefix": "",
  "latency": 0,
  "port": 3000,
  "hostname": "0.0.0.0",
  "routes": [
    {
      "uuid": "3240ec6f-815d-4a6c-8dcb-9531d217eefb",
      "documentation": "Creates a storage container to hold objects. A container is similar to a bucket in the Amazon S3 service.",
      "method": "post",
      "endpoint": "#X-Amz-Target=MediaStore_20170901.CreateContainer",
      "responses": [
        {
          "uuid": "667192da-71da-4417-a681-848260ef3629",
          "body": "{\n  \"Container\": {\n    \"Endpoint\": \"\",\n    \"CreationTime\": \"{{faker 'date.recent' 365}}\",\n    \"ARN\": \"\",\n    \"Name\": \"\",\n    \"Status\": \"\",\n    \"AccessLoggingEnabled\": {{faker 'random.boolean'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "de1cfa9e-a014-4d69-a84d-f0f5d3ad5b85",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ContainerInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7100ed31-2e96-4eff-8253-909a0495bc79",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9815e498-0a32-40e0-8d69-ad2c4c129eca",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalServerError",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "26bc328f-4d8d-44d3-8f62-e7806607188f",
      "documentation": "Deletes the specified container. Before you make a <code>DeleteContainer</code> request, delete any objects in the container or in any folders in the container. You can delete only empty containers. ",
      "method": "post",
      "endpoint": "#X-Amz-Target=MediaStore_20170901.DeleteContainer",
      "responses": [
        {
          "uuid": "c6136bbc-b24e-4702-95f5-70a94b5cba08",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3acc2a98-65ad-4ed4-b2ed-b8868d51f89f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ContainerInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5c346504-ced4-42e2-9fd3-ff2d74e76ed1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ContainerNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5171cacf-b397-434c-b648-2338a3afd0af",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalServerError",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "0c32667e-99cb-4b21-8ac5-ee894d1e89fe",
      "documentation": "Deletes the access policy that is associated with the specified container.",
      "method": "post",
      "endpoint": "#X-Amz-Target=MediaStore_20170901.DeleteContainerPolicy",
      "responses": [
        {
          "uuid": "76a0ab3c-c9fe-4806-932d-032dd723bc45",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a0f0c44e-8e6b-464a-a5c9-8e101459f46d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ContainerInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1110d1a5-d925-4daf-a923-0dd1c4d4501c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ContainerNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "41a113eb-1c09-4dde-a410-b397395c8162",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "PolicyNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "03e0bb9c-3dfb-4b9d-b134-2cb7be7c0f84",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalServerError",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "aea84910-c9fa-4758-9a78-0d2fbbd8bf19",
      "documentation": "<p>Deletes the cross-origin resource sharing (CORS) configuration information that is set for the container.</p> <p>To use this operation, you must have permission to perform the <code>MediaStore:DeleteCorsPolicy</code> action. The container owner has this permission by default and can grant this permission to others.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=MediaStore_20170901.DeleteCorsPolicy",
      "responses": [
        {
          "uuid": "5986019b-0fc2-4e5e-8d92-e8ebf86ecdf8",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "4b6deee0-4d02-48ee-b030-eb26a322fc6c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ContainerInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "37d66e0e-3d94-4b03-81e5-5d06a981fca3",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ContainerNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "81fa25dd-a7eb-483a-85b3-6c5ad7abfa55",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "CorsPolicyNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7fbbbf0f-6542-42f0-bf4d-19f845e4e4db",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalServerError",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "4eb3061b-febf-44fc-b632-25902500c529",
      "documentation": "Removes an object lifecycle policy from a container. It takes up to 20 minutes for the change to take effect.",
      "method": "post",
      "endpoint": "#X-Amz-Target=MediaStore_20170901.DeleteLifecyclePolicy",
      "responses": [
        {
          "uuid": "4d7b180f-8b52-412d-bbda-c4432d268e27",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "33010970-f63f-49cf-b158-c7f679fd2709",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ContainerInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "280ce082-84b8-47d0-adeb-253fa950d57e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ContainerNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ca3ac119-bcbd-4b93-be75-a1854aa50c0b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "PolicyNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "93d5b8e6-2b0e-479c-998b-a8c2454c4bbe",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalServerError",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "e17147e9-8f2d-4271-9d26-fbeb8f73ab23",
      "documentation": "Deletes the metric policy that is associated with the specified container. If there is no metric policy associated with the container, MediaStore doesn't send metrics to CloudWatch.",
      "method": "post",
      "endpoint": "#X-Amz-Target=MediaStore_20170901.DeleteMetricPolicy",
      "responses": [
        {
          "uuid": "92660077-599d-46c1-8c59-7cf6d3e93e44",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1066f3d1-4f41-41e1-a6f2-da46e8555f42",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ContainerInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7e58e497-55be-40fa-81b8-8275396c3868",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ContainerNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5f645fc0-0606-4885-8eab-33136b609ac9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "PolicyNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d01c6dc6-f485-407c-ade5-d1daefca75c5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalServerError",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "80d59f4d-0b0b-4b5b-9c17-53f5e71889b4",
      "documentation": "Retrieves the properties of the requested container. This request is commonly used to retrieve the endpoint of a container. An endpoint is a value assigned by the service when a new container is created. A container's endpoint does not change after it has been assigned. The <code>DescribeContainer</code> request returns a single <code>Container</code> object based on <code>ContainerName</code>. To return all <code>Container</code> objects that are associated with a specified AWS account, use <a>ListContainers</a>.",
      "method": "post",
      "endpoint": "#X-Amz-Target=MediaStore_20170901.DescribeContainer",
      "responses": [
        {
          "uuid": "c7cc575e-2fb7-4dbf-adbe-b770f52414de",
          "body": "{\n  \"Container\": {\n    \"Endpoint\": \"\",\n    \"CreationTime\": \"{{faker 'date.recent' 365}}\",\n    \"ARN\": \"\",\n    \"Name\": \"\",\n    \"Status\": \"\",\n    \"AccessLoggingEnabled\": {{faker 'random.boolean'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "4f0a8277-0723-464c-83e9-30edfc4e84b2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ContainerNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "56e053cd-5c31-4152-9ff3-de8cdc683c60",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InternalServerError",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "5c28a537-70cb-4779-893b-3351d5867a8b",
      "documentation": "Retrieves the access policy for the specified container. For information about the data that is included in an access policy, see the <a href=\"https://aws.amazon.com/documentation/iam/\">AWS Identity and Access Management User Guide</a>.",
      "method": "post",
      "endpoint": "#X-Amz-Target=MediaStore_20170901.GetContainerPolicy",
      "responses": [
        {
          "uuid": "a4d5032b-7772-4ece-9303-b166a1c11066",
          "body": "{\n  \"Policy\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "bfc065f7-342e-4be3-8822-565d8806f27f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ContainerInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f9be5693-9252-48bd-9268-e469c240c010",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ContainerNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "4c126fde-0ffc-471e-a39e-fe73a6848176",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "PolicyNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2a34553f-756c-47f8-abdd-37b4a71046a2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalServerError",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "31f7c94e-98cf-4241-9317-18f14c2c3ded",
      "documentation": "<p>Returns the cross-origin resource sharing (CORS) configuration information that is set for the container.</p> <p>To use this operation, you must have permission to perform the <code>MediaStore:GetCorsPolicy</code> action. By default, the container owner has this permission and can grant it to others.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=MediaStore_20170901.GetCorsPolicy",
      "responses": [
        {
          "uuid": "48c23d95-3bb2-4c56-b8d8-b28e76438909",
          "body": "{\n  \"CorsPolicy\": [\n    {\n      \"AllowedOrigins\": [\n        \"\"\n      ],\n      \"AllowedMethods\": [\n        \"{{oneOf (array 'PUT' 'GET' 'DELETE' 'HEAD')}}\"\n      ],\n      \"AllowedHeaders\": [\n        \"\"\n      ],\n      \"MaxAgeSeconds\": {{faker 'random.number'}},\n      \"ExposeHeaders\": [\n        \"\"\n      ]\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a509e96b-c8d6-4365-9255-b96b346d5577",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ContainerInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "42754d89-4751-4a31-ad72-80c0502a1bef",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ContainerNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c288d619-02de-46c2-a331-b61170314923",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "CorsPolicyNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "bdcbe38d-b63f-40ae-9004-8982ecb7d596",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalServerError",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "34f101ef-55db-4eef-add5-6be44c3ba6d6",
      "documentation": "Retrieves the object lifecycle policy that is assigned to a container.",
      "method": "post",
      "endpoint": "#X-Amz-Target=MediaStore_20170901.GetLifecyclePolicy",
      "responses": [
        {
          "uuid": "7bcd2cbe-26f6-4506-95de-01829cb49291",
          "body": "{\n  \"LifecyclePolicy\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "6daae7b3-3040-43e0-8fa7-b90ff215a51c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ContainerInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "86cf3f1b-8e65-4ffb-8e9c-724f80806659",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ContainerNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2668c695-808d-4a66-9c4e-7ea55165b820",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "PolicyNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "24925de2-7f17-4a49-b1b9-51e9f0dbb655",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalServerError",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "a902b3cb-f84e-4704-9184-3ba984150ab2",
      "documentation": "Returns the metric policy for the specified container. ",
      "method": "post",
      "endpoint": "#X-Amz-Target=MediaStore_20170901.GetMetricPolicy",
      "responses": [
        {
          "uuid": "90afee47-df66-4d5c-8886-fd76196765b6",
          "body": "{\n  \"MetricPolicy\": {\n    \"ContainerLevelMetrics\": \"\",\n    \"MetricPolicyRules\": [\n      {\n        \"ObjectGroup\": \"\",\n        \"ObjectGroupName\": \"\"\n      }\n    ]\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "622c85c3-8b71-4b68-bbd9-83b456f0c98e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ContainerNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "da588511-f5a7-44b8-a72d-0b222cb5d511",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "PolicyNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "805ebd7a-f58e-46bd-b33d-aba1d8f1379f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "ContainerInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b1fb23d6-0f3c-464c-a3e4-a295c201a0a8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InternalServerError",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "8af842fc-366c-4a62-8fd1-d97543038b68",
      "documentation": "<p>Lists the properties of all containers in AWS Elemental MediaStore. </p> <p>You can query to receive all the containers in one response. Or you can include the <code>MaxResults</code> parameter to receive a limited number of containers in each response. In this case, the response includes a token. To get the next set of containers, send the command again, this time with the <code>NextToken</code> parameter (with the returned token as its value). The next set of responses appears, with a token if there are still more containers to receive. </p> <p>See also <a>DescribeContainer</a>, which gets the properties of one container. </p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=MediaStore_20170901.ListContainers",
      "responses": [
        {
          "uuid": "ee84b653-13cd-4a7a-91ca-e2347095d881",
          "body": "{\n  \"Containers\": [\n    {\n      \"Endpoint\": \"\",\n      \"CreationTime\": \"{{faker 'date.recent' 365}}\",\n      \"ARN\": \"\",\n      \"Name\": \"\",\n      \"Status\": \"\",\n      \"AccessLoggingEnabled\": {{faker 'random.boolean'}}\n    }\n  ],\n  \"NextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0363a000-1530-4f48-adf8-1aab3f51bbf8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "InternalServerError",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "1c158f5c-a5ce-42a0-a713-f6cd16ab14cc",
      "documentation": "Returns a list of the tags assigned to the specified container. ",
      "method": "post",
      "endpoint": "#X-Amz-Target=MediaStore_20170901.ListTagsForResource",
      "responses": [
        {
          "uuid": "e06b834e-42f2-41d4-b4a0-7e142736f299",
          "body": "{\n  \"Tags\": [\n    {\n      \"Key\": \"\",\n      \"Value\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "be50de79-c6ce-4a4c-84cc-3cbf49ff7f80",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ContainerInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "42aa96a5-bc1e-4059-b2fe-60ebb1e80072",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ContainerNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0dbef36e-f71e-42be-b9b5-a8691c0a81e7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalServerError",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "79d76d1b-e4fa-48bd-b5f4-1202caebf51b",
      "documentation": "<p>Creates an access policy for the specified container to restrict the users and clients that can access it. For information about the data that is included in an access policy, see the <a href=\"https://aws.amazon.com/documentation/iam/\">AWS Identity and Access Management User Guide</a>.</p> <p>For this release of the REST API, you can create only one policy for a container. If you enter <code>PutContainerPolicy</code> twice, the second command modifies the existing policy. </p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=MediaStore_20170901.PutContainerPolicy",
      "responses": [
        {
          "uuid": "34e4aba0-4fc3-4068-84ef-47bce2ebcfcb",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "81c229cc-1d31-49d8-ac89-fa285cc7219e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ContainerNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "74a56693-ebc1-4ea4-9089-058c3456579e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ContainerInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "fbebbdc3-3baf-4ff9-86a4-f2a5bb70ad2c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalServerError",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "32e8438d-9d6b-41b8-b6fe-75d570f066d6",
      "documentation": "<p>Sets the cross-origin resource sharing (CORS) configuration on a container so that the container can service cross-origin requests. For example, you might want to enable a request whose origin is http://www.example.com to access your AWS Elemental MediaStore container at my.example.container.com by using the browser's XMLHttpRequest capability.</p> <p>To enable CORS on a container, you attach a CORS policy to the container. In the CORS policy, you configure rules that identify origins and the HTTP methods that can be executed on your container. The policy can contain up to 398,000 characters. You can add up to 100 rules to a CORS policy. If more than one rule applies, the service uses the first applicable rule listed.</p> <p>To learn more about CORS, see <a href=\"https://docs.aws.amazon.com/mediastore/latest/ug/cors-policy.html\">Cross-Origin Resource Sharing (CORS) in AWS Elemental MediaStore</a>.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=MediaStore_20170901.PutCorsPolicy",
      "responses": [
        {
          "uuid": "bd8d5e09-13ad-47a9-a477-f4100f5db5ef",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0ffdca4a-7aa7-4738-ad45-c68f2c07267f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ContainerNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "eb26e01e-50f0-4f8d-9053-6100eb0cf940",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ContainerInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "4fd8f24d-d40e-4199-807e-3610bedbe8bc",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalServerError",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "a6c1fb4f-1870-4e12-afb6-c63091d11f89",
      "documentation": "<p>Writes an object lifecycle policy to a container. If the container already has an object lifecycle policy, the service replaces the existing policy with the new policy. It takes up to 20 minutes for the change to take effect.</p> <p>For information about how to construct an object lifecycle policy, see <a href=\"https://docs.aws.amazon.com/mediastore/latest/ug/policies-object-lifecycle-components.html\">Components of an Object Lifecycle Policy</a>.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=MediaStore_20170901.PutLifecyclePolicy",
      "responses": [
        {
          "uuid": "2709b7c7-1bd1-415b-a891-56c6b48d9cb6",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "092f44bc-2ba7-4b3d-bad7-255944325d25",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ContainerInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2aa284d4-bb09-408a-9087-9c830f963f69",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ContainerNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a88bdd4e-f95b-409b-868f-e15e7671ed08",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalServerError",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "61181d1e-1f52-4336-9ef4-ffb17d15624a",
      "documentation": "The metric policy that you want to add to the container. A metric policy allows AWS Elemental MediaStore to send metrics to Amazon CloudWatch. It takes up to 20 minutes for the new policy to take effect.",
      "method": "post",
      "endpoint": "#X-Amz-Target=MediaStore_20170901.PutMetricPolicy",
      "responses": [
        {
          "uuid": "dce03d79-2d98-4546-a522-2cc2de2a09c8",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "74b1c7d6-28e3-473d-b7e3-4e385358bd57",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ContainerInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e8bf9be4-265d-46c9-b838-5a69197450f7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ContainerNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "af5b07aa-4e96-4096-b8f3-c35d692164d9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalServerError",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "351a3608-8512-49c3-9c12-20fbdaefcbfc",
      "documentation": "Starts access logging on the specified container. When you enable access logging on a container, MediaStore delivers access logs for objects stored in that container to Amazon CloudWatch Logs.",
      "method": "post",
      "endpoint": "#X-Amz-Target=MediaStore_20170901.StartAccessLogging",
      "responses": [
        {
          "uuid": "369f3108-b5df-4ea1-9e4b-b910d0ff0453",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "23c6cc9c-f137-4367-bd6a-e39573538fbf",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ContainerInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a2cbdf2c-cafe-4107-9d18-380b76bf0852",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ContainerNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3aa7fe1a-feff-4649-aec3-c7beb0c02361",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalServerError",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "18662dfc-07e4-4f36-965a-46b0137813d8",
      "documentation": "Stops access logging on the specified container. When you stop access logging on a container, MediaStore stops sending access logs to Amazon CloudWatch Logs. These access logs are not saved and are not retrievable.",
      "method": "post",
      "endpoint": "#X-Amz-Target=MediaStore_20170901.StopAccessLogging",
      "responses": [
        {
          "uuid": "7e9f7666-805d-4cbd-b728-26c2b1d8a0a0",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2002a91b-0b1a-41ce-b2db-17090302bd68",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ContainerInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "81edd66a-ced8-4b30-a7d8-c9dc4bbe78f0",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ContainerNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b466fe18-996b-489b-88d8-9f7aa7aeba2a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalServerError",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "1c088b7d-0537-465b-9911-551ded791148",
      "documentation": "Adds tags to the specified AWS Elemental MediaStore container. Tags are key:value pairs that you can associate with AWS resources. For example, the tag key might be \"customer\" and the tag value might be \"companyA.\" You can specify one or more tags to add to each container. You can add up to 50 tags to each container. For more information about tagging, including naming and usage conventions, see <a href=\"https://docs.aws.amazon.com/mediastore/latest/ug/tagging.html\">Tagging Resources in MediaStore</a>.",
      "method": "post",
      "endpoint": "#X-Amz-Target=MediaStore_20170901.TagResource",
      "responses": [
        {
          "uuid": "f372057c-1398-4d99-b8c6-0a2ece6f0722",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3e4482e1-2710-44fa-a376-c973088e099a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ContainerInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5897b022-9e80-4bf5-87eb-5d5060e9954e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ContainerNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5ff59da0-e01b-4f4c-876a-72001ac2f6c1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalServerError",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "970b36f9-4f8a-452f-896b-39cb1251b6f1",
      "documentation": "Removes tags from the specified container. You can specify one or more tags to remove. ",
      "method": "post",
      "endpoint": "#X-Amz-Target=MediaStore_20170901.UntagResource",
      "responses": [
        {
          "uuid": "86350ece-d6e6-49a4-8aaf-ff0ba14b0c38",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a5642797-6491-49d9-be0a-395118d10e7a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ContainerInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f410f8bb-23da-4719-b4ab-72d4c397df03",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ContainerNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1a4428e3-5b50-4bc3-8a6b-21482c19b044",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InternalServerError",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    }
  ],
  "proxyMode": false,
  "proxyHost": "",
  "proxyRemovePrefix": false,
  "tlsOptions": {
    "enabled": false,
    "type": "CERT",
    "pfxPath": "",
    "certPath": "",
    "keyPath": "",
    "caPath": "",
    "passphrase": ""
  },
  "cors": true,
  "headers": [],
  "proxyReqHeaders": [
    {
      "key": "",
      "value": ""
    }
  ],
  "proxyResHeaders": [
    {
      "key": "",
      "value": ""
    }
  ]
}