{
  "uuid": "a21eb48f-360c-4c16-a509-cc71e47c0fbe",
  "lastMigration": 19,
  "name": "Amazon Elastic Container Registry Public",
  "endpointPrefix": "",
  "latency": 0,
  "port": 3000,
  "hostname": "0.0.0.0",
  "routes": [
    {
      "uuid": "fb46678a-06dd-4b80-a11c-899dbc7b4345",
      "documentation": "<p>Checks the availability of one or more image layers within a repository in a public registry. When an image is pushed to a repository, each image layer is checked to verify if it has been uploaded before. If it has been uploaded, then the image layer is skipped.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.BatchCheckLayerAvailability",
      "responses": [
        {
          "uuid": "7c9409df-7667-41e0-9b71-1d5e50d489c9",
          "body": "{\n  \"layers\": [\n    {\n      \"layerDigest\": \"\",\n      \"layerAvailability\": \"\",\n      \"layerSize\": {{faker 'random.number'}},\n      \"mediaType\": \"\"\n    }\n  ],\n  \"failures\": [\n    {\n      \"layerDigest\": \"\",\n      \"failureCode\": \"\",\n      \"failureReason\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7e78380f-e470-4ca6-afa2-6e4e8960a3f0",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e829128e-2ed4-49b6-a1fe-2f857326fd18",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7848918f-26f1-405d-b5b9-7b64d15a7e2e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "42ec9477-c4cb-48aa-bb8d-6ef6fa6a8259",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RegistryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "7d07da06-8bea-4231-b88a-a33ba8f2af0d",
      "documentation": "<p>Deletes a list of specified images within a repository in a public registry. Images are specified with either an <code>imageTag</code> or <code>imageDigest</code>.</p> <p>You can remove a tag from an image by specifying the image's tag in your request. When you remove the last tag from an image, the image is deleted from your repository.</p> <p>You can completely delete an image (and all of its tags) by specifying the image's digest in your request.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.BatchDeleteImage",
      "responses": [
        {
          "uuid": "e64b2581-e535-4384-9d1c-a0b9148c5fea",
          "body": "{\n  \"imageIds\": [\n    {\n      \"imageDigest\": \"\",\n      \"imageTag\": \"\"\n    }\n  ],\n  \"failures\": [\n    {\n      \"imageId\": {\n        \"imageDigest\": \"\",\n        \"imageTag\": \"\"\n      },\n      \"failureCode\": \"\",\n      \"failureReason\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3bdd3b23-7d97-40d7-b356-d474c845a525",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5f799523-bd22-4e7b-b3d4-962fe91995b0",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "855d82d2-5e79-4f17-a8d3-7fc36cc99a91",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "b84d6e61-a0b6-40d8-9159-914a4fe34a66",
      "documentation": "<p>Informs Amazon ECR that the image layer upload has completed for a specified public registry, repository name, and upload ID. You can optionally provide a <code>sha256</code> digest of the image layer for data validation purposes.</p> <p>When an image is pushed, the CompleteLayerUpload API is called once per each new image layer to verify that the upload has completed.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.CompleteLayerUpload",
      "responses": [
        {
          "uuid": "8de98de0-8242-4ce2-8b58-ab903927e3ba",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"uploadId\": \"\",\n  \"layerDigest\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "636dfcf8-f89b-4548-a988-f75fb804941b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5cfea7d3-9392-45ac-a27f-0f86df18bea6",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e38031a7-a1a4-41e7-9df7-5ee18c6fb892",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f27fa390-f98e-4742-8ea8-3cf704974db6",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "UploadNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "29a44629-977f-46bc-9afa-897448cae6ba",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "InvalidLayerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ee4ad1af-5233-49f9-a7e4-a9af8033d705",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "LayerPartTooSmallException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "18dc408e-314c-481e-bd00-31d6816fb1a8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 486,
          "label": "LayerAlreadyExistsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "6dcb2daf-e948-4d21-9f98-3789f4bbbd15",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 487,
          "label": "EmptyUploadException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3b4f50b1-15f2-4a82-8fd6-0b806f12bc91",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 488,
          "label": "RegistryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0f481990-938e-4f83-a099-db382df57b7f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 489,
          "label": "UnsupportedCommandException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "ecef6fa7-f9ff-46a4-ad02-570758e86455",
      "documentation": "Creates a repository in a public registry. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html\">Amazon ECR repositories</a> in the <i>Amazon Elastic Container Registry User Guide</i>.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.CreateRepository",
      "responses": [
        {
          "uuid": "a55e26d2-764a-43d6-83e9-7de269afe899",
          "body": "{\n  \"repository\": {\n    \"repositoryArn\": \"\",\n    \"registryId\": \"\",\n    \"repositoryName\": \"\",\n    \"repositoryUri\": \"\",\n    \"createdAt\": \"{{faker 'date.recent' 365}}\"\n  },\n  \"catalogData\": {\n    \"description\": \"\",\n    \"architectures\": [\n      \"\"\n    ],\n    \"operatingSystems\": [\n      \"\"\n    ],\n    \"logoUrl\": \"\",\n    \"aboutText\": \"\",\n    \"usageText\": \"\",\n    \"marketplaceCertified\": {{faker 'random.boolean'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0af44516-ad1b-47e9-9870-6debcc413e40",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e8233c3e-faff-4b16-9617-d79f7a397adc",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a5543fbc-82b7-4bcf-b2ef-6fbb864d8f77",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidTagParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1790b0f0-164b-4960-b0f8-4b6ad4aeb032",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "TooManyTagsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "8d217b44-c50b-4e4e-a828-aecb883b85d9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "RepositoryAlreadyExistsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "96ec9e8a-c235-4024-8fd2-f88affc697e4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "2e088991-8ae1-4362-838b-b3b1d6d64e91",
      "documentation": "Deletes a repository in a public registry. If the repository contains images, you must either delete all images in the repository or use the <code>force</code> option which deletes all images on your behalf before deleting the repository.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.DeleteRepository",
      "responses": [
        {
          "uuid": "1e01582b-1171-4845-a8ab-381b5b62af71",
          "body": "{\n  \"repository\": {\n    \"repositoryArn\": \"\",\n    \"registryId\": \"\",\n    \"repositoryName\": \"\",\n    \"repositoryUri\": \"\",\n    \"createdAt\": \"{{faker 'date.recent' 365}}\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "dd39abf3-014e-4ad0-9e2b-2304bb665d4d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "164c8a1a-abb2-4e8e-9cd3-b0a9378d2259",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "be40f524-3963-4075-847e-511eb5cb4314",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a6bb823d-8615-4939-a1d0-f35dcd020ead",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RepositoryNotEmptyException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "98ba07a8-f05a-45e4-9731-c828da4d0c25",
      "documentation": "Deletes the repository policy associated with the specified repository.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.DeleteRepositoryPolicy",
      "responses": [
        {
          "uuid": "846d53a3-3eb3-4334-954b-a554ea11f5fe",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"policyText\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1800d0f8-25c9-406e-a2bc-f2f7f8c9684a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5acc298c-2e5f-4c8f-a340-b488bb00d9f2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "aba0ec0a-52f1-4676-bf60-c68fe717fccc",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "60dbffb4-74b6-4e49-8c94-c4fbd231fec8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RepositoryPolicyNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "75344334-b2de-4441-ac0f-17a40a268300",
      "documentation": "Returns the image tag details for a repository in a public registry.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.DescribeImageTags",
      "responses": [
        {
          "uuid": "2bc0d85a-f40a-420b-9592-31f226f6c0f4",
          "body": "{\n  \"imageTagDetails\": [\n    {\n      \"imageTag\": \"\",\n      \"createdAt\": \"{{faker 'date.recent' 365}}\",\n      \"imageDetail\": {\n        \"imageDigest\": \"\",\n        \"imageSizeInBytes\": {{faker 'random.number'}},\n        \"imagePushedAt\": \"{{faker 'date.recent' 365}}\",\n        \"imageManifestMediaType\": \"\",\n        \"artifactMediaType\": \"\"\n      }\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e02e68a6-5034-4768-9e0a-619bc7657137",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "20e670ef-3fea-4fd8-bf3c-e25cf3e85ba7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "cc6a95f2-127b-422f-b3b9-637c3a6b4a74",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "9ea0193f-ba44-48ed-bcc9-c8aa2f5d87ba",
      "documentation": "<p>Returns metadata about the images in a repository in a public registry.</p> <note> <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by <a>DescribeImages</a>.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.DescribeImages",
      "responses": [
        {
          "uuid": "81e257d8-9827-429d-85ea-4b32f07fa92b",
          "body": "{\n  \"imageDetails\": [\n    {\n      \"registryId\": \"\",\n      \"repositoryName\": \"\",\n      \"imageDigest\": \"\",\n      \"imageTags\": [\n        \"\"\n      ],\n      \"imageSizeInBytes\": {{faker 'random.number'}},\n      \"imagePushedAt\": \"{{faker 'date.recent' 365}}\",\n      \"imageManifestMediaType\": \"\",\n      \"artifactMediaType\": \"\"\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3c468509-94e2-4816-b076-1bfbec1d16ee",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0d700ae5-8cc2-4c12-86ab-91faabe92ee5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "35120935-29c5-41b9-8eac-13e6011250de",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3230afc9-3957-4255-b17e-a8e3d753f847",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ImageNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "b1ab1127-5449-451e-99bb-33053df126ad",
      "documentation": "Returns details for a public registry.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.DescribeRegistries",
      "responses": [
        {
          "uuid": "26fbfcc1-7d4a-4d05-b03a-0e2a9b5826f7",
          "body": "{\n  \"registries\": [\n    {\n      \"registryId\": \"\",\n      \"registryArn\": \"\",\n      \"registryUri\": \"\",\n      \"verified\": {{faker 'random.boolean'}},\n      \"aliases\": [\n        {\n          \"name\": \"\",\n          \"status\": \"\",\n          \"primaryRegistryAlias\": {{faker 'random.boolean'}},\n          \"defaultRegistryAlias\": {{faker 'random.boolean'}}\n        }\n      ]\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3113de2a-088e-4400-92c8-270f5ee94df3",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1d186208-c76e-4fe1-b11e-e74219f38fe9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "UnsupportedCommandException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "02488713-a9f9-4cb0-87ba-2742781b1c04",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "fe6fd8a1-7b23-493a-a533-64a5f23a0bae",
      "documentation": "Describes repositories in a public registry.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.DescribeRepositories",
      "responses": [
        {
          "uuid": "273e4a90-070b-4c13-bd72-e32b05a42020",
          "body": "{\n  \"repositories\": [\n    {\n      \"repositoryArn\": \"\",\n      \"registryId\": \"\",\n      \"repositoryName\": \"\",\n      \"repositoryUri\": \"\",\n      \"createdAt\": \"{{faker 'date.recent' 365}}\"\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ed5e68dd-8c5d-4827-8a46-eccea33ff9e6",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "4e718e54-7447-484c-bf13-9f25343a06d1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "6067c2f1-ea1a-4ba3-8ed9-f175c2fb1609",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "e98fd3b8-58c2-47a3-952d-ff07e1b6455f",
      "documentation": "Retrieves an authorization token. An authorization token represents your IAM authentication credentials and can be used to access any Amazon ECR registry that your IAM principal has access to. The authorization token is valid for 12 hours. This API requires the <code>ecr-public:GetAuthorizationToken</code> and <code>sts:GetServiceBearerToken</code> permissions.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.GetAuthorizationToken",
      "responses": [
        {
          "uuid": "020cdb85-ec69-4a63-b8b6-cddf1cb83675",
          "body": "{\n  \"authorizationData\": {\n    \"authorizationToken\": \"\",\n    \"expiresAt\": \"{{faker 'date.recent' 365}}\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "705caf94-ae8a-4ed9-adb2-8dfef45ffbfa",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1d9d88d9-fca4-450f-bdf5-7c98413638ca",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "91738853-437f-4566-bc53-12915d336c49",
      "documentation": "Retrieves catalog metadata for a public registry.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.GetRegistryCatalogData",
      "responses": [
        {
          "uuid": "2cdd22f1-370f-4029-b955-ace05e2109e4",
          "body": "{\n  \"registryCatalogData\": {\n    \"displayName\": \"\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "26ade3f3-0bec-4718-9d44-00c5e35357d5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "4ffd2f3c-5acc-456e-871b-8f0b5bf6aaa5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "UnsupportedCommandException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "7dbae23c-2188-44a9-a56a-766ee7740393",
      "documentation": "Retrieve catalog metadata for a repository in a public registry. This metadata is displayed publicly in the Amazon ECR Public Gallery.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.GetRepositoryCatalogData",
      "responses": [
        {
          "uuid": "480c4661-f981-4362-a7c6-3f8ac75517fa",
          "body": "{\n  \"catalogData\": {\n    \"description\": \"\",\n    \"architectures\": [\n      \"\"\n    ],\n    \"operatingSystems\": [\n      \"\"\n    ],\n    \"logoUrl\": \"\",\n    \"aboutText\": \"\",\n    \"usageText\": \"\",\n    \"marketplaceCertified\": {{faker 'random.boolean'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "4cfe69ec-f514-400c-b408-a2cc67d53b21",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1eaad50e-5d90-4c81-8885-d4ac05c8f449",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2b80b150-d35f-4d97-8a18-2c876840abdd",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "61f5c075-7a21-4f7c-a2ec-80389442d8d0",
      "documentation": "Retrieves the repository policy for the specified repository.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.GetRepositoryPolicy",
      "responses": [
        {
          "uuid": "3efa15a8-8e51-4246-b66c-2047bcb10533",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"policyText\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "15e07672-d74f-420c-a9c9-6476fa0c8bfa",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "08b01314-f8ba-4a07-84d1-2ee323e67d4a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "87395adc-ad7d-427f-babb-51d83a484e00",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3ef4f0e5-43ea-45f0-8db3-9f197a2ef36a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RepositoryPolicyNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "aa276df3-768f-4f4d-9adb-07897f21606f",
      "documentation": "<p>Notifies Amazon ECR that you intend to upload an image layer.</p> <p>When an image is pushed, the InitiateLayerUpload API is called once per image layer that has not already been uploaded. Whether or not an image layer has been uploaded is determined by the BatchCheckLayerAvailability API action.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.InitiateLayerUpload",
      "responses": [
        {
          "uuid": "37e268df-da24-467a-8ccd-3110cb16ca6b",
          "body": "{\n  \"uploadId\": \"\",\n  \"partSize\": {{faker 'random.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e53803f2-8c2c-45d7-b59d-97ff008df5f9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "8529db0c-89ae-4df0-824b-7f387b439617",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "fe22f88e-ef7a-48e9-bc8f-d7c16124f22d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "8971e93b-79af-4a95-8f6d-7f406f7a2ea2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RegistryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "058b5f60-7193-4af9-a6c3-66213337d127",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "UnsupportedCommandException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "fbb5a5b7-021c-4835-8bdd-82c8a3087527",
      "documentation": "List the tags for an Amazon ECR Public resource.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.ListTagsForResource",
      "responses": [
        {
          "uuid": "1cd2cdb8-479e-4526-a39b-4283f3ddc6ad",
          "body": "{\n  \"tags\": [\n    {\n      \"Key\": \"\",\n      \"Value\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "42cb4ee8-8e56-425b-88e4-d310d93931bd",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9f652363-cbda-4812-b3c2-9801afd9e03c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e9c508d7-e663-4fdd-b1bd-e66d33846392",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "1aa19342-152a-42db-a8b3-a867b84f8129",
      "documentation": "<p>Creates or updates the image manifest and tags associated with an image.</p> <p>When an image is pushed and all new image layers have been uploaded, the PutImage API is called once to create or update the image manifest and the tags associated with the image.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.PutImage",
      "responses": [
        {
          "uuid": "d10b1809-ff6e-48af-822c-c2ec255ddb54",
          "body": "{\n  \"image\": {\n    \"registryId\": \"\",\n    \"repositoryName\": \"\",\n    \"imageId\": {\n      \"imageDigest\": \"\",\n      \"imageTag\": \"\"\n    },\n    \"imageManifest\": \"\",\n    \"imageManifestMediaType\": \"\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b3f03202-0fac-4759-811b-76e85a54546b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "082bf970-a3d3-4e96-a6af-2a2d71b99f54",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0f68523e-837c-4b36-934a-7a8999fb1b48",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2f8050dc-b53c-44b6-8a2b-6e7abd77f8eb",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ImageAlreadyExistsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "62a4037e-39a1-4a3c-b4d8-8a506e46e17d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "LayersNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "68f6e559-fac5-4adf-8c2b-7b76db6f4a66",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "ReferencedImagesNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "fec01378-9465-458a-b8ce-abd90d246a46",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 486,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5a7b0f12-86e1-4272-9b14-d12a4b3d3587",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 487,
          "label": "ImageTagAlreadyExistsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "866b25df-1210-4450-b39c-9261dba29a27",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 488,
          "label": "ImageDigestDoesNotMatchException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f3054f6a-706b-4a51-b884-45671bae42f6",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 489,
          "label": "RegistryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9e2692e9-a794-4948-9487-e971345f65c7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 490,
          "label": "UnsupportedCommandException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "609c0c02-df38-4eae-8ac0-c928c7bf2a69",
      "documentation": "Create or updates the catalog data for a public registry.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.PutRegistryCatalogData",
      "responses": [
        {
          "uuid": "807fbd56-b08b-49a1-9f7f-086dc8624429",
          "body": "{\n  \"registryCatalogData\": {\n    \"displayName\": \"\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3868e0ac-dc9c-4785-8c59-1dbb78292165",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5847a2b3-4734-4fe2-8428-2efdd9ebd79a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "bba6f2e1-6a59-49d8-8f76-20cd4419a452",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "UnsupportedCommandException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "ec083236-129c-4be7-8232-792b3f85d6be",
      "documentation": "Creates or updates the catalog data for a repository in a public registry.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.PutRepositoryCatalogData",
      "responses": [
        {
          "uuid": "1d12535f-af2f-4cff-8d30-670a1cc5180b",
          "body": "{\n  \"catalogData\": {\n    \"description\": \"\",\n    \"architectures\": [\n      \"\"\n    ],\n    \"operatingSystems\": [\n      \"\"\n    ],\n    \"logoUrl\": \"\",\n    \"aboutText\": \"\",\n    \"usageText\": \"\",\n    \"marketplaceCertified\": {{faker 'random.boolean'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c66b5a48-1a50-4cf7-a1af-567a4018b6de",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0f571e19-de83-4065-bfca-93c343747277",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9ff8f58f-48c8-45e9-b8d6-6ab88d838c4d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "8f8770bf-aa13-47e2-9450-edbafc5a2627",
      "documentation": "Applies a repository policy to the specified public repository to control access permissions. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policies.html\">Amazon ECR Repository Policies</a> in the <i>Amazon Elastic Container Registry User Guide</i>.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.SetRepositoryPolicy",
      "responses": [
        {
          "uuid": "ccd855ed-8cf1-4219-ab51-751c1142fadb",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"policyText\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b16b8071-7d07-4867-a8ac-9247bd47173f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e3c959f3-60c3-47e0-a541-b4a169ade185",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "05f1eb4f-bc7d-4c4e-9a6d-3a4887206538",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "991a3f21-e016-4b40-b330-576e9eea3805",
      "documentation": "Associates the specified tags to a resource with the specified <code>resourceArn</code>. If existing tags on a resource are not specified in the request parameters, they are not changed. When a resource is deleted, the tags associated with that resource are deleted as well.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.TagResource",
      "responses": [
        {
          "uuid": "71260bb3-ffdd-4ddf-a3d5-960790eb1d84",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "6fc398ba-aa71-454e-acf9-5789d6c0a714",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d729ef7b-8078-4662-9519-cdad358c2cbb",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidTagParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5d3d828a-9447-4559-857a-5078e7b90e22",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "TooManyTagsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ca124f31-92ac-460b-8fda-d9be83fd7e6b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b39d3df1-4cdd-4be7-9085-98c394072618",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "6481dee9-1d26-4369-a09d-1e67e49e5124",
      "documentation": "Deletes specified tags from a resource.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.UntagResource",
      "responses": [
        {
          "uuid": "f7e40436-72a3-43bd-8e06-09a7b1e81c8c",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9d88b655-d905-4fb2-a79c-be7ddc750f4e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "335b28e2-3414-425d-8bde-78c617680351",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidTagParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "97b962e3-e3f7-46d0-863d-7865533dd3bd",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "TooManyTagsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "500a402e-1e65-48a4-89cf-24223782a0f6",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d3ed5a2f-b945-49e5-aaa7-34a86768da2e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "4fd6ef00-dbd6-469b-b534-9d7f7908a7ee",
      "documentation": "<p>Uploads an image layer part to Amazon ECR.</p> <p>When an image is pushed, each new image layer is uploaded in parts. The maximum size of each image layer part can be 20971520 bytes (or about 20MB). The UploadLayerPart API is called once per each new image layer part.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.UploadLayerPart",
      "responses": [
        {
          "uuid": "aad289da-c12e-4f02-a429-a2ce83658090",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"uploadId\": \"\",\n  \"lastByteReceived\": {{faker 'random.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b09a8aea-0030-49a0-a0aa-65739dbba21c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ec79bdaf-8eeb-4b88-a6be-cfbb9137def4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "22ac21cf-78b5-4525-9584-b6ac2048e6e6",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidLayerPartException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "db094874-595e-455d-931d-494b78bdc1ab",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "98261e9f-e49b-458e-98fb-74d1a34ae31a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "UploadNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f1a7eeba-cb87-429d-bcd9-0a7a9027733c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f20bec87-2884-42c3-855e-666fbd4c43be",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 486,
          "label": "RegistryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3f00bd31-37f1-43ac-afd2-262e59cb3965",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 487,
          "label": "UnsupportedCommandException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    }
  ],
  "proxyMode": false,
  "proxyHost": "",
  "proxyRemovePrefix": false,
  "tlsOptions": {
    "enabled": false,
    "type": "CERT",
    "pfxPath": "",
    "certPath": "",
    "keyPath": "",
    "caPath": "",
    "passphrase": ""
  },
  "cors": true,
  "headers": [],
  "proxyReqHeaders": [
    {
      "key": "",
      "value": ""
    }
  ],
  "proxyResHeaders": [
    {
      "key": "",
      "value": ""
    }
  ]
}