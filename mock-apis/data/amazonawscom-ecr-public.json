{
  "uuid": "7c58f393-1d4a-428c-b91f-fa7f2bfbb1d6",
  "lastMigration": 19,
  "name": "Amazon Elastic Container Registry Public",
  "endpointPrefix": "",
  "latency": 0,
  "port": 3000,
  "hostname": "0.0.0.0",
  "routes": [
    {
      "uuid": "642b1762-4f14-4a10-aa09-1d9137ff0171",
      "documentation": "<p>Checks the availability of one or more image layers within a repository in a public registry. When an image is pushed to a repository, each image layer is checked to verify if it has been uploaded before. If it has been uploaded, then the image layer is skipped.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.BatchCheckLayerAvailability",
      "responses": [
        {
          "uuid": "12fe86b3-86b4-4db7-bae1-5a38e83639ba",
          "body": "{\n  \"layers\": [\n    {\n      \"layerDigest\": \"\",\n      \"layerAvailability\": \"\",\n      \"layerSize\": {{faker 'random.number'}},\n      \"mediaType\": \"\"\n    }\n  ],\n  \"failures\": [\n    {\n      \"layerDigest\": \"\",\n      \"failureCode\": \"\",\n      \"failureReason\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9d4230db-204e-4e41-b8b7-3f3663c53f0b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0d2d3e5c-2c42-4865-bf21-688f6ab77fbb",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5146966e-f5a6-4cc3-80fe-c646582a406b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "82941112-719d-430f-be54-772d35c931d8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RegistryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "a9efda4d-3855-42eb-97d0-cb8c27265ddb",
      "documentation": "<p>Deletes a list of specified images within a repository in a public registry. Images are specified with either an <code>imageTag</code> or <code>imageDigest</code>.</p> <p>You can remove a tag from an image by specifying the image's tag in your request. When you remove the last tag from an image, the image is deleted from your repository.</p> <p>You can completely delete an image (and all of its tags) by specifying the image's digest in your request.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.BatchDeleteImage",
      "responses": [
        {
          "uuid": "8a95fe86-5080-4696-b0ef-2c55ca0db383",
          "body": "{\n  \"imageIds\": [\n    {\n      \"imageDigest\": \"\",\n      \"imageTag\": \"\"\n    }\n  ],\n  \"failures\": [\n    {\n      \"imageId\": {\n        \"imageDigest\": \"\",\n        \"imageTag\": \"\"\n      },\n      \"failureCode\": \"\",\n      \"failureReason\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b62cc272-e36d-4230-a649-b079ec8bab58",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "29e699c2-f99f-46ed-ba51-3a2c59a29502",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f92e9d68-9e97-45c2-bfb9-f913ababc0a5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "755ad632-8839-4098-a8ad-e70140d5cbab",
      "documentation": "<p>Informs Amazon ECR that the image layer upload has completed for a specified public registry, repository name, and upload ID. You can optionally provide a <code>sha256</code> digest of the image layer for data validation purposes.</p> <p>When an image is pushed, the CompleteLayerUpload API is called once per each new image layer to verify that the upload has completed.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.CompleteLayerUpload",
      "responses": [
        {
          "uuid": "04148a17-d8de-4e09-8deb-02d83b96619a",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"uploadId\": \"\",\n  \"layerDigest\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d0b5f855-eec0-41c8-ae6f-58ef6d83fe6d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2654959d-bdfd-4892-82d2-e15acad2776b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "88d0caae-b89a-458b-9ea6-26bd5c4139d3",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "29e28504-6239-4c3f-9b79-65906d87f633",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "UploadNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "96808c49-3d36-421e-8420-e221c4a08f74",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "InvalidLayerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "32ef3c71-b0d5-4e14-a1d7-39572c58a672",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "LayerPartTooSmallException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "18915913-4331-41b0-96e1-c064d2d08ad6",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 486,
          "label": "LayerAlreadyExistsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "80de3df4-87a3-436b-b98b-14514d390996",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 487,
          "label": "EmptyUploadException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "dff1a242-5830-444e-b264-371db6be93eb",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 488,
          "label": "RegistryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1d139e14-29ae-4bdc-b963-925a4780b4b7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 489,
          "label": "UnsupportedCommandException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "2caeedd4-a7b2-4799-916e-a56f2f0940dc",
      "documentation": "Creates a repository in a public registry. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html\">Amazon ECR repositories</a> in the <i>Amazon Elastic Container Registry User Guide</i>.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.CreateRepository",
      "responses": [
        {
          "uuid": "eef2a56d-147e-4a41-a315-93bdef04b966",
          "body": "{\n  \"repository\": {\n    \"repositoryArn\": \"\",\n    \"registryId\": \"\",\n    \"repositoryName\": \"\",\n    \"repositoryUri\": \"\",\n    \"createdAt\": \"{{faker 'date.recent' 365}}\"\n  },\n  \"catalogData\": {\n    \"description\": \"\",\n    \"architectures\": [\n      \"\"\n    ],\n    \"operatingSystems\": [\n      \"\"\n    ],\n    \"logoUrl\": \"\",\n    \"aboutText\": \"\",\n    \"usageText\": \"\",\n    \"marketplaceCertified\": {{faker 'random.boolean'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d353f6a5-fdde-4176-8d8b-bb44b2ab09c9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c436b99b-7d71-49a0-9d2e-a6a7030b477f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "79512253-40ca-4fa0-a650-4ef4b886e1e1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidTagParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "dbac1235-4839-4d3c-ad66-1d8cfe320148",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "TooManyTagsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7d5088c7-59c6-478f-8b2b-a14dabd1c6ae",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "RepositoryAlreadyExistsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "45560c5e-67b8-4002-977d-196f5a7fbc57",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "0d817c85-7abf-431a-b1af-02cb60e174bf",
      "documentation": "Deletes a repository in a public registry. If the repository contains images, you must either delete all images in the repository or use the <code>force</code> option which deletes all images on your behalf before deleting the repository.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.DeleteRepository",
      "responses": [
        {
          "uuid": "43272561-2dc7-4b7e-a17f-5c507df6e2a9",
          "body": "{\n  \"repository\": {\n    \"repositoryArn\": \"\",\n    \"registryId\": \"\",\n    \"repositoryName\": \"\",\n    \"repositoryUri\": \"\",\n    \"createdAt\": \"{{faker 'date.recent' 365}}\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "359589d1-70fa-4aff-826a-14e2bbb09d0d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "39c0a758-8a14-4a6d-9bc7-a7bec9cb92b7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9aea9be1-8550-4cc4-84e3-945ee95e6e75",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1862158a-8c99-4004-89cc-180f92390646",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RepositoryNotEmptyException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "40102e43-3b8c-489b-967c-db5d383993f8",
      "documentation": "Deletes the repository policy associated with the specified repository.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.DeleteRepositoryPolicy",
      "responses": [
        {
          "uuid": "23511bc9-a5c7-4671-a77a-d1700450a8c9",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"policyText\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "8b664241-5a8d-4cef-982b-bd6c0edc31e5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0b263102-33df-47d8-86b7-e037644b2695",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "79589ca0-a03c-4603-9300-4d876461af60",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "dd79448b-f56c-45f6-a227-3642a112f2ef",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RepositoryPolicyNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "44fcb92d-c549-49b5-964d-f8f3687ebdcc",
      "documentation": "Returns the image tag details for a repository in a public registry.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.DescribeImageTags",
      "responses": [
        {
          "uuid": "3281ae5f-d2ac-4e6d-8bd2-90e268dcdf61",
          "body": "{\n  \"imageTagDetails\": [\n    {\n      \"imageTag\": \"\",\n      \"createdAt\": \"{{faker 'date.recent' 365}}\",\n      \"imageDetail\": {\n        \"imageDigest\": \"\",\n        \"imageSizeInBytes\": {{faker 'random.number'}},\n        \"imagePushedAt\": \"{{faker 'date.recent' 365}}\",\n        \"imageManifestMediaType\": \"\",\n        \"artifactMediaType\": \"\"\n      }\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c770fa3b-359b-4aa3-abd3-8c996dddb4d6",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b106f01b-43c8-48df-b1a9-c47c79412ba1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "55e39e20-286d-4b93-a0d2-a8f84ab59d31",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "c362920a-9782-484e-a44d-cff4f369749e",
      "documentation": "<p>Returns metadata about the images in a repository in a public registry.</p> <note> <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by <a>DescribeImages</a>.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.DescribeImages",
      "responses": [
        {
          "uuid": "216d3f38-0dcb-4e36-9dfc-3c4675b00c17",
          "body": "{\n  \"imageDetails\": [\n    {\n      \"registryId\": \"\",\n      \"repositoryName\": \"\",\n      \"imageDigest\": \"\",\n      \"imageTags\": [\n        \"\"\n      ],\n      \"imageSizeInBytes\": {{faker 'random.number'}},\n      \"imagePushedAt\": \"{{faker 'date.recent' 365}}\",\n      \"imageManifestMediaType\": \"\",\n      \"artifactMediaType\": \"\"\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c8e93584-bda1-44f9-b70c-c249cb3193fe",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "bec6d9d5-e66c-4651-89f3-e79e0b5d2668",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0eb84b8a-a706-44f1-9f1c-bfa57b80391e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "919c1d6b-f954-408d-b94e-b6fe03a84f4e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ImageNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "b22c6127-5193-4fc0-a79f-139375de37f8",
      "documentation": "Returns details for a public registry.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.DescribeRegistries",
      "responses": [
        {
          "uuid": "1c289f29-6448-458f-a441-e601df22a94c",
          "body": "{\n  \"registries\": [\n    {\n      \"registryId\": \"\",\n      \"registryArn\": \"\",\n      \"registryUri\": \"\",\n      \"verified\": {{faker 'random.boolean'}},\n      \"aliases\": [\n        {\n          \"name\": \"\",\n          \"status\": \"\",\n          \"primaryRegistryAlias\": {{faker 'random.boolean'}},\n          \"defaultRegistryAlias\": {{faker 'random.boolean'}}\n        }\n      ]\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e2053391-3b00-440e-a8a4-19d60211e61f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a293e003-bdcf-4cc7-9d52-72defe13b98a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "UnsupportedCommandException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ca2e5e96-46ef-4ea1-a969-4b3156eeef0c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "41d10b32-e5e3-4023-97ab-5c45dd08fb8b",
      "documentation": "Describes repositories in a public registry.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.DescribeRepositories",
      "responses": [
        {
          "uuid": "ee675b48-f401-4e96-b328-8d75187a8d54",
          "body": "{\n  \"repositories\": [\n    {\n      \"repositoryArn\": \"\",\n      \"registryId\": \"\",\n      \"repositoryName\": \"\",\n      \"repositoryUri\": \"\",\n      \"createdAt\": \"{{faker 'date.recent' 365}}\"\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "57089803-5b43-40af-9313-9bb8d2419d9d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "46e4769c-835c-4a33-8622-85548445bc27",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "70507da8-7bdf-4bf9-b352-4ecbeef9db41",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "f1b80afc-f55b-468e-8b19-a5a6e22eb0cf",
      "documentation": "Retrieves an authorization token. An authorization token represents your IAM authentication credentials and can be used to access any Amazon ECR registry that your IAM principal has access to. The authorization token is valid for 12 hours. This API requires the <code>ecr-public:GetAuthorizationToken</code> and <code>sts:GetServiceBearerToken</code> permissions.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.GetAuthorizationToken",
      "responses": [
        {
          "uuid": "0ec64aa9-f982-4898-a830-a33d9e24c0a6",
          "body": "{\n  \"authorizationData\": {\n    \"authorizationToken\": \"\",\n    \"expiresAt\": \"{{faker 'date.recent' 365}}\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c7a1bdbb-12df-4bf2-832e-dcfd44e6e0c0",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "037f71a3-f9fa-4491-ba69-4d9be39b1f70",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "e8664820-489a-49a8-b852-ab19ec7771c0",
      "documentation": "Retrieves catalog metadata for a public registry.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.GetRegistryCatalogData",
      "responses": [
        {
          "uuid": "e949de75-32c8-459b-b267-c6433d8fcb5f",
          "body": "{\n  \"registryCatalogData\": {\n    \"displayName\": \"\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7be4945a-825f-47cb-8e45-1a14de5a82d0",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3b1b0e8c-f807-4fd8-933b-02bd21f5f5a0",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "UnsupportedCommandException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "35214120-2ebb-45f8-9b95-9ef739d655be",
      "documentation": "Retrieve catalog metadata for a repository in a public registry. This metadata is displayed publicly in the Amazon ECR Public Gallery.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.GetRepositoryCatalogData",
      "responses": [
        {
          "uuid": "13dad512-a306-4b2c-98a9-063fed2634db",
          "body": "{\n  \"catalogData\": {\n    \"description\": \"\",\n    \"architectures\": [\n      \"\"\n    ],\n    \"operatingSystems\": [\n      \"\"\n    ],\n    \"logoUrl\": \"\",\n    \"aboutText\": \"\",\n    \"usageText\": \"\",\n    \"marketplaceCertified\": {{faker 'random.boolean'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "6d02882c-6379-48f8-9c69-9744058cf736",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5d093fc1-170c-45ec-9923-f56da281755c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c9cfeec2-13c4-456c-bbba-ddfae6249e88",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "bd2ef1de-059e-4275-8ebe-a841ce557c4f",
      "documentation": "Retrieves the repository policy for the specified repository.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.GetRepositoryPolicy",
      "responses": [
        {
          "uuid": "40d8c9f3-40bc-43d4-8c6d-60d2da04560b",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"policyText\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3d23547e-2a9d-416a-9f23-1999413c0277",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5e91b3be-df2f-4385-a703-ba3c025a102b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5667e8d9-a845-4892-b201-07f4027267d4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e6750b33-e98c-41b2-bd62-fa39e93dbb02",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RepositoryPolicyNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "db9db393-bbd1-441a-ada6-e33d87670416",
      "documentation": "<p>Notifies Amazon ECR that you intend to upload an image layer.</p> <p>When an image is pushed, the InitiateLayerUpload API is called once per image layer that has not already been uploaded. Whether or not an image layer has been uploaded is determined by the BatchCheckLayerAvailability API action.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.InitiateLayerUpload",
      "responses": [
        {
          "uuid": "79037321-a1ab-4b47-8ee7-c9d5ee050274",
          "body": "{\n  \"uploadId\": \"\",\n  \"partSize\": {{faker 'random.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "fa91c0e2-9eb6-49ff-bf3b-f82e28834967",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "52023068-e0ad-4cef-b707-70ad753b48eb",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "23494769-6cd9-47b5-a023-d67b9caa1938",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "70b7d7c2-2293-4497-9c16-4bd703429fc1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RegistryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c6887b2d-59df-43c5-8390-7da81f93fedb",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "UnsupportedCommandException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "ff5f4b0f-1276-4b50-918f-c46c08018aaf",
      "documentation": "List the tags for an Amazon ECR Public resource.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.ListTagsForResource",
      "responses": [
        {
          "uuid": "13e09ae3-25c8-48d8-87f0-e6bb0d0e6edd",
          "body": "{\n  \"tags\": [\n    {\n      \"Key\": \"\",\n      \"Value\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ecc3ff2f-923d-442d-8223-93b3a90d52e9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "631f0461-5829-4671-849c-6e9dec943df9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1aff801e-860b-452c-8eac-d38490aeb616",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "849c303c-57bb-413b-8e27-0a90bc0a8a80",
      "documentation": "<p>Creates or updates the image manifest and tags associated with an image.</p> <p>When an image is pushed and all new image layers have been uploaded, the PutImage API is called once to create or update the image manifest and the tags associated with the image.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.PutImage",
      "responses": [
        {
          "uuid": "a39a809e-9082-4c36-9b68-e915006647aa",
          "body": "{\n  \"image\": {\n    \"registryId\": \"\",\n    \"repositoryName\": \"\",\n    \"imageId\": {\n      \"imageDigest\": \"\",\n      \"imageTag\": \"\"\n    },\n    \"imageManifest\": \"\",\n    \"imageManifestMediaType\": \"\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1c47baf3-1d08-4f3e-ba68-d746745886b8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "4d8900c6-bebc-4102-845f-9f7c5a9a06a8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1192cbe1-1293-482c-91fd-dc47aa45f516",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "710a1dc7-1c0f-4190-a151-2bb2ab7453f8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ImageAlreadyExistsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b27fcad5-c4b3-45a9-9107-5cb27731532d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "LayersNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "93a40e59-e523-4b3f-9202-8e26d0241f0a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "ReferencedImagesNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "4831cca9-ea2f-43ee-b5be-d028f59e49f6",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 486,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ff78a041-f4c3-478a-b696-b32ac39da80a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 487,
          "label": "ImageTagAlreadyExistsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1360ed49-ae78-4c2a-a13a-fbed0b612428",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 488,
          "label": "ImageDigestDoesNotMatchException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2095a615-6a6e-4ca0-8f17-1e37ccc1a52d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 489,
          "label": "RegistryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d5c9659d-dad6-4d33-92b0-ce1c3722b65a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 490,
          "label": "UnsupportedCommandException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "f2c12839-104b-4fdf-ab9d-4ad700d1cf21",
      "documentation": "Create or updates the catalog data for a public registry.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.PutRegistryCatalogData",
      "responses": [
        {
          "uuid": "08435944-c9fa-4503-91c9-a80f9de0ccf0",
          "body": "{\n  \"registryCatalogData\": {\n    \"displayName\": \"\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d6ae1a64-dfbf-423b-a875-f88d7a9882c6",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "8a7e4bfe-a2b2-4358-ae43-b9078490a371",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "23e64f88-e53e-4c78-93e9-eb56501fac36",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "UnsupportedCommandException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "517ce22e-29f7-4011-b5c7-2b75b533f820",
      "documentation": "Creates or updates the catalog data for a repository in a public registry.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.PutRepositoryCatalogData",
      "responses": [
        {
          "uuid": "b7e42d9a-bf4d-433b-b82d-279e57491ee3",
          "body": "{\n  \"catalogData\": {\n    \"description\": \"\",\n    \"architectures\": [\n      \"\"\n    ],\n    \"operatingSystems\": [\n      \"\"\n    ],\n    \"logoUrl\": \"\",\n    \"aboutText\": \"\",\n    \"usageText\": \"\",\n    \"marketplaceCertified\": {{faker 'random.boolean'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a12fe0a5-c714-455c-aed7-ad04d78e65e8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "06c4d3f9-689a-4422-867e-ddf7b1c3c1b3",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "93a12531-753b-42b0-8207-8ea5337bb0d7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "6f324423-1abb-40bc-bf10-52afd9503718",
      "documentation": "Applies a repository policy to the specified public repository to control access permissions. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policies.html\">Amazon ECR Repository Policies</a> in the <i>Amazon Elastic Container Registry User Guide</i>.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.SetRepositoryPolicy",
      "responses": [
        {
          "uuid": "fd1d92e3-9d06-4e70-b8e4-192a1c8e4c0a",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"policyText\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a73081b1-f613-4428-96ce-3da724429c22",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "90f99aad-1d42-4827-b01c-779eebec80de",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "6146090b-7317-4f98-bef5-0892ffbbdab8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "5b35a291-875f-4f40-bb64-3015b8cad289",
      "documentation": "Associates the specified tags to a resource with the specified <code>resourceArn</code>. If existing tags on a resource are not specified in the request parameters, they are not changed. When a resource is deleted, the tags associated with that resource are deleted as well.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.TagResource",
      "responses": [
        {
          "uuid": "6c541655-2f20-44f4-88a4-53d03de3a7e8",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5987e518-b169-44e2-b07c-de2274d8ff36",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9dc581b9-0fd3-4d84-b325-e015b0d44cae",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidTagParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7dbd8ba0-b416-401a-badd-d5121e7505a2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "TooManyTagsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0b18364d-aa93-4f1a-9915-f059a0720953",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a9d2a7a3-dcce-4ecc-ac28-2d2a5381d140",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "5089c2aa-971b-4f34-b248-266539fdc7f0",
      "documentation": "Deletes specified tags from a resource.",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.UntagResource",
      "responses": [
        {
          "uuid": "09102932-29db-4e76-ac78-e4db028bbeed",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "51378d0c-d4ba-4020-868d-60a9f6524eef",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f7cc149a-4a91-4af1-ae46-c9032ba25b8f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidTagParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2f1e6204-ba01-46aa-9cb9-c33e339bb072",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "TooManyTagsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "67fd83b0-9bf1-44d6-a7fd-e16905282b1a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "aa512d0c-7650-4b01-956f-ad5bb1ea7f74",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "0f633793-c8fa-43a9-a11b-3a247cedd87d",
      "documentation": "<p>Uploads an image layer part to Amazon ECR.</p> <p>When an image is pushed, each new image layer is uploaded in parts. The maximum size of each image layer part can be 20971520 bytes (or about 20MB). The UploadLayerPart API is called once per each new image layer part.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=SpencerFrontendService.UploadLayerPart",
      "responses": [
        {
          "uuid": "f37e3fd7-e05a-4a7a-ae9b-65169448827f",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"uploadId\": \"\",\n  \"lastByteReceived\": {{faker 'random.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2a83e3c5-abdd-45f2-a800-e162b30e5e6c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0be79f01-0c2e-4a75-b7e4-8d8bc98c836d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b44a2965-3f3e-47b5-9d0b-824574143a82",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidLayerPartException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7b1a6547-d622-45c0-97b7-132071e531eb",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ff8ececd-693f-41d8-85f0-6782589fd5f9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "UploadNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c1daa35c-8968-447a-b593-050eca73171e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0192c573-aff7-432e-a794-e03733ac8ceb",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 486,
          "label": "RegistryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7cd5a626-ff71-4464-8c79-7e706f881fcd",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 487,
          "label": "UnsupportedCommandException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    }
  ],
  "proxyMode": false,
  "proxyHost": "",
  "proxyRemovePrefix": false,
  "tlsOptions": {
    "enabled": false,
    "type": "CERT",
    "pfxPath": "",
    "certPath": "",
    "keyPath": "",
    "caPath": "",
    "passphrase": ""
  },
  "cors": true,
  "headers": [],
  "proxyReqHeaders": [
    {
      "key": "",
      "value": ""
    }
  ],
  "proxyResHeaders": [
    {
      "key": "",
      "value": ""
    }
  ]
}