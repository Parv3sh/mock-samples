{
  "uuid": "d3c13adb-e03a-4b1c-9360-c57d26f3ef37",
  "lastMigration": 19,
  "name": "Amazon EC2 Container Registry",
  "endpointPrefix": "",
  "latency": 0,
  "port": 3000,
  "hostname": "0.0.0.0",
  "routes": [
    {
      "uuid": "209e57f0-1bad-4f14-9ae5-9a5168133d53",
      "documentation": "<p>Checks the availability of one or more image layers in a repository.</p> <p>When an image is pushed to a repository, each image layer is checked to verify if it has been uploaded before. If it has been uploaded, then the image layer is skipped.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchCheckLayerAvailability",
      "responses": [
        {
          "uuid": "f6edfa92-a1a7-4331-a66c-74cd5650dd23",
          "body": "{\n  \"layers\": [\n    {\n      \"layerDigest\": \"\",\n      \"layerAvailability\": \"\",\n      \"layerSize\": {{faker 'random.number'}},\n      \"mediaType\": \"\"\n    }\n  ],\n  \"failures\": [\n    {\n      \"layerDigest\": \"\",\n      \"failureCode\": \"\",\n      \"failureReason\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "59d14578-d7fe-4e5d-958c-25cf5ea72cd2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "eb53ad17-45e6-4737-9d7f-0d3e6467bccb",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b3c9717e-6784-42eb-9920-90a9f5388070",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "6d1d27c5-751b-4e08-be4d-3bcca7b228a8",
      "documentation": "<p>Deletes a list of specified images within a repository. Images are specified with either an <code>imageTag</code> or <code>imageDigest</code>.</p> <p>You can remove a tag from an image by specifying the image's tag in your request. When you remove the last tag from an image, the image is deleted from your repository.</p> <p>You can completely delete an image (and all of its tags) by specifying the image's digest in your request.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchDeleteImage",
      "responses": [
        {
          "uuid": "37c69001-9f94-4aed-a3b0-71a77942aeeb",
          "body": "{\n  \"failures\": [],\n  \"imageIds\": [\n    {\n      \"imageDigest\": \"sha256:examplee6d1e504117a17000003d3753086354a38375961f2e665416ef4b1b2f\",\n      \"imageTag\": \"precise\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "76b66fdd-0ccc-42cb-9e5a-9aaecda1b982",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "47b9a823-64e3-4044-beca-7c3d2e761c25",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "4b14c951-0f15-4661-b267-b20de8f64a75",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "1e863370-3500-4310-b5ed-e7e3ff868224",
      "documentation": "<p>Gets detailed information for an image. Images are specified with either an <code>imageTag</code> or <code>imageDigest</code>.</p> <p>When an image is pulled, the BatchGetImage API is called once to retrieve the image manifest.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchGetImage",
      "responses": [
        {
          "uuid": "638958e4-34d0-4ff2-aaf5-067f6ba6207e",
          "body": "{\n  \"failures\": [],\n  \"images\": [\n    {\n      \"imageId\": {\n        \"imageDigest\": \"sha256:example76bdff6d83a09ba2a818f0d00000063724a9ac3ba5019c56f74ebf42a\",\n        \"imageTag\": \"precise\"\n      },\n      \"imageManifest\": \"{\\n \\\"schemaVersion\\\": 1,\\n \\\"name\\\": \\\"ubuntu\\\",\\n \\\"tag\\\": \\\"precise\\\",\\n...\",\n      \"registryId\": \"244698725403\",\n      \"repositoryName\": \"ubuntu\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b15156dd-8088-479a-8a8d-af26e4449270",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "70158d55-ab86-4826-a736-ab983e5f5b4b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "18f1dbed-936e-44f7-ad38-d94fb480f10d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "c948a373-51e4-4c14-830b-a0e86dfeef8c",
      "documentation": "<p>Informs Amazon ECR that the image layer upload has completed for a specified registry, repository name, and upload ID. You can optionally provide a <code>sha256</code> digest of the image layer for data validation purposes.</p> <p>When an image is pushed, the CompleteLayerUpload API is called once per each new image layer to verify that the upload has completed.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.CompleteLayerUpload",
      "responses": [
        {
          "uuid": "6fa3205a-84a9-4f4d-905a-144c307c67ae",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"uploadId\": \"\",\n  \"layerDigest\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "364b27d5-f4e9-495f-92c2-673f855e36ea",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "90a513dd-0c74-4f8c-810a-eb312190c48b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "44262fa2-72ba-4b04-939c-d0c2a61ea8e8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2018d97e-9e59-4bb8-89f5-c17672e501de",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "UploadNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "bd2013dc-af7d-407b-9098-e4c8337cd2ba",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "InvalidLayerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9135d5a3-e1a4-4a5c-99ca-748fcc5a6f39",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "LayerPartTooSmallException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a19a0303-d269-4f7f-a63b-6594c3870308",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 486,
          "label": "LayerAlreadyExistsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a719e1bf-1fd5-406f-87a7-aaa77c8621d3",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 487,
          "label": "EmptyUploadException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5464afac-514a-4c2a-b331-468fa738d90d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 488,
          "label": "KmsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "8e7dce41-a5a4-4e86-b4d1-6272b6d2efd6",
      "documentation": "Creates a repository. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html\">Amazon ECR repositories</a> in the <i>Amazon Elastic Container Registry User Guide</i>.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.CreateRepository",
      "responses": [
        {
          "uuid": "d48a6d1b-01ab-41fe-b499-3da15f2a7292",
          "body": "{\n  \"repository\": {\n    \"registryId\": 12345678901,\n    \"repositoryArn\": \"arn:aws:ecr:us-west-2:012345678901:repository/project-a/nginx-web-app\",\n    \"repositoryName\": \"project-a/nginx-web-app\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9afc7267-9b81-4b6e-a98a-dd70977f0347",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "4fe802ba-2b68-46bc-b418-827b20d70bb8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2746f3b9-6c7f-45c2-b8db-3951a62c2bb5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidTagParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7925b45a-3e61-4a62-9bc8-89bb163a756a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "TooManyTagsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d81807d1-ec83-4a56-a8f2-eebad81f16c6",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "RepositoryAlreadyExistsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "03f0ae27-005b-4c68-b5a9-9ad28e5b0489",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2776d3dc-efe9-42b6-9d9c-9b00943eb548",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 486,
          "label": "KmsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "a0f336fb-d8ec-41b2-935f-cedb3f1e10d8",
      "documentation": "Deletes the lifecycle policy associated with the specified repository.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteLifecyclePolicy",
      "responses": [
        {
          "uuid": "95cbc0b9-38aa-4c2f-a6ef-dbecf43d85e4",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"lifecyclePolicyText\": \"\",\n  \"lastEvaluatedAt\": \"{{faker 'date.recent' 365}}\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1d0ed282-265a-4fc9-bbc7-fc79eff6959d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a0f41507-7561-42df-9bce-d8180f31c3bc",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "cdf55566-c68b-463b-9f08-fdb59eb4f049",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "28ffe278-3d8e-49fa-8d2c-e541ed06f980",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "LifecyclePolicyNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "21a8728b-d3c6-4509-bc58-f8247c6a0211",
      "documentation": "Deletes the registry permissions policy.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRegistryPolicy",
      "responses": [
        {
          "uuid": "6b5868b1-2815-4787-ac16-d9940e6fe832",
          "body": "{\n  \"registryId\": \"\",\n  \"policyText\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7e58a1ba-4364-49f9-bd79-a549f45d9563",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0aa622c7-ba90-4747-8b31-b98446f58698",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c67c743f-702b-4aa8-bec5-1bf045438273",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RegistryPolicyNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "58568fb5-7136-4f03-b915-a69b5e59daeb",
      "documentation": "Deletes a repository. If the repository contains images, you must either delete all images in the repository or use the <code>force</code> option to delete the repository.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRepository",
      "responses": [
        {
          "uuid": "cddd8696-e1a6-4345-943e-35664ee86220",
          "body": "{\n  \"repository\": {\n    \"registryId\": 12345678901,\n    \"repositoryArn\": \"arn:aws:ecr:us-west-2:012345678901:repository/ubuntu\",\n    \"repositoryName\": \"ubuntu\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0edc2645-63f2-46f5-b814-10ac06602f84",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "57e920cc-3e3e-4ea7-b53f-5190ee3b7e29",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "73ba0e20-d0ce-42c3-bc93-c741ca6624ea",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c81c4fe5-9f8c-451b-a848-64212bc1a435",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RepositoryNotEmptyException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2f67d34c-9139-4f3d-a71f-542a8c71bfe3",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "KmsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "545c16c2-1290-456b-8465-5e6285e0bfbc",
      "documentation": "Deletes the repository policy associated with the specified repository.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRepositoryPolicy",
      "responses": [
        {
          "uuid": "1737c506-c0ef-480c-bf65-9b59d9fcecdc",
          "body": "{\n  \"policyText\": \"{ ... }\",\n  \"registryId\": 12345678901,\n  \"repositoryName\": \"ubuntu\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0246dd0f-f91e-4ef0-911c-7f15cea198bc",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "75a6390e-f7cc-48c0-95e9-6374d5eb318a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "de4ba57b-35b3-4aed-b713-35f8d967cef8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c68ff941-714d-4633-b5ab-10df85edd971",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RepositoryPolicyNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "4280236f-a0de-46d3-ae71-344b62edd75e",
      "documentation": "Returns the scan findings for the specified image.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeImageScanFindings",
      "responses": [
        {
          "uuid": "d610919d-5ebe-40a4-abe8-f43b2071c056",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"imageId\": {\n    \"imageDigest\": \"\",\n    \"imageTag\": \"\"\n  },\n  \"imageScanStatus\": {\n    \"status\": \"\",\n    \"description\": \"\"\n  },\n  \"imageScanFindings\": {\n    \"imageScanCompletedAt\": \"{{faker 'date.recent' 365}}\",\n    \"vulnerabilitySourceUpdatedAt\": \"{{faker 'date.recent' 365}}\",\n    \"findings\": [\n      {\n        \"name\": \"\",\n        \"description\": \"\",\n        \"uri\": \"\",\n        \"severity\": \"\",\n        \"attributes\": [\n          {\n            \"key\": \"\",\n            \"value\": \"\"\n          }\n        ]\n      }\n    ],\n    \"findingSeverityCounts\": {}\n  },\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a2a4f295-a981-42ca-b359-32e36d3be5d2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "fcd37166-5b5a-42df-9b1b-ba16838b1817",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ddfe70ba-1786-4efc-8613-b9bd8d6808dd",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c3af56f4-62e9-4bcb-b086-d2280fb7d455",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ImageNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "4ad67eb9-b614-4b39-bbce-10749c7aee0c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "ScanNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "0bbb7c0a-2b56-4d60-9c50-b885ce5c2470",
      "documentation": "<p>Returns metadata about the images in a repository.</p> <note> <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by <a>DescribeImages</a>.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeImages",
      "responses": [
        {
          "uuid": "16fea6f0-ea2d-4060-81ee-d8c70e633856",
          "body": "{\n  \"imageDetails\": [\n    {\n      \"registryId\": \"\",\n      \"repositoryName\": \"\",\n      \"imageDigest\": \"\",\n      \"imageTags\": [\n        \"\"\n      ],\n      \"imageSizeInBytes\": {{faker 'random.number'}},\n      \"imagePushedAt\": \"{{faker 'date.recent' 365}}\",\n      \"imageScanStatus\": {\n        \"status\": \"\",\n        \"description\": \"\"\n      },\n      \"imageScanFindingsSummary\": {\n        \"imageScanCompletedAt\": \"{{faker 'date.recent' 365}}\",\n        \"vulnerabilitySourceUpdatedAt\": \"{{faker 'date.recent' 365}}\",\n        \"findingSeverityCounts\": {}\n      },\n      \"imageManifestMediaType\": \"\",\n      \"artifactMediaType\": \"\"\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "8db808bf-574d-429b-8b60-d5a8b6f7f240",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d1b8a750-41cd-42ef-832a-724d1654e53c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b237fbe5-6dda-4146-afde-5f57733fa0aa",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e16ff70c-4909-467d-81c9-b9e2887d98b2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ImageNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "e76980cf-dc71-4e48-816a-660fafd0c0c9",
      "documentation": "Describes the settings for a registry. The replication configuration for a repository can be created or updated with the <a>PutReplicationConfiguration</a> API action.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeRegistry",
      "responses": [
        {
          "uuid": "ab11af77-b267-4584-84d7-3e1d8ca90e34",
          "body": "{\n  \"registryId\": \"\",\n  \"replicationConfiguration\": {\n    \"rules\": [\n      {\n        \"destinations\": [\n          {\n            \"region\": \"\",\n            \"registryId\": \"\"\n          }\n        ]\n      }\n    ]\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d0fd2ceb-4642-47b8-a51d-31f5c3fc9d6e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "06f86fde-8bf2-40d7-bb3c-a0d2a527dd41",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5eb53e34-aefc-4015-9e3f-a9c7ae7994ea",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "ValidationException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "5f9118ee-0bf4-4258-ad31-0f3fd10c35c7",
      "documentation": "Describes image repositories in a registry.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeRepositories",
      "responses": [
        {
          "uuid": "90925ed1-f82f-44a9-a89c-62af1babe226",
          "body": "{\n  \"repositories\": [\n    {\n      \"registryId\": 12345678910,\n      \"repositoryArn\": \"arn:aws:ecr:us-west-2:012345678910:repository/ubuntu\",\n      \"repositoryName\": \"ubuntu\"\n    },\n    {\n      \"registryId\": 12345678910,\n      \"repositoryArn\": \"arn:aws:ecr:us-west-2:012345678910:repository/test\",\n      \"repositoryName\": \"test\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1b9909bf-af16-44fd-9040-c76a8a2d9d45",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b4b63f03-61ce-4723-a729-e36cf87c6aa1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "eba48918-241f-4c53-a94f-029911a8e62e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "4975e0b7-789f-4bfc-ade7-2b6c0371d9d8",
      "documentation": "<p>Retrieves an authorization token. An authorization token represents your IAM authentication credentials and can be used to access any Amazon ECR registry that your IAM principal has access to. The authorization token is valid for 12 hours.</p> <p>The <code>authorizationToken</code> returned is a base64 encoded string that can be decoded and used in a <code>docker login</code> command to authenticate to a registry. The CLI offers an <code>get-login-password</code> command that simplifies the login process. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html#registry_auth\">Registry authentication</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetAuthorizationToken",
      "responses": [
        {
          "uuid": "76511435-337c-4d0d-b390-b8a1eb1ef41e",
          "body": "{\n  \"authorizationData\": [\n    {\n      \"authorizationToken\": \"QVdTOkN...\",\n      \"expiresAt\": \"1470951892432\",\n      \"proxyEndpoint\": \"https://012345678901.dkr.ecr.us-west-2.amazonaws.com\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "8e7bb2c2-a38f-4a38-a7e0-842b107791dc",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f4a6a4ff-2656-49dc-9756-26ec98eb732b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "40f0abb6-2470-4a89-8d1b-d28f725048f1",
      "documentation": "<p>Retrieves the pre-signed Amazon S3 download URL corresponding to an image layer. You can only get URLs for image layers that are referenced in an image.</p> <p>When an image is pulled, the GetDownloadUrlForLayer API is called once per image layer that is not already cached.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetDownloadUrlForLayer",
      "responses": [
        {
          "uuid": "7b4f691b-683b-46d6-868e-5a8e4c690a3b",
          "body": "{\n  \"downloadUrl\": \"\",\n  \"layerDigest\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d191f46b-eb37-444b-8d26-2e2ff06e0d98",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d974f4c4-1790-492d-9c62-5c09f7330c3c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "df862b7e-3c20-4731-9e35-88003c712bbe",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "LayersNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c7115c52-f7c4-4e65-be30-7accf4553091",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "LayerInaccessibleException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a0ac1e56-6878-4856-a7e1-91267d96af70",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "7448ed04-9b71-4ef8-b890-fa70053cde78",
      "documentation": "Retrieves the lifecycle policy for the specified repository.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicy",
      "responses": [
        {
          "uuid": "aec8eff0-89d0-4089-a4b4-1529ee5474ef",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"lifecyclePolicyText\": \"\",\n  \"lastEvaluatedAt\": \"{{faker 'date.recent' 365}}\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "df10f05d-0f1d-4eee-ae30-154b68fb1e16",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "084cccf9-42a9-4afd-a4e5-1d16e6e32113",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "73202700-9912-4784-a055-a6bf6bdbdec1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "175d3823-e35c-4bbe-9dfb-0b2328168669",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "LifecyclePolicyNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "7c7d4a25-3644-433b-b1b2-181643c2b2e6",
      "documentation": "Retrieves the results of the lifecycle policy preview request for the specified repository.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicyPreview",
      "responses": [
        {
          "uuid": "c919c508-119c-493a-8e9f-655512127476",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"lifecyclePolicyText\": \"\",\n  \"status\": \"\",\n  \"nextToken\": \"\",\n  \"previewResults\": [\n    {\n      \"imageTags\": [\n        \"\"\n      ],\n      \"imageDigest\": \"\",\n      \"imagePushedAt\": \"{{faker 'date.recent' 365}}\",\n      \"action\": {\n        \"type\": \"\"\n      },\n      \"appliedRulePriority\": {{faker 'random.number'}}\n    }\n  ],\n  \"summary\": {\n    \"expiringImageTotalCount\": {{faker 'random.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "da306526-9f8b-4bdb-a035-708b4f3e966e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7007587c-ea82-48fb-ac72-eda8c9276488",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1cfa1a26-27cc-418d-ad0f-4e4f6ed255e0",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e044e5d8-0be7-486f-8552-fae760b14762",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "LifecyclePolicyPreviewNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "9a2d5b6c-494a-498f-808b-e4ffe770db31",
      "documentation": "Retrieves the permissions policy for a registry.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetRegistryPolicy",
      "responses": [
        {
          "uuid": "22969516-3052-4a7e-9a8f-5766e18778d3",
          "body": "{\n  \"registryId\": \"\",\n  \"policyText\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c638c41e-8c91-4574-8126-91059ca4d376",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "90c7d7e6-2526-4d1b-89c9-7eaba8e9651e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "fadb0db8-9ece-4f9a-9f35-5c2144cfa7e2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RegistryPolicyNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "5cc70766-10dd-4d01-88a1-a1f28912c6ec",
      "documentation": "Retrieves the repository policy for the specified repository.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetRepositoryPolicy",
      "responses": [
        {
          "uuid": "2edbf588-185c-4bac-b4f1-3d15a0cb8797",
          "body": "{\n  \"policyText\": \"{\\n  \\\"Version\\\" : \\\"2008-10-17\\\",\\n  \\\"Statement\\\" : [ {\\n    \\\"Sid\\\" : \\\"new statement\\\",\\n    \\\"Effect\\\" : \\\"Allow\\\",\\n    \\\"Principal\\\" : {\\n     \\\"AWS\\\" : \\\"arn:aws:iam::012345678901:role/CodeDeployDemo\\\"\\n    },\\n\\\"Action\\\" : [ \\\"ecr:GetDownloadUrlForLayer\\\", \\\"ecr:BatchGetImage\\\", \\\"ecr:BatchCheckLayerAvailability\\\" ]\\n } ]\\n}\",\n  \"registryId\": 12345678901,\n  \"repositoryName\": \"ubuntu\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "dfb3c52f-5c62-4f88-a677-3e40eebcd51c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f3b12f90-bbc3-4a19-ade7-7667f2e09f5e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "6b151763-c3d5-413f-be72-bc9202c6590e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "fff1c8f3-50c8-49f7-88df-ca62eb31e524",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RepositoryPolicyNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "b26d0a53-c2b0-44dc-a4fd-807cc7352859",
      "documentation": "<p>Notifies Amazon ECR that you intend to upload an image layer.</p> <p>When an image is pushed, the InitiateLayerUpload API is called once per image layer that has not already been uploaded. Whether or not an image layer has been uploaded is determined by the BatchCheckLayerAvailability API action.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.InitiateLayerUpload",
      "responses": [
        {
          "uuid": "084b04fd-b019-48d3-a257-7ba25d0e91be",
          "body": "{\n  \"uploadId\": \"\",\n  \"partSize\": {{faker 'random.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "6df1bb4d-a92b-4a91-831c-3b159471146d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "4eaabe60-0cf7-452e-8484-5c4a6fa4f09a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "42840a55-710b-4fab-bc5f-88fe49fa3c85",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "69f92d83-cb3c-4d67-968a-e560ad291ec4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "KmsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "d52db5db-0b6c-4849-8bec-005b5d6d3aaf",
      "documentation": "<p>Lists all the image IDs for the specified repository.</p> <p>You can filter images based on whether or not they are tagged by using the <code>tagStatus</code> filter and specifying either <code>TAGGED</code>, <code>UNTAGGED</code> or <code>ANY</code>. For example, you can filter your results to return only <code>UNTAGGED</code> images and then pipe that result to a <a>BatchDeleteImage</a> operation to delete them. Or, you can filter your results to return only <code>TAGGED</code> images to list all of the tags in your repository.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.ListImages",
      "responses": [
        {
          "uuid": "1078ccf7-991d-44ae-81e7-4b1f18ffe8b8",
          "body": "{\n  \"imageIds\": [\n    {\n      \"imageDigest\": \"sha256:764f63476bdff6d83a09ba2a818f0d35757063724a9ac3ba5019c56f74ebf42a\",\n      \"imageTag\": \"precise\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "bacf3372-487a-45cf-83b0-600cdda4ffdd",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "cd370751-4f2f-473f-bc42-8d649a00dcb8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ba1b739c-60a8-475d-9827-0492c5e827b8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "ce583eaf-d05e-41a1-91ae-b45481eb0eac",
      "documentation": "List the tags for an Amazon ECR resource.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.ListTagsForResource",
      "responses": [
        {
          "uuid": "a3299f52-3de2-43dc-9d2f-39863090b2e4",
          "body": "{\n  \"tags\": [\n    {\n      \"Key\": \"\",\n      \"Value\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7067e747-021b-4069-b683-1560b25f14a3",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3a647c60-0033-4960-ba01-e8261ba89723",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b581aa6c-560f-4b22-b53f-e4eba7d24267",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "1684096a-bbf8-44ff-a3b4-28955a67b7b9",
      "documentation": "<p>Creates or updates the image manifest and tags associated with an image.</p> <p>When an image is pushed and all new image layers have been uploaded, the PutImage API is called once to create or update the image manifest and the tags associated with the image.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImage",
      "responses": [
        {
          "uuid": "4fe1c594-2170-4516-aa11-c50b130c802c",
          "body": "{\n  \"image\": {\n    \"registryId\": \"\",\n    \"repositoryName\": \"\",\n    \"imageId\": {\n      \"imageDigest\": \"\",\n      \"imageTag\": \"\"\n    },\n    \"imageManifest\": \"\",\n    \"imageManifestMediaType\": \"\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "424284dd-67e6-4922-a9ce-4a58f4ea8b8a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "59561a04-58ad-454a-a1f1-4fa96a6abd82",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b194ec2b-5ac1-4390-866c-0839ea620552",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e50a3773-7f04-4ca0-8ed1-18210307ec89",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ImageAlreadyExistsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "33e5737e-5dc8-406f-a6e8-a35423892e03",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "LayersNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "cbdad6d9-b07c-4cf1-99b5-640b83b45e25",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "ReferencedImagesNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ab6e0666-696a-4298-a846-5a4784264940",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 486,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "8780d2bb-a385-407d-ac1c-d6f33ca68220",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 487,
          "label": "ImageTagAlreadyExistsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "99381e69-018a-4e85-ba7c-11d21cbd15b7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 488,
          "label": "ImageDigestDoesNotMatchException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "37ff1677-b418-4cc3-9a92-d163fdf714ff",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 489,
          "label": "KmsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "0c6da71c-4c9e-4783-984f-e1f4951b31a4",
      "documentation": "Updates the image scanning configuration for the specified repository.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImageScanningConfiguration",
      "responses": [
        {
          "uuid": "d0b6992f-10a5-41c4-8a99-74f3f5c14437",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"imageScanningConfiguration\": {\n    \"scanOnPush\": {{faker 'random.boolean'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e274c035-89bb-4e89-a941-192f57a581c1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a55bd40f-779e-4212-93c2-21336ff4214b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "39f2063a-95fe-4695-8cad-19f6b53a6b48",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "c9c6a18d-6541-47de-86cc-eb2105ec7ee7",
      "documentation": "Updates the image tag mutability settings for the specified repository. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-tag-mutability.html\">Image tag mutability</a> in the <i>Amazon Elastic Container Registry User Guide</i>.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImageTagMutability",
      "responses": [
        {
          "uuid": "cffd1da1-3355-44ff-8c79-efb7cd704c0a",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"imageTagMutability\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c1abaa02-c52e-4ebf-bc8a-fa6e7b185bf9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ed8c6484-ae4d-4753-9a66-4c73f42693a8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "4b7c2920-c96c-4f69-aadf-a5f76ed4737f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "b6520388-6a52-4c14-89bd-5d0318a3afe8",
      "documentation": "Creates or updates the lifecycle policy for the specified repository. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html\">Lifecycle policy template</a>.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutLifecyclePolicy",
      "responses": [
        {
          "uuid": "9b7c63fc-a5ce-4a0e-8841-fe276d7406b4",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"lifecyclePolicyText\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e05b5049-d964-438f-b7a7-5662aadf3804",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "eb4937af-5f24-4838-a9b4-97108e329c94",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "85578cde-a19a-4675-a2a4-991914b9d945",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "3a320d4e-9fee-4aa3-bd83-a9b59feb472d",
      "documentation": "<p>Creates or updates the permissions policy for your registry.</p> <p>A registry policy is used to specify permissions for another Amazon Web Services account and is used when configuring cross-account replication. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/registry-permissions.html\">Registry permissions</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutRegistryPolicy",
      "responses": [
        {
          "uuid": "1d086963-8e8b-4447-8260-3d838309dcdc",
          "body": "{\n  \"registryId\": \"\",\n  \"policyText\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1c1aaf55-2c2a-45c3-a5e9-aa47eac873ce",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "96f2e884-3e10-44fc-9dec-4a7d045707fe",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "158f2ee8-b8a5-48f6-8778-6988fea1464f",
      "documentation": "<p>Creates or updates the replication configuration for a registry. The existing replication configuration for a repository can be retrieved with the <a>DescribeRegistry</a> API action. The first time the PutReplicationConfiguration API is called, a service-linked IAM role is created in your account for the replication process. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/using-service-linked-roles.html\">Using service-linked roles for Amazon ECR</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p> <note> <p>When configuring cross-account replication, the destination account must grant the source account permission to replicate. This permission is controlled using a registry permissions policy. For more information, see <a>PutRegistryPolicy</a>.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutReplicationConfiguration",
      "responses": [
        {
          "uuid": "331d0cca-1322-460f-847e-1711ffa52ef2",
          "body": "{\n  \"replicationConfiguration\": {\n    \"rules\": [\n      {\n        \"destinations\": [\n          {\n            \"region\": \"\",\n            \"registryId\": \"\"\n          }\n        ]\n      }\n    ]\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e5734c11-a482-4eff-99e1-c50f31ee0ba1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3b628c15-3e61-483b-9648-fcf45b55f06c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "efd8b766-997c-4752-9583-a0847f2438e8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "ValidationException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "975490c3-9df8-4c38-acf9-7dfe4a20d06a",
      "documentation": "Applies a repository policy to the specified repository to control access permissions. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policies.html\">Amazon ECR Repository policies</a> in the <i>Amazon Elastic Container Registry User Guide</i>.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.SetRepositoryPolicy",
      "responses": [
        {
          "uuid": "e59aebc2-975e-4ad9-9557-2286b1440ab6",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"policyText\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e87bffeb-3b7d-49bc-a4ea-471047e6ecf1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "cb9e7572-5ad3-4924-aa5c-a954f9cc7a2f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "91edd9eb-3fb1-4e19-8ac9-97daaf90f826",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "d6a78342-c766-4975-928e-1191e012eb68",
      "documentation": "Starts an image vulnerability scan. An image scan can only be started once per 24 hours on an individual image. This limit includes if an image was scanned on initial push. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html\">Image scanning</a> in the <i>Amazon Elastic Container Registry User Guide</i>.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.StartImageScan",
      "responses": [
        {
          "uuid": "800418cf-1802-4415-abeb-250b75cbf5e0",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"imageId\": {\n    \"imageDigest\": \"\",\n    \"imageTag\": \"\"\n  },\n  \"imageScanStatus\": {\n    \"status\": \"\",\n    \"description\": \"\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d0bab787-0624-486f-b03f-7ac2fd8a8862",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7d033e7a-d115-4c86-8dc4-2a700fb314aa",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "6e06a218-8181-4ca4-91e4-22eb66ea8214",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "UnsupportedImageTypeException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "981900c5-dbe7-4c44-9b20-0562f6ed7874",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b922695c-91c4-4d04-8f03-eeb087f339d8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2f889ce3-f3e5-4c1d-8e42-05e8d1649645",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "ImageNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "4bc04ec7-d9cf-4458-a511-eae1e1b10c5f",
      "documentation": "Starts a preview of a lifecycle policy for the specified repository. This allows you to see the results before associating the lifecycle policy with the repository.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.StartLifecyclePolicyPreview",
      "responses": [
        {
          "uuid": "46fbca24-4796-41c9-b3a9-8b5292118b2c",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"lifecyclePolicyText\": \"\",\n  \"status\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a82262cd-5eae-43d4-b4fb-756e7d8a206e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d6ff826b-40a0-4e32-966d-9efc91993d33",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ee9b6b56-1368-4a76-95f5-2b58daf9753f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "44915418-f284-45a8-9c10-e4a93349b18f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "LifecyclePolicyNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d699489e-6f54-428e-8c66-fc65ebc59608",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "LifecyclePolicyPreviewInProgressException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "d784ebe1-49ac-43a2-8a41-858589422c66",
      "documentation": "Adds specified tags to a resource with the specified ARN. Existing tags on a resource are not changed if they are not specified in the request parameters.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.TagResource",
      "responses": [
        {
          "uuid": "bf3b53be-1273-4c60-b209-9e373b63ec87",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "8cc05722-4602-4414-8e49-4c670a0ff743",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "de71e6c8-7e5d-41d4-acc2-e8a2cf9572de",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidTagParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f125d91c-5ee7-49fe-9f0f-ccb491946b99",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "TooManyTagsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f8ce5942-4518-4199-9354-7d02bcec7149",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "18e574fe-ce99-41cc-8f20-1e2601a50298",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "7d406c5a-47bd-424e-bc3b-e97ef2531e14",
      "documentation": "Deletes specified tags from a resource.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.UntagResource",
      "responses": [
        {
          "uuid": "29fb436d-66ad-4f85-b5a7-97479e7e7837",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7fbd0c48-a7a5-4829-be89-ba1e5d4e7dd9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d768c753-a85a-4626-9614-9a3629f6840b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidTagParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7b10f251-5637-4116-b603-d79969074e17",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "TooManyTagsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7d22cfee-0d92-4678-91fa-c929145592b7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f5852739-df41-4829-b363-7dc71d84e6e1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "c10befe6-15c6-4655-8c82-5e2bd55207dc",
      "documentation": "<p>Uploads an image layer part to Amazon ECR.</p> <p>When an image is pushed, each new image layer is uploaded in parts. The maximum size of each image layer part can be 20971520 bytes (or about 20MB). The UploadLayerPart API is called once per each new image layer part.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.UploadLayerPart",
      "responses": [
        {
          "uuid": "82be1eda-dfc6-4172-820f-b90394a55628",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"uploadId\": \"\",\n  \"lastByteReceived\": {{faker 'random.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "81723485-47a3-4119-a7f5-5c4636c7f56f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d9b6a6c4-b177-484b-bcaa-623dc712caf1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "65695a8a-1cee-4ebf-a4a5-0a965f44bb93",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidLayerPartException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c59ecead-ecee-45c3-91e8-932c09199f3a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "deca39da-ef0c-48a9-803f-a84bd0ff871f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "UploadNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "74ef4fda-2959-41e1-ae05-2272464a4c99",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "df35c271-3759-497c-b4c5-e56097fc138f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 486,
          "label": "KmsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    }
  ],
  "proxyMode": false,
  "proxyHost": "",
  "proxyRemovePrefix": false,
  "tlsOptions": {
    "enabled": false,
    "type": "CERT",
    "pfxPath": "",
    "certPath": "",
    "keyPath": "",
    "caPath": "",
    "passphrase": ""
  },
  "cors": true,
  "headers": [],
  "proxyReqHeaders": [
    {
      "key": "",
      "value": ""
    }
  ],
  "proxyResHeaders": [
    {
      "key": "",
      "value": ""
    }
  ]
}