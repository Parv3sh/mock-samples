{
  "uuid": "d27a8351-bf32-430c-8ad4-da26548cba68",
  "lastMigration": 19,
  "name": "Amazon EC2 Container Registry",
  "endpointPrefix": "",
  "latency": 0,
  "port": 3000,
  "hostname": "0.0.0.0",
  "routes": [
    {
      "uuid": "422d764f-7a00-492b-865a-299ba996a00a",
      "documentation": "<p>Checks the availability of one or more image layers in a repository.</p> <p>When an image is pushed to a repository, each image layer is checked to verify if it has been uploaded before. If it has been uploaded, then the image layer is skipped.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchCheckLayerAvailability",
      "responses": [
        {
          "uuid": "0ae6134b-4120-4304-be84-0354e98582fe",
          "body": "{\n  \"layers\": [\n    {\n      \"layerDigest\": \"\",\n      \"layerAvailability\": \"\",\n      \"layerSize\": {{faker 'random.number'}},\n      \"mediaType\": \"\"\n    }\n  ],\n  \"failures\": [\n    {\n      \"layerDigest\": \"\",\n      \"failureCode\": \"\",\n      \"failureReason\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "6b815557-1252-4d2e-8551-89216f3143ea",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5da48a27-11a9-4985-a3cf-840fd9cca647",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e8b51e53-4b80-483a-b73e-65a7eb8f54f9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "10dfcd84-05b7-4263-bbfd-3c764a7cf015",
      "documentation": "<p>Deletes a list of specified images within a repository. Images are specified with either an <code>imageTag</code> or <code>imageDigest</code>.</p> <p>You can remove a tag from an image by specifying the image's tag in your request. When you remove the last tag from an image, the image is deleted from your repository.</p> <p>You can completely delete an image (and all of its tags) by specifying the image's digest in your request.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchDeleteImage",
      "responses": [
        {
          "uuid": "fbc250e2-99d5-4be5-bc91-3b39d2317e56",
          "body": "{\n  \"failures\": [],\n  \"imageIds\": [\n    {\n      \"imageDigest\": \"sha256:examplee6d1e504117a17000003d3753086354a38375961f2e665416ef4b1b2f\",\n      \"imageTag\": \"precise\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "de8fae08-5b91-44ef-a5f3-ddec115f303d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "869ce89b-f52d-45a3-9522-720f290404c7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "72f56288-bc44-43a1-910d-5262a2f4ad43",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "0d86aa83-f1aa-4ef0-9829-19788f63558f",
      "documentation": "<p>Gets detailed information for an image. Images are specified with either an <code>imageTag</code> or <code>imageDigest</code>.</p> <p>When an image is pulled, the BatchGetImage API is called once to retrieve the image manifest.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.BatchGetImage",
      "responses": [
        {
          "uuid": "f385ad26-60e3-45da-8158-cc15e069632c",
          "body": "{\n  \"failures\": [],\n  \"images\": [\n    {\n      \"imageId\": {\n        \"imageDigest\": \"sha256:example76bdff6d83a09ba2a818f0d00000063724a9ac3ba5019c56f74ebf42a\",\n        \"imageTag\": \"precise\"\n      },\n      \"imageManifest\": \"{\\n \\\"schemaVersion\\\": 1,\\n \\\"name\\\": \\\"ubuntu\\\",\\n \\\"tag\\\": \\\"precise\\\",\\n...\",\n      \"registryId\": \"244698725403\",\n      \"repositoryName\": \"ubuntu\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0e3e62b2-7a6d-4b50-9eb6-89741abf01ee",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9dfe6034-1082-4ec9-9f48-c51f367b5072",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "deccc7fe-998a-4f84-b917-1c68426fdff7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "c74cf504-6be2-41b3-801e-306880c0cf4d",
      "documentation": "<p>Informs Amazon ECR that the image layer upload has completed for a specified registry, repository name, and upload ID. You can optionally provide a <code>sha256</code> digest of the image layer for data validation purposes.</p> <p>When an image is pushed, the CompleteLayerUpload API is called once per each new image layer to verify that the upload has completed.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.CompleteLayerUpload",
      "responses": [
        {
          "uuid": "5e8a95ae-e9c4-40d0-b748-ce2acbe3eb9e",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"uploadId\": \"\",\n  \"layerDigest\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "181ad6f8-63e4-4d62-b96e-f04f797dc56f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9842c471-fb95-4cfa-81ac-85301cff9eb6",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7eb28167-e54f-47e2-baea-a7b82f22fab6",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "39cc0d46-9667-437c-8c32-505bb0064e71",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "UploadNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "64951d78-4b48-4042-8769-d6c6b8f8dd50",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "InvalidLayerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d81b5f8e-aaae-4932-9493-79a54ddfa6a0",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "LayerPartTooSmallException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "4017a5bb-e947-406c-bcff-a9cf81ac9338",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 486,
          "label": "LayerAlreadyExistsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "98bd6c8d-57be-49b8-b4a0-8d0b914c27fb",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 487,
          "label": "EmptyUploadException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "41c66938-1b05-4b14-b6e3-f6648a85dbd7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 488,
          "label": "KmsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "efcd05e3-fa15-4ace-8ace-d97abb61d266",
      "documentation": "Creates a repository. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html\">Amazon ECR repositories</a> in the <i>Amazon Elastic Container Registry User Guide</i>.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.CreateRepository",
      "responses": [
        {
          "uuid": "b8504a03-6875-4286-8dea-3219dba955e1",
          "body": "{\n  \"repository\": {\n    \"registryId\": 12345678901,\n    \"repositoryArn\": \"arn:aws:ecr:us-west-2:012345678901:repository/project-a/nginx-web-app\",\n    \"repositoryName\": \"project-a/nginx-web-app\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a6cc8cc0-1803-46ac-a615-53f44434392a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "35c69710-1935-42f0-a341-f62164642180",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9be1f424-bc02-4eff-950c-7d683231ee5f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidTagParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f8f9bc91-6756-42e3-a5dc-7be46a46c28d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "TooManyTagsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2495e5bd-1471-44c0-9030-009f21b68807",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "RepositoryAlreadyExistsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c10fd9f8-9358-4206-b6e0-64e15448880d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "4a1adf3e-fa8b-46a7-9d06-98783a3cd7ac",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 486,
          "label": "KmsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "7370f5e9-22d4-4650-8fd0-397822d34d9f",
      "documentation": "Deletes the lifecycle policy associated with the specified repository.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteLifecyclePolicy",
      "responses": [
        {
          "uuid": "97862d75-2f21-432c-abc1-f1c458aef827",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"lifecyclePolicyText\": \"\",\n  \"lastEvaluatedAt\": \"{{faker 'date.recent' 365}}\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f44d7d1a-8187-4153-a789-fe1c0ec2a2bf",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a332d488-6ce2-47dd-a35b-207cb1cdd18c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "50558988-e5ec-4107-b506-a8308b52620f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9d9975e8-42e7-4194-88e1-9d6d3bac61be",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "LifecyclePolicyNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "d8280e8f-470d-4186-9d63-ae9ffd19b565",
      "documentation": "Deletes the registry permissions policy.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRegistryPolicy",
      "responses": [
        {
          "uuid": "50327eb5-d9b8-400e-b3cd-80a6cf093fd0",
          "body": "{\n  \"registryId\": \"\",\n  \"policyText\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ea051ff8-8afb-49c9-b674-b224682c9789",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "bada231a-e3a7-4876-a376-48b5e95fcbb8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1060aba1-de3a-4572-9bef-65364131a141",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RegistryPolicyNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "e9cabfc9-b994-43ba-a64b-4b762b9bd00a",
      "documentation": "Deletes a repository. If the repository contains images, you must either delete all images in the repository or use the <code>force</code> option to delete the repository.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRepository",
      "responses": [
        {
          "uuid": "fce7a399-c6d4-45e8-8173-3f83261b8408",
          "body": "{\n  \"repository\": {\n    \"registryId\": 12345678901,\n    \"repositoryArn\": \"arn:aws:ecr:us-west-2:012345678901:repository/ubuntu\",\n    \"repositoryName\": \"ubuntu\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e2989919-1b4e-403c-8d46-62652c850daa",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1f789ff7-a4ad-411d-b8b1-eed9d599d21e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b8f31f09-036f-429c-b28b-4066aa1f10f4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c72fe9e8-fc47-4a63-925a-78557a990c75",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RepositoryNotEmptyException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "703176ab-f426-49da-8bf1-c0df0223f38a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "KmsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "65e20ee6-8b14-4ba7-bef4-36f5d87f7fed",
      "documentation": "Deletes the repository policy associated with the specified repository.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DeleteRepositoryPolicy",
      "responses": [
        {
          "uuid": "986ad0cd-a3e1-4f09-93da-7ef628ab20ef",
          "body": "{\n  \"policyText\": \"{ ... }\",\n  \"registryId\": 12345678901,\n  \"repositoryName\": \"ubuntu\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9664f4fd-b796-46b4-80bc-c5776b791495",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "09f3d643-386d-4a69-8237-16f29fa837f6",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d2ebc190-dba8-4551-a0cf-ae0f1a0edbbd",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c2900625-8997-4063-8bd1-e445eb4776ce",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RepositoryPolicyNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "d20a28b2-a1cb-43fb-a4bf-8bf484a63ade",
      "documentation": "Returns the scan findings for the specified image.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeImageScanFindings",
      "responses": [
        {
          "uuid": "fd32e484-f91b-49d7-b93d-a2a277b6cfab",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"imageId\": {\n    \"imageDigest\": \"\",\n    \"imageTag\": \"\"\n  },\n  \"imageScanStatus\": {\n    \"status\": \"\",\n    \"description\": \"\"\n  },\n  \"imageScanFindings\": {\n    \"imageScanCompletedAt\": \"{{faker 'date.recent' 365}}\",\n    \"vulnerabilitySourceUpdatedAt\": \"{{faker 'date.recent' 365}}\",\n    \"findings\": [\n      {\n        \"name\": \"\",\n        \"description\": \"\",\n        \"uri\": \"\",\n        \"severity\": \"\",\n        \"attributes\": [\n          {\n            \"key\": \"\",\n            \"value\": \"\"\n          }\n        ]\n      }\n    ],\n    \"findingSeverityCounts\": {}\n  },\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e8a708c4-9d29-4408-9b4d-dc79810da266",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "8e9f0d0d-9218-4f7b-9a4f-ce9ba673007f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2d0f7cbb-4cd0-4bbf-8ca2-1c478993009d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "66674bdf-e2ec-4ca6-892e-a1f4353ae4ff",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ImageNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f74b84fc-e882-40fc-bb78-882cc61853ce",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "ScanNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "319f7664-9ef7-4cf5-b6b4-fa3733c997ba",
      "documentation": "<p>Returns metadata about the images in a repository.</p> <note> <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by <a>DescribeImages</a>.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeImages",
      "responses": [
        {
          "uuid": "5a23a1a2-581f-4872-a809-1b42578d2461",
          "body": "{\n  \"imageDetails\": [\n    {\n      \"registryId\": \"\",\n      \"repositoryName\": \"\",\n      \"imageDigest\": \"\",\n      \"imageTags\": [\n        \"\"\n      ],\n      \"imageSizeInBytes\": {{faker 'random.number'}},\n      \"imagePushedAt\": \"{{faker 'date.recent' 365}}\",\n      \"imageScanStatus\": {\n        \"status\": \"\",\n        \"description\": \"\"\n      },\n      \"imageScanFindingsSummary\": {\n        \"imageScanCompletedAt\": \"{{faker 'date.recent' 365}}\",\n        \"vulnerabilitySourceUpdatedAt\": \"{{faker 'date.recent' 365}}\",\n        \"findingSeverityCounts\": {}\n      },\n      \"imageManifestMediaType\": \"\",\n      \"artifactMediaType\": \"\"\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b7be56bc-b544-43cb-b84c-1a737744f614",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "08674303-1740-4ce9-9131-048e28f0e2b2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3e403b57-65fa-4799-84d7-a7ac6e010cda",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "36618703-5e16-44b5-b7ff-02280c2cfbf9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ImageNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "1bd93620-d765-4a09-afe3-251cbee5fa53",
      "documentation": "Describes the settings for a registry. The replication configuration for a repository can be created or updated with the <a>PutReplicationConfiguration</a> API action.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeRegistry",
      "responses": [
        {
          "uuid": "24963eed-f4c9-460c-9841-1fe1f76c4921",
          "body": "{\n  \"registryId\": \"\",\n  \"replicationConfiguration\": {\n    \"rules\": [\n      {\n        \"destinations\": [\n          {\n            \"region\": \"\",\n            \"registryId\": \"\"\n          }\n        ]\n      }\n    ]\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d4df21a1-2568-4192-a492-a1b804b50e51",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "da85e81f-0163-4a00-b0b4-8b397f55415f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "cb7887c5-e1e3-4eb6-a71d-0341a1e67b29",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "ValidationException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "02fe72d2-bd28-4b9f-b276-98410658c27a",
      "documentation": "Describes image repositories in a registry.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.DescribeRepositories",
      "responses": [
        {
          "uuid": "603b2bf6-4615-44cc-ad09-cbbbf913c830",
          "body": "{\n  \"repositories\": [\n    {\n      \"registryId\": 12345678910,\n      \"repositoryArn\": \"arn:aws:ecr:us-west-2:012345678910:repository/ubuntu\",\n      \"repositoryName\": \"ubuntu\"\n    },\n    {\n      \"registryId\": 12345678910,\n      \"repositoryArn\": \"arn:aws:ecr:us-west-2:012345678910:repository/test\",\n      \"repositoryName\": \"test\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "783a4467-17a1-47b8-af7e-8c9f00142cb7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "779a2676-3869-4ab0-9fd0-3713aa818134",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d25a4daf-ee7f-48d6-9468-be80c9292ddc",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "df03a43b-0628-43ba-a0d7-b2bfc66c5e0a",
      "documentation": "<p>Retrieves an authorization token. An authorization token represents your IAM authentication credentials and can be used to access any Amazon ECR registry that your IAM principal has access to. The authorization token is valid for 12 hours.</p> <p>The <code>authorizationToken</code> returned is a base64 encoded string that can be decoded and used in a <code>docker login</code> command to authenticate to a registry. The CLI offers an <code>get-login-password</code> command that simplifies the login process. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html#registry_auth\">Registry authentication</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetAuthorizationToken",
      "responses": [
        {
          "uuid": "4ddb3134-25e9-4b0c-9270-93086a99467b",
          "body": "{\n  \"authorizationData\": [\n    {\n      \"authorizationToken\": \"QVdTOkN...\",\n      \"expiresAt\": \"1470951892432\",\n      \"proxyEndpoint\": \"https://012345678901.dkr.ecr.us-west-2.amazonaws.com\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "389dcab9-1922-4471-83bc-d8b1bfeab1c1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ac7898cd-c85f-4e7f-a86e-427695a57904",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "a86f5e3c-82c6-4f46-a796-4597b9e66070",
      "documentation": "<p>Retrieves the pre-signed Amazon S3 download URL corresponding to an image layer. You can only get URLs for image layers that are referenced in an image.</p> <p>When an image is pulled, the GetDownloadUrlForLayer API is called once per image layer that is not already cached.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetDownloadUrlForLayer",
      "responses": [
        {
          "uuid": "446f0eba-dca2-42aa-8758-6a609fb37dbc",
          "body": "{\n  \"downloadUrl\": \"\",\n  \"layerDigest\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1a252360-41a1-4d8d-8a5f-8766755a9a4b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "db3f1845-f536-4a11-8165-6a05b6f10bc4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9077b367-48a7-44fd-bc92-eea9e19735b5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "LayersNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "cca82069-5d1e-456f-b424-464fcff9be00",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "LayerInaccessibleException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "955be8a8-0a53-4602-b5ab-66316baa6fcf",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "b9a15b39-0fdc-4cc2-833f-2bd859fe4c53",
      "documentation": "Retrieves the lifecycle policy for the specified repository.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicy",
      "responses": [
        {
          "uuid": "f2ac726b-8959-4a7d-98a7-c85bac402b76",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"lifecyclePolicyText\": \"\",\n  \"lastEvaluatedAt\": \"{{faker 'date.recent' 365}}\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a5f7e9d8-0b51-4a5c-a11b-471a79547eeb",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2e1d2fee-b3ec-4789-a211-ff919e6fc608",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d9700afa-ef48-4a3e-bc33-6f371b482c7d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "91bbc996-69d7-4939-8fe7-dbff5b1520d4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "LifecyclePolicyNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "60d89aec-748b-4220-bacd-8e25d84f61aa",
      "documentation": "Retrieves the results of the lifecycle policy preview request for the specified repository.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicyPreview",
      "responses": [
        {
          "uuid": "03421d9e-cb31-44f7-a92a-6b81530a60d5",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"lifecyclePolicyText\": \"\",\n  \"status\": \"\",\n  \"nextToken\": \"\",\n  \"previewResults\": [\n    {\n      \"imageTags\": [\n        \"\"\n      ],\n      \"imageDigest\": \"\",\n      \"imagePushedAt\": \"{{faker 'date.recent' 365}}\",\n      \"action\": {\n        \"type\": \"\"\n      },\n      \"appliedRulePriority\": {{faker 'random.number'}}\n    }\n  ],\n  \"summary\": {\n    \"expiringImageTotalCount\": {{faker 'random.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7e7ee778-2ac8-4282-a1d9-4bcf50e52350",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f11fad77-b457-4b1d-86ed-0aef88212962",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f8ce8db4-1322-4c47-8781-05f5c241268c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e3e38fba-939e-4ff3-870f-00b6bc9a5dca",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "LifecyclePolicyPreviewNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "95eb8525-112d-45e4-af7c-24c297c5edb0",
      "documentation": "Retrieves the permissions policy for a registry.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetRegistryPolicy",
      "responses": [
        {
          "uuid": "eb2dec4a-d64b-4eb9-8f44-011b5ef951db",
          "body": "{\n  \"registryId\": \"\",\n  \"policyText\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2632c3bd-7f9d-422a-a465-02e98fceac7b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "a2c5b740-f2dc-49d4-a957-c5ce3c9a3de0",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "15439341-6380-4c06-af9f-ba20d4a0bc37",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RegistryPolicyNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "4ec2a83c-85b8-4f2c-b2ca-0d50e4be3cf3",
      "documentation": "Retrieves the repository policy for the specified repository.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetRepositoryPolicy",
      "responses": [
        {
          "uuid": "85a69ae6-ee81-4b1f-ab20-413bb0a5bbdf",
          "body": "{\n  \"policyText\": \"{\\n  \\\"Version\\\" : \\\"2008-10-17\\\",\\n  \\\"Statement\\\" : [ {\\n    \\\"Sid\\\" : \\\"new statement\\\",\\n    \\\"Effect\\\" : \\\"Allow\\\",\\n    \\\"Principal\\\" : {\\n     \\\"AWS\\\" : \\\"arn:aws:iam::012345678901:role/CodeDeployDemo\\\"\\n    },\\n\\\"Action\\\" : [ \\\"ecr:GetDownloadUrlForLayer\\\", \\\"ecr:BatchGetImage\\\", \\\"ecr:BatchCheckLayerAvailability\\\" ]\\n } ]\\n}\",\n  \"registryId\": 12345678901,\n  \"repositoryName\": \"ubuntu\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "06268873-9709-46b9-a233-4dc8fa06c07f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f3bdcbac-a6a5-4a90-8de3-0ec8f7d2fc34",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0050fa18-6b05-45a9-805c-084817172c32",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5afe2b5e-5ef1-4af3-9df3-92ec31e5255b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RepositoryPolicyNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "9af97957-56f1-464c-885a-727c5b534e31",
      "documentation": "<p>Notifies Amazon ECR that you intend to upload an image layer.</p> <p>When an image is pushed, the InitiateLayerUpload API is called once per image layer that has not already been uploaded. Whether or not an image layer has been uploaded is determined by the BatchCheckLayerAvailability API action.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.InitiateLayerUpload",
      "responses": [
        {
          "uuid": "7b61be4c-58eb-4992-9c96-72749f64e659",
          "body": "{\n  \"uploadId\": \"\",\n  \"partSize\": {{faker 'random.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "36bb0094-9663-42da-9073-d4a2044f9c4b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "8df735e6-0e6d-4f1c-b4fe-71a6408b405c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b8e3c0f7-fa29-4307-b8d2-613846b4a068",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "db077d6e-d57b-42aa-ae34-24f2ee17557b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "KmsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "63841b94-c13d-4515-a7be-3bc814c2b0ef",
      "documentation": "<p>Lists all the image IDs for the specified repository.</p> <p>You can filter images based on whether or not they are tagged by using the <code>tagStatus</code> filter and specifying either <code>TAGGED</code>, <code>UNTAGGED</code> or <code>ANY</code>. For example, you can filter your results to return only <code>UNTAGGED</code> images and then pipe that result to a <a>BatchDeleteImage</a> operation to delete them. Or, you can filter your results to return only <code>TAGGED</code> images to list all of the tags in your repository.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.ListImages",
      "responses": [
        {
          "uuid": "d0846987-e160-41ca-adac-c5b6f213eb69",
          "body": "{\n  \"imageIds\": [\n    {\n      \"imageDigest\": \"sha256:764f63476bdff6d83a09ba2a818f0d35757063724a9ac3ba5019c56f74ebf42a\",\n      \"imageTag\": \"precise\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "651aa21a-9fa1-43e9-83f2-a22f0cf7312d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "37da28f6-b158-434e-a033-eb833a176f35",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1cc21425-9f47-4eef-9228-e8b1118667c9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "ae821af0-f747-42e0-988e-cfcba48c51f2",
      "documentation": "List the tags for an Amazon ECR resource.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.ListTagsForResource",
      "responses": [
        {
          "uuid": "b554fadb-2953-4c4f-9a7f-e113fe93f013",
          "body": "{\n  \"tags\": [\n    {\n      \"Key\": \"\",\n      \"Value\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "99209e12-221d-4b8f-a11c-0444de390e35",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "5241554a-041d-4f7e-8dd2-22ff7e55245c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "0d175908-37ff-4162-b7a5-215c9671410e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "66d17d7e-9bac-4673-b90e-8e0086690927",
      "documentation": "<p>Creates or updates the image manifest and tags associated with an image.</p> <p>When an image is pushed and all new image layers have been uploaded, the PutImage API is called once to create or update the image manifest and the tags associated with the image.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImage",
      "responses": [
        {
          "uuid": "e64ac077-c985-42b3-91dc-908045ad7f22",
          "body": "{\n  \"image\": {\n    \"registryId\": \"\",\n    \"repositoryName\": \"\",\n    \"imageId\": {\n      \"imageDigest\": \"\",\n      \"imageTag\": \"\"\n    },\n    \"imageManifest\": \"\",\n    \"imageManifestMediaType\": \"\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b89ae857-7b21-4e35-8169-d031dbce4bd5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7d89c55b-f9c1-48d3-af8b-85c558d7d22f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c4a1a56c-79ff-485d-927a-dce5b15dc3b3",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1d038d3a-5841-4a84-9563-f28ac780ded4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ImageAlreadyExistsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "6a85ce5e-22b0-4067-9516-68e7f038c4d2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "LayersNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f7d70252-ae5a-4364-a2f0-6d95a218aa6f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "ReferencedImagesNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "361e4f10-91d5-4656-bd87-790e5bc530c4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 486,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "36098801-c737-4574-80e0-950e7d0e4ca3",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 487,
          "label": "ImageTagAlreadyExistsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "569ab311-d7cc-4fb6-b35b-6157cc25bbc9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 488,
          "label": "ImageDigestDoesNotMatchException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d4f473be-4d5a-4fb8-ad53-cb9544fd0723",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 489,
          "label": "KmsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "55f26b3f-09d0-4acb-80c1-5da172190708",
      "documentation": "Updates the image scanning configuration for the specified repository.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImageScanningConfiguration",
      "responses": [
        {
          "uuid": "baac0488-4f5d-4110-b7c6-76a712c8bf4f",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"imageScanningConfiguration\": {\n    \"scanOnPush\": {{faker 'random.boolean'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d4540fd5-5486-4016-b02d-be7eebfef0a2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7faf0a66-91a2-456b-a5b5-b4883dd50b0e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "411873eb-19c4-48d9-bcbf-bcb5a67992b4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "43a80d03-75f0-4dec-8977-6e06c0653228",
      "documentation": "Updates the image tag mutability settings for the specified repository. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-tag-mutability.html\">Image tag mutability</a> in the <i>Amazon Elastic Container Registry User Guide</i>.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutImageTagMutability",
      "responses": [
        {
          "uuid": "b73b495e-b3dc-42ff-b176-8c6143131dff",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"imageTagMutability\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "cf2f9dfa-a368-4f63-a97d-0de0c5e0983a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "fa016a89-ac57-4ae9-a560-57a7dcdc9006",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "259a992c-3d58-4961-b213-b3e8f085c143",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "8687a0f0-8670-480f-a59e-2107211bfbce",
      "documentation": "Creates or updates the lifecycle policy for the specified repository. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html\">Lifecycle policy template</a>.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutLifecyclePolicy",
      "responses": [
        {
          "uuid": "3d4f1bff-2e12-4f52-964c-a38e1fed8e96",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"lifecyclePolicyText\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ba2b8eea-5125-4657-b2be-b19085f1797d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "69915762-e945-4d72-a3c3-b4465e171c35",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "af965ff1-fc2f-44a6-8c1b-13928e7d677d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "a078c0ff-2c55-4c4c-b55b-344c515ba5d4",
      "documentation": "<p>Creates or updates the permissions policy for your registry.</p> <p>A registry policy is used to specify permissions for another Amazon Web Services account and is used when configuring cross-account replication. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/registry-permissions.html\">Registry permissions</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutRegistryPolicy",
      "responses": [
        {
          "uuid": "e285d977-4ffa-41ab-ba96-5d35d0c4bc6c",
          "body": "{\n  \"registryId\": \"\",\n  \"policyText\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "4e5b5efc-3e9d-4682-98fa-bf4d7891671c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "25b37b29-86b0-4966-b1d8-38d27915642a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "3e5c8e62-1a1d-4587-bcb6-1301763c3457",
      "documentation": "<p>Creates or updates the replication configuration for a registry. The existing replication configuration for a repository can be retrieved with the <a>DescribeRegistry</a> API action. The first time the PutReplicationConfiguration API is called, a service-linked IAM role is created in your account for the replication process. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/using-service-linked-roles.html\">Using service-linked roles for Amazon ECR</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p> <note> <p>When configuring cross-account replication, the destination account must grant the source account permission to replicate. This permission is controlled using a registry permissions policy. For more information, see <a>PutRegistryPolicy</a>.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.PutReplicationConfiguration",
      "responses": [
        {
          "uuid": "589516da-7b9b-450f-8b08-3a4d1ef9dbcd",
          "body": "{\n  \"replicationConfiguration\": {\n    \"rules\": [\n      {\n        \"destinations\": [\n          {\n            \"region\": \"\",\n            \"registryId\": \"\"\n          }\n        ]\n      }\n    ]\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b6d9a1ae-4c2a-4197-adfd-6212671ce4df",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "f95e7473-123c-4ba5-92cd-fe538ca2c436",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2b40075a-33ae-4fb6-aa74-122d129db4ee",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "ValidationException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "54473017-9c7d-4801-b693-4f8c6213f84c",
      "documentation": "Applies a repository policy to the specified repository to control access permissions. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policies.html\">Amazon ECR Repository policies</a> in the <i>Amazon Elastic Container Registry User Guide</i>.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.SetRepositoryPolicy",
      "responses": [
        {
          "uuid": "e4814daa-7766-4c71-90d1-d083e376c26d",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"policyText\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "b7ba4bbe-8835-4bd1-ba7c-f0f7650b8e70",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d5d6cca2-af9e-4a72-8d39-e53b8490aa2d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "36cb6433-aeb8-4747-bfe3-548516c551ca",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "a1d1e3a9-f2df-459e-93d2-cbd2dac605ca",
      "documentation": "Starts an image vulnerability scan. An image scan can only be started once per 24 hours on an individual image. This limit includes if an image was scanned on initial push. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html\">Image scanning</a> in the <i>Amazon Elastic Container Registry User Guide</i>.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.StartImageScan",
      "responses": [
        {
          "uuid": "fe4e4fad-3355-4d1b-a3ba-5c52e749d1b3",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"imageId\": {\n    \"imageDigest\": \"\",\n    \"imageTag\": \"\"\n  },\n  \"imageScanStatus\": {\n    \"status\": \"\",\n    \"description\": \"\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d47a0a25-928d-4079-9787-b05fea4126e8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "6e25ab18-f7b4-45a2-ba45-8f47bb001a30",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "ed59932a-8d84-4cc4-abd1-5edbb3f0ed74",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "UnsupportedImageTypeException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "d41ae07a-33a4-45ad-9704-c518d1d79d87",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e0cef3cf-147d-444a-8010-4a7c0b465845",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "c0472f74-d40b-42a9-b5d3-a1b02db2059e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "ImageNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "2c18f46c-5f90-41cc-a3eb-2f7ab563ddaa",
      "documentation": "Starts a preview of a lifecycle policy for the specified repository. This allows you to see the results before associating the lifecycle policy with the repository.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.StartLifecyclePolicyPreview",
      "responses": [
        {
          "uuid": "ae97cca0-1230-4115-9164-d826a6edae11",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"lifecyclePolicyText\": \"\",\n  \"status\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "7098fbf2-1d06-46b1-97e9-79e7f72f854f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "17fa15c9-7dfa-48c6-b95f-7553675fdc54",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "83093221-b7c5-40bd-8c9a-c7526b70eab4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "62af1632-0fa0-474c-a1a9-5361fda1f38f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "LifecyclePolicyNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "73f55d1b-9a33-411b-adf0-1499efcf400d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "LifecyclePolicyPreviewInProgressException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "42f979c7-77ac-4391-9068-e2d7df69a92c",
      "documentation": "Adds specified tags to a resource with the specified ARN. Existing tags on a resource are not changed if they are not specified in the request parameters.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.TagResource",
      "responses": [
        {
          "uuid": "f03e5202-3ed5-42a9-bed3-2bcfc3bcfc91",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "8234f465-78df-4996-b4e3-0e252e5eb467",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "600cbe44-c629-4b27-bea6-e2c5a4e73de0",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidTagParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "cef761b9-ddbb-45dd-97ac-71e8793d8d0c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "TooManyTagsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3df123a3-0f22-4c36-8167-7979c0f257f3",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3915d4fb-d5df-45e8-9a6e-8f1531273dbb",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "4c50692e-d5d1-4798-9868-47a66e30e075",
      "documentation": "Deletes specified tags from a resource.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.UntagResource",
      "responses": [
        {
          "uuid": "35a3d28a-ef14-4f72-955d-318612164feb",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9dcca7bb-0d5d-45b2-b3a2-0825720fb68c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "1e22888d-e33f-4aa4-9373-bf8547eeec7d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidTagParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "9fbdc48d-96f4-4c29-b267-473a3a7c458b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "TooManyTagsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "e0ff1708-4228-44a2-bd45-a926f928f515",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "4f09e262-af8f-44f5-972e-ac137e3a431a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    },
    {
      "uuid": "d9fc883a-bac3-49b9-94b4-38d1548cd8ee",
      "documentation": "<p>Uploads an image layer part to Amazon ECR.</p> <p>When an image is pushed, each new image layer is uploaded in parts. The maximum size of each image layer part can be 20971520 bytes (or about 20MB). The UploadLayerPart API is called once per each new image layer part.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.UploadLayerPart",
      "responses": [
        {
          "uuid": "9ad5bb37-6e3c-49ff-b30b-ece43e1775d5",
          "body": "{\n  \"registryId\": \"\",\n  \"repositoryName\": \"\",\n  \"uploadId\": \"\",\n  \"lastByteReceived\": {{faker 'random.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "36d35184-d685-45d2-87d6-f0a560cc8430",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "dff589fe-8e48-40f2-a117-4b14de299e30",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "3974569b-2094-4447-b7b3-feb8f1987505",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidLayerPartException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "4284846a-1a9a-4042-8457-38fcb38dca05",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "RepositoryNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "97044643-ab58-43c9-bfa7-a5ca345b583b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "UploadNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "36a8409c-d1be-41a0-9604-b9ea16047c35",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        },
        {
          "uuid": "2e369d73-5630-402a-8639-a6bb4c66f647",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 486,
          "label": "KmsException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "filePath": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false
        }
      ],
      "enabled": true,
      "randomResponse": false,
      "sequentialResponse": false
    }
  ],
  "proxyMode": false,
  "proxyHost": "",
  "proxyRemovePrefix": false,
  "tlsOptions": {
    "enabled": false,
    "type": "CERT",
    "pfxPath": "",
    "certPath": "",
    "keyPath": "",
    "caPath": "",
    "passphrase": ""
  },
  "cors": true,
  "headers": [],
  "proxyReqHeaders": [
    {
      "key": "",
      "value": ""
    }
  ],
  "proxyResHeaders": [
    {
      "key": "",
      "value": ""
    }
  ]
}