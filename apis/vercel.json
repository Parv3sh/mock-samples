{
    "source": "mockoon:1.15.0",
    "data": [
        {
            "type": "environment",
            "item": {
                "uuid": "",
                "lastMigration": 17,
                "name": "Vercel API",
                "endpointPrefix": "",
                "latency": 0,
                "port": 3009,
                "hostname": "0.0.0.0",
                "routes": [
                    {
                        "uuid": "",
                        "documentation": "Get a list of existent webhooks",
                        "method": "get",
                        "endpoint": "v1/integrations/webhooks",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "[\n  {\n    \"configurationId\": \"\",\n    \"createdAt\": {{faker 'random.number'}},\n    \"events\": [\n      \"\"\n    ],\n    \"id\": \"\",\n    \"name\": \"\",\n    \"ownerId\": \"\",\n    \"url\": \"\"\n  }\n]",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "OK",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Create a new webhook",
                        "method": "post",
                        "endpoint": "v1/integrations/webhooks",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"configurationId\": \"\",\n  \"createdAt\": {{faker 'random.number'}},\n  \"events\": [\n    \"\"\n  ],\n  \"id\": \"\",\n  \"name\": \"\",\n  \"ownerId\": \"\",\n  \"url\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 201,
                                "label": "OK",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Remove a webhook by id",
                        "method": "delete",
                        "endpoint": "v1/integrations/webhooks/:id",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "OK",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Gets a list of domains registered for the authenticating user.",
                        "method": "get",
                        "endpoint": "v4/domains",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"domains\": [\n    {\n      \"boughtAt\": 1549492066000,\n      \"cdnEnabled\": false,\n      \"createdAt\": 1549492062697,\n      \"expiresAt\": 1581033599000,\n      \"id\": \"Qmf2RSrNz5sqt6nznp4JpAyXgT6pY65qwJJn8gESt2iKoi\",\n      \"intendedNameservers\": [\n        \"b.zeit-world.co.uk\",\n        \"c.zeit-world.org\",\n        \"e.zeit-world.com\",\n        \"f.zeit-world.net\"\n      ],\n      \"name\": \"zeit.rocks\",\n      \"nameservers\": [\n        \"f.zeit-world.net\",\n        \"e.zeit-world.com\",\n        \"b.zeit-world.co.uk\",\n        \"c.zeit-world.org\"\n      ],\n      \"nsVerifiedAt\": 1549492417256,\n      \"orderedAt\": 1549492057859,\n      \"serviceType\": \"zeit.world\",\n      \"txtVerifiedAt\": null,\n      \"verificationRecord\": \"QmReErtvkKUkogSYEAFJCQVPboxRcrCygaFG8xUKinurD4\",\n      \"verified\": true\n    }\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "OK",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get a domain for the authenticated user by name",
                        "method": "get",
                        "endpoint": "v4/domains/:name",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"domain\": {\n    \"aliases\": [],\n    \"boughtAt\": null,\n    \"cdnEnabled\": false,\n    \"certs\": [],\n    \"createdAt\": 1544658552174,\n    \"creator\": {\n      \"customerId\": \"cus_COxSxT1ysva5Xa\",\n      \"email\": \"demo@zeit.co\",\n      \"id\": \"ZspSRT4ljIEEmMHgoDwKWDei\",\n      \"username\": \"zeit_user\"\n    },\n    \"expiresAt\": null,\n    \"id\": \"EmTbe5CEJyTk2yVAHBUWy4A3sRusca3GCwRjTC1bpeVnt1\",\n    \"intendedNameservers\": [\n      \"a.zeit-world.co.uk\",\n      \"c.zeit-world.org\",\n      \"d.zeit-world.com\",\n      \"f.zeit-world.net\"\n    ],\n    \"name\": \"my-zeit-domain.website\",\n    \"nameservers\": [\n      \"ns1.nameserver.net\",\n      \"ns2.nameserver.net\"\n    ],\n    \"nsVerifiedAt\": null,\n    \"serviceType\": \"external\",\n    \"suffix\": false,\n    \"txtVerifiedAt\": null,\n    \"verificationRecord\": \"YMc9dEJKbAncYtTqSH8dp1j5NXycfEzyjkzBJ3m3UGwR43\",\n    \"verified\": false\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "OK",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"code\": \"not_found\",\n    \"message\": \"The domain with name zeit.rocks could not be found\",\n    \"name\": \"zeit.rocks\"\n  }\n}",
                                "latency": 0,
                                "statusCode": 404,
                                "label": "Not Found",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    }
                ],
                "proxyMode": false,
                "proxyHost": "",
                "proxyRemovePrefix": false,
                "https": false,
                "cors": true,
                "headers": [],
                "proxyReqHeaders": [
                    {
                        "key": "",
                        "value": ""
                    }
                ],
                "proxyResHeaders": [
                    {
                        "key": "",
                        "value": ""
                    }
                ]
            }
        }
    ]
}
