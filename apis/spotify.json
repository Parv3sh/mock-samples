{
    "source": "mockoon:1.15.0",
    "data": [
        {
            "type": "environment",
            "item": {
                "uuid": "",
                "lastMigration": 17,
                "name": "Spotify Web API",
                "endpointPrefix": "v1",
                "latency": 0,
                "port": 3000,
                "hostname": "0.0.0.0",
                "routes": [
                    {
                        "uuid": "",
                        "documentation": "Get Multiple Albums",
                        "method": "get",
                        "endpoint": "albums",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"albums\": [\n    {\n      \"album_type\": \"\",\n      \"artists\": [\n        {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'random.number'}}\n          },\n          \"genres\": [\n            \"\"\n          ],\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"name\": \"\",\n          \"popularity\": {{faker 'random.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      ],\n      \"available_markets\": [\n        \"\"\n      ],\n      \"copyrights\": [\n        {\n          \"text\": \"\",\n          \"type\": \"\"\n        }\n      ],\n      \"external_ids\": {\n        \"ean\": \"\",\n        \"isrc\": \"\",\n        \"upc\": \"\"\n      },\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"genres\": [\n        \"\"\n      ],\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"label\": \"\",\n      \"name\": \"\",\n      \"popularity\": {{faker 'random.number'}},\n      \"release_date\": \"\",\n      \"release_date_precision\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"total_tracks\": {{faker 'random.number'}},\n      \"tracks\": {\n        \"href\": \"\",\n        \"items\": [\n          {\n            \"artists\": [\n              {\n                \"external_urls\": {\n                  \"spotify\": \"\"\n                },\n                \"href\": \"\",\n                \"id\": \"\",\n                \"name\": \"\",\n                \"type\": \"\",\n                \"uri\": \"\"\n              }\n            ],\n            \"available_markets\": [\n              \"\"\n            ],\n            \"disc_number\": {{faker 'random.number'}},\n            \"duration_ms\": {{faker 'random.number'}},\n            \"explicit\": {{faker 'random.boolean'}},\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"is_local\": {{faker 'random.boolean'}},\n            \"is_playable\": {{faker 'random.boolean'}},\n            \"linked_from\": {\n              \"external_urls\": {\n                \"spotify\": \"\"\n              },\n              \"href\": \"\",\n              \"id\": \"\",\n              \"type\": \"\",\n              \"uri\": \"\"\n            },\n            \"name\": \"\",\n            \"preview_url\": \"\",\n            \"restrictions\": {\n              \"reason\": \"\"\n            },\n            \"track_number\": {{faker 'random.number'}},\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"limit\": {{faker 'random.number'}},\n        \"next\": \"\",\n        \"offset\": {{faker 'random.number'}},\n        \"previous\": \"\",\n        \"total\": {{faker 'random.number'}}\n      },\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `\"albums\"` and whose value is an array of [album objects](https://developer.spotify.com/documentation/web-api/reference/#object-albumobject) in JSON format.\n\nObjects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get an Album",
                        "method": "get",
                        "endpoint": "albums/:id",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"album_type\": \"\",\n  \"artists\": [\n    {\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"followers\": {\n        \"href\": \"\",\n        \"total\": {{faker 'random.number'}}\n      },\n      \"genres\": [\n        \"\"\n      ],\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"popularity\": {{faker 'random.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ],\n  \"available_markets\": [\n    \"\"\n  ],\n  \"copyrights\": [\n    {\n      \"text\": \"\",\n      \"type\": \"\"\n    }\n  ],\n  \"external_ids\": {\n    \"ean\": \"\",\n    \"isrc\": \"\",\n    \"upc\": \"\"\n  },\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"genres\": [\n    \"\"\n  ],\n  \"href\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'random.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'random.number'}}\n    }\n  ],\n  \"label\": \"\",\n  \"name\": \"\",\n  \"popularity\": {{faker 'random.number'}},\n  \"release_date\": \"\",\n  \"release_date_precision\": \"\",\n  \"restrictions\": {\n    \"reason\": \"\"\n  },\n  \"total_tracks\": {{faker 'random.number'}},\n  \"tracks\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"disc_number\": {{faker 'random.number'}},\n        \"duration_ms\": {{faker 'random.number'}},\n        \"explicit\": {{faker 'random.boolean'}},\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"is_local\": {{faker 'random.boolean'}},\n        \"is_playable\": {{faker 'random.boolean'}},\n        \"linked_from\": {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"name\": \"\",\n        \"preview_url\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"track_number\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is 200 OK and the response body contains an album object in JSON format. On error, the header status code is an error code and the response body contains an error object.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get an Album's Tracks",
                        "method": "get",
                        "endpoint": "albums/:id/tracks",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"artists\": [\n        {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"name\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      ],\n      \"available_markets\": [\n        \"\"\n      ],\n      \"disc_number\": {{faker 'random.number'}},\n      \"duration_ms\": {{faker 'random.number'}},\n      \"explicit\": {{faker 'random.boolean'}},\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"is_local\": {{faker 'random.boolean'}},\n      \"is_playable\": {{faker 'random.boolean'}},\n      \"linked_from\": {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"name\": \"\",\n      \"preview_url\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"track_number\": {{faker 'random.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ],\n  \"limit\": {{faker 'random.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'random.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is 200 OK and the response body contains an album object in JSON format. On error, the header status code is an error code and the response body contains an error object.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get Multiple Artists",
                        "method": "get",
                        "endpoint": "artists",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"artists\": [\n    {\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"followers\": {\n        \"href\": \"\",\n        \"total\": {{faker 'random.number'}}\n      },\n      \"genres\": [\n        \"\"\n      ],\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"popularity\": {{faker 'random.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `\"artists\"` and whose value is an array of [artist objects](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject) in JSON format.\n\nObjects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get an Artist",
                        "method": "get",
                        "endpoint": "artists/:id",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"followers\": {\n    \"href\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"genres\": [\n    \"\"\n  ],\n  \"href\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'random.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'random.number'}}\n    }\n  ],\n  \"name\": \"\",\n  \"popularity\": {{faker 'random.number'}},\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an [artist object](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get an Artist's Albums",
                        "method": "get",
                        "endpoint": "artists/:id/albums",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"album_group\": \"\",\n      \"album_type\": \"\",\n      \"artists\": [\n        {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"name\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      ],\n      \"available_markets\": [\n        \"\"\n      ],\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"release_date\": \"\",\n      \"release_date_precision\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"total_tracks\": {{faker 'random.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ],\n  \"limit\": {{faker 'random.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'random.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified [album objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedalbumobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get an Artist's Related Artists",
                        "method": "get",
                        "endpoint": "artists/:id/related-artists",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"artists\": [\n    {\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"followers\": {\n        \"href\": \"\",\n        \"total\": {{faker 'random.number'}}\n      },\n      \"genres\": [\n        \"\"\n      ],\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"popularity\": {{faker 'random.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `\"artists\"` and whose value is an array of up to 20 [artist objects](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get an Artist's Top Tracks",
                        "method": "get",
                        "endpoint": "artists/:id/top-tracks",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"tracks\": [\n    {\n      \"album\": {\n        \"album_group\": \"\",\n        \"album_type\": \"\",\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"total_tracks\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"artists\": [\n        {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'random.number'}}\n          },\n          \"genres\": [\n            \"\"\n          ],\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"name\": \"\",\n          \"popularity\": {{faker 'random.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      ],\n      \"available_markets\": [\n        \"\"\n      ],\n      \"disc_number\": {{faker 'random.number'}},\n      \"duration_ms\": {{faker 'random.number'}},\n      \"explicit\": {{faker 'random.boolean'}},\n      \"external_ids\": {\n        \"ean\": \"\",\n        \"isrc\": \"\",\n        \"upc\": \"\"\n      },\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"is_local\": {{faker 'random.boolean'}},\n      \"is_playable\": {{faker 'random.boolean'}},\n      \"linked_from\": {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"name\": \"\",\n      \"popularity\": {{faker 'random.number'}},\n      \"preview_url\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"track_number\": {{faker 'random.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `\"tracks\"` and whose value is an array of up to 10 [track objects](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get Audio Analysis for a Track",
                        "method": "get",
                        "endpoint": "audio-analysis/:id",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"bars\": [\n    {\n      \"confidence\": {{faker 'random.number'}},\n      \"duration\": {{faker 'random.number'}},\n      \"start\": {{faker 'random.number'}}\n    }\n  ],\n  \"beats\": [\n    {\n      \"confidence\": {{faker 'random.number'}},\n      \"duration\": {{faker 'random.number'}},\n      \"start\": {{faker 'random.number'}}\n    }\n  ],\n  \"sections\": [\n    {\n      \"confidence\": {{faker 'random.number'}},\n      \"duration\": {{faker 'random.number'}},\n      \"key\": {{faker 'random.number'}},\n      \"key_confidence\": {{faker 'random.number'}},\n      \"loudness\": {{faker 'random.number'}},\n      \"mode\": {{faker 'random.number'}},\n      \"mode_confidence\": {{faker 'random.number'}},\n      \"start\": {{faker 'random.number'}},\n      \"tempo\": {{faker 'random.number'}},\n      \"tempo_confidence\": {{faker 'random.number'}},\n      \"time_signature\": {{faker 'random.number'}},\n      \"time_signature_confidence\": {{faker 'random.number'}}\n    }\n  ],\n  \"segments\": [\n    {\n      \"confidence\": {{faker 'random.number'}},\n      \"duration\": {{faker 'random.number'}},\n      \"loudness_end\": {{faker 'random.number'}},\n      \"loudness_max\": {{faker 'random.number'}},\n      \"loudness_max_time\": {{faker 'random.number'}},\n      \"loudness_start\": {{faker 'random.number'}},\n      \"pitches\": [\n        {{faker 'random.number'}}\n      ],\n      \"start\": {{faker 'random.number'}},\n      \"timbre\": [\n        {{faker 'random.number'}}\n      ]\n    }\n  ],\n  \"tatums\": [\n    {\n      \"confidence\": {{faker 'random.number'}},\n      \"duration\": {{faker 'random.number'}},\n      \"start\": {{faker 'random.number'}}\n    }\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200 OK` and the response body contains an audio analysis object in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get Audio Features for Several Tracks",
                        "method": "get",
                        "endpoint": "audio-features",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"audio_features\": [\n    {\n      \"acousticness\": {{faker 'random.number'}},\n      \"analysis_url\": \"\",\n      \"danceability\": {{faker 'random.number'}},\n      \"duration_ms\": {{faker 'random.number'}},\n      \"energy\": {{faker 'random.number'}},\n      \"id\": \"\",\n      \"instrumentalness\": {{faker 'random.number'}},\n      \"key\": {{faker 'random.number'}},\n      \"liveness\": {{faker 'random.number'}},\n      \"loudness\": {{faker 'random.number'}},\n      \"mode\": {{faker 'random.number'}},\n      \"speechiness\": {{faker 'random.number'}},\n      \"tempo\": {{faker 'random.number'}},\n      \"time_signature\": {{faker 'random.number'}},\n      \"track_href\": \"\",\n      \"type\": \"\",\n      \"uri\": \"\",\n      \"valence\": {{faker 'random.number'}}\n    }\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200 OK`\nand the response body contains an object whose key is `\"audio_features\"` and\nwhose value is an array of audio features objects in JSON format.\n\nObjects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get Audio Features for a Track",
                        "method": "get",
                        "endpoint": "audio-features/:id",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"acousticness\": {{faker 'random.number'}},\n  \"analysis_url\": \"\",\n  \"danceability\": {{faker 'random.number'}},\n  \"duration_ms\": {{faker 'random.number'}},\n  \"energy\": {{faker 'random.number'}},\n  \"id\": \"\",\n  \"instrumentalness\": {{faker 'random.number'}},\n  \"key\": {{faker 'random.number'}},\n  \"liveness\": {{faker 'random.number'}},\n  \"loudness\": {{faker 'random.number'}},\n  \"mode\": {{faker 'random.number'}},\n  \"speechiness\": {{faker 'random.number'}},\n  \"tempo\": {{faker 'random.number'}},\n  \"time_signature\": {{faker 'random.number'}},\n  \"track_href\": \"\",\n  \"type\": \"\",\n  \"uri\": \"\",\n  \"valence\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200 OK` and the response body contains an [audio features object](https://developer.spotify.com/documentation/web-api/reference/#object-audiofeaturesobject) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get All Categories",
                        "method": "get",
                        "endpoint": "browse/categories",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"categories\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"href\": \"\",\n        \"icons\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"id\": \"\",\n        \"name\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an object with a `categories` field, with an array of [category objects](#categoryobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\n\nOnce you have retrieved the list, you can use [Get a Category](https://developer.spotify.com/web-api/get-category/) to drill down further.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get a Category",
                        "method": "get",
                        "endpoint": "browse/categories/:category_id",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"href\": \"\",\n  \"icons\": [\n    {\n      \"height\": {{faker 'random.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'random.number'}}\n    }\n  ],\n  \"id\": \"\",\n  \"name\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a [category object](#categoryobject) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\n\nOnce you have retrieved the category, you can use [Get a Category's Playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) to drill down further.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get a Category's Playlists",
                        "method": "get",
                        "endpoint": "browse/categories/:category_id/playlists",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"playlists\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"collaborative\": {{faker 'random.boolean'}},\n        \"description\": \"\",\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"owner\": {\n          \"display_name\": \"\",\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'random.number'}}\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"public\": {{faker 'random.boolean'}},\n        \"snapshot_id\": \"\",\n        \"tracks\": {\n          \"href\": \"\",\n          \"total\": {{faker 'random.number'}}\n        },\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified [playlist objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\n\nOnce you have retrieved the list, you can use [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) and [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) to drill down further.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get All Featured Playlists",
                        "method": "get",
                        "endpoint": "browse/featured-playlists",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"message\": \"\",\n  \"playlists\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"collaborative\": {{faker 'random.boolean'}},\n        \"description\": \"\",\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"owner\": {\n          \"display_name\": \"\",\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'random.number'}}\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"public\": {{faker 'random.boolean'}},\n        \"snapshot_id\": \"\",\n        \"tracks\": {\n          \"href\": \"\",\n          \"total\": {{faker 'random.number'}}\n        },\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a `message` and a `playlists` object. The `playlists` object contains an array of simplified [playlist objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\n\nOnce you have retrieved the list of playlist objects, you can use [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) and [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) to drill down further.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get All New Releases",
                        "method": "get",
                        "endpoint": "browse/new-releases",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"albums\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"album_group\": \"\",\n        \"album_type\": \"\",\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"total_tracks\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a `message` and an`albums` object. The `albums` object contains an array of simplified [album objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedalbumobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\n\nOnce you have retrieved the list, you can use [Get an Album's Tracks](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-albums-tracks) to drill down further.\n\nThe results are returned in an order reflected within the Spotify clients, and therefore may not be ordered by date.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get Multiple Episodes",
                        "method": "get",
                        "endpoint": "episodes",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"episodes\": [\n    {\n      \"audio_preview_url\": \"\",\n      \"description\": \"\",\n      \"duration_ms\": {{faker 'random.number'}},\n      \"explicit\": {{faker 'random.boolean'}},\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"html_description\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"is_externally_hosted\": {{faker 'random.boolean'}},\n      \"is_playable\": {{faker 'random.boolean'}},\n      \"language\": \"\",\n      \"languages\": [\n        \"\"\n      ],\n      \"name\": \"\",\n      \"release_date\": \"\",\n      \"release_date_precision\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"resume_point\": {\n        \"fully_played\": {{faker 'random.boolean'}},\n        \"resume_position_ms\": {{faker 'random.number'}}\n      },\n      \"show\": {\n        \"available_markets\": [\n          \"\"\n        ],\n        \"copyrights\": [\n          {\n            \"text\": \"\",\n            \"type\": \"\"\n          }\n        ],\n        \"description\": \"\",\n        \"explicit\": {{faker 'random.boolean'}},\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"html_description\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"is_externally_hosted\": {{faker 'random.boolean'}},\n        \"languages\": [\n          \"\"\n        ],\n        \"media_type\": \"\",\n        \"name\": \"\",\n        \"publisher\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200`\nOK and the response body contains an object whose key is `episodes` and whose\nvalue is an array of [episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-episodeobject)\nin JSON format.\n\nObjects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position.\nDuplicate `ids` in the query will result in duplicate objects in the response. If an episode is unavailable in the given `market`, a `null` value is returned.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get an Episode",
                        "method": "get",
                        "endpoint": "episodes/:id",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"audio_preview_url\": \"\",\n  \"description\": \"\",\n  \"duration_ms\": {{faker 'random.number'}},\n  \"explicit\": {{faker 'random.boolean'}},\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"href\": \"\",\n  \"html_description\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'random.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'random.number'}}\n    }\n  ],\n  \"is_externally_hosted\": {{faker 'random.boolean'}},\n  \"is_playable\": {{faker 'random.boolean'}},\n  \"language\": \"\",\n  \"languages\": [\n    \"\"\n  ],\n  \"name\": \"\",\n  \"release_date\": \"\",\n  \"release_date_precision\": \"\",\n  \"restrictions\": {\n    \"reason\": \"\"\n  },\n  \"resume_point\": {\n    \"fully_played\": {{faker 'random.boolean'}},\n    \"resume_position_ms\": {{faker 'random.number'}}\n  },\n  \"show\": {\n    \"available_markets\": [\n      \"\"\n    ],\n    \"copyrights\": [\n      {\n        \"text\": \"\",\n        \"type\": \"\"\n      }\n    ],\n    \"description\": \"\",\n    \"explicit\": {{faker 'random.boolean'}},\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"href\": \"\",\n    \"html_description\": \"\",\n    \"id\": \"\",\n    \"images\": [\n      {\n        \"height\": {{faker 'random.number'}},\n        \"url\": \"\",\n        \"width\": {{faker 'random.number'}}\n      }\n    ],\n    \"is_externally_hosted\": {{faker 'random.boolean'}},\n    \"languages\": [\n      \"\"\n    ],\n    \"media_type\": \"\",\n    \"name\": \"\",\n    \"publisher\": \"\",\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200`\nOK and the response body contains an [episode object](https://developer.spotify.com/documentation/web-api/reference/#object-episodeobject)\nin JSON format.  \n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\nand the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).  \n\nIf an episode is unavailable in the given `market` the HTTP status code in the response header is `404` NOT FOUND.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get Available Markets",
                        "method": "get",
                        "endpoint": "markets",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"markets\": [\n    \"\"\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is 200 OK and the response body contains a list of the countries in which Spotify is available, identified by their [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) with additional country codes for special territories. On error, the header status code is an error code and the response body contains an error object.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get Current User's Profile",
                        "method": "get",
                        "endpoint": "me",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"country\": \"\",\n  \"display_name\": \"\",\n  \"email\": \"\",\n  \"explicit_content\": {\n    \"filter_enabled\": {{faker 'random.boolean'}},\n    \"filter_locked\": {{faker 'random.boolean'}}\n  },\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"followers\": {\n    \"href\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"href\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'random.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'random.number'}}\n    }\n  ],\n  \"product\": \"\",\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a [user object](https://developer.spotify.com/documentation/web-api/reference/#object-privateuserobject) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). When requesting fields that you don't have the user's authorization to access, it will return error `403` Forbidden.\n\n**Important!** If the `user-read-email` scope is authorized, the returned JSON will include the email address that was entered when the user created their Spotify account. **This email address is unverified**; do not assume that the email address belongs to the user.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Remove Albums for Current User",
                        "method": "delete",
                        "endpoint": "me/albums",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` Success. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to remove an album when you do not have the user's authorization returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get User's Saved Albums",
                        "method": "get",
                        "endpoint": "me/albums",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"added_at\": \"{{faker 'date.recent' 365}}\",\n      \"album\": {\n        \"album_type\": \"\",\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"followers\": {\n              \"href\": \"\",\n              \"total\": {{faker 'random.number'}}\n            },\n            \"genres\": [\n              \"\"\n            ],\n            \"href\": \"\",\n            \"id\": \"\",\n            \"images\": [\n              {\n                \"height\": {{faker 'random.number'}},\n                \"url\": \"\",\n                \"width\": {{faker 'random.number'}}\n              }\n            ],\n            \"name\": \"\",\n            \"popularity\": {{faker 'random.number'}},\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"copyrights\": [\n          {\n            \"text\": \"\",\n            \"type\": \"\"\n          }\n        ],\n        \"external_ids\": {\n          \"ean\": \"\",\n          \"isrc\": \"\",\n          \"upc\": \"\"\n        },\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"genres\": [\n          \"\"\n        ],\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"label\": \"\",\n        \"name\": \"\",\n        \"popularity\": {{faker 'random.number'}},\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"total_tracks\": {{faker 'random.number'}},\n        \"tracks\": {\n          \"href\": \"\",\n          \"items\": [\n            {\n              \"artists\": [\n                {\n                  \"external_urls\": {\n                    \"spotify\": \"\"\n                  },\n                  \"href\": \"\",\n                  \"id\": \"\",\n                  \"name\": \"\",\n                  \"type\": \"\",\n                  \"uri\": \"\"\n                }\n              ],\n              \"available_markets\": [\n                \"\"\n              ],\n              \"disc_number\": {{faker 'random.number'}},\n              \"duration_ms\": {{faker 'random.number'}},\n              \"explicit\": {{faker 'random.boolean'}},\n              \"external_urls\": {\n                \"spotify\": \"\"\n              },\n              \"href\": \"\",\n              \"id\": \"\",\n              \"is_local\": {{faker 'random.boolean'}},\n              \"is_playable\": {{faker 'random.boolean'}},\n              \"linked_from\": {\n                \"external_urls\": {\n                  \"spotify\": \"\"\n                },\n                \"href\": \"\",\n                \"id\": \"\",\n                \"type\": \"\",\n                \"uri\": \"\"\n              },\n              \"name\": \"\",\n              \"preview_url\": \"\",\n              \"restrictions\": {\n                \"reason\": \"\"\n              },\n              \"track_number\": {{faker 'random.number'}},\n              \"type\": \"\",\n              \"uri\": \"\"\n            }\n          ],\n          \"limit\": {{faker 'random.number'}},\n          \"next\": \"\",\n          \"offset\": {{faker 'random.number'}},\n          \"previous\": \"\",\n          \"total\": {{faker 'random.number'}}\n        },\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    }\n  ],\n  \"limit\": {{faker 'random.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'random.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [saved album objects](https://developer.spotify.com/documentation/web-api/reference/#object-savedalbumobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. Each album object is accompanied by a [timestamp](https://developer.spotify.com/documentation/web-api/#timestamps) (`added_at`) to show when it was added. There is also an **etag** in the header that can be used in future [conditional requests](https://developer.spotify.com/documentation/web-api/#conditional-requests).\n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Save Albums for Current User",
                        "method": "put",
                        "endpoint": "me/albums",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 201,
                                "label": "On success, the HTTP status code in the response header is `201` Created. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to add an album when you do not have the user's authorization returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Check User's Saved Albums",
                        "method": "get",
                        "endpoint": "me/albums/contains",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "[\n  {{faker 'random.boolean'}}\n]",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Remove User's Saved Episodes",
                        "method": "delete",
                        "endpoint": "me/episodes",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` Success. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to remove an episode when you do not have the user's authorization returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get User's Saved Episodes",
                        "method": "get",
                        "endpoint": "me/episodes",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"added_at\": \"{{faker 'date.recent' 365}}\",\n      \"episode\": {\n        \"audio_preview_url\": \"\",\n        \"description\": \"\",\n        \"duration_ms\": {{faker 'random.number'}},\n        \"explicit\": {{faker 'random.boolean'}},\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"html_description\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"is_externally_hosted\": {{faker 'random.boolean'}},\n        \"is_playable\": {{faker 'random.boolean'}},\n        \"language\": \"\",\n        \"languages\": [\n          \"\"\n        ],\n        \"name\": \"\",\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"resume_point\": {\n          \"fully_played\": {{faker 'random.boolean'}},\n          \"resume_position_ms\": {{faker 'random.number'}}\n        },\n        \"show\": {\n          \"available_markets\": [\n            \"\"\n          ],\n          \"copyrights\": [\n            {\n              \"text\": \"\",\n              \"type\": \"\"\n            }\n          ],\n          \"description\": \"\",\n          \"explicit\": {{faker 'random.boolean'}},\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"html_description\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"is_externally_hosted\": {{faker 'random.boolean'}},\n          \"languages\": [\n            \"\"\n          ],\n          \"media_type\": \"\",\n          \"name\": \"\",\n          \"publisher\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    }\n  ],\n  \"limit\": {{faker 'random.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'random.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "- On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [saved episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-savedepisodeobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Save Episodes for User",
                        "method": "put",
                        "endpoint": "me/episodes",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to add an episode when you do not have the user's authorization, returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Check User's Saved Episodes",
                        "method": "get",
                        "endpoint": "me/episodes/contains",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "[\n  {{faker 'random.boolean'}}\n]",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Unfollow Artists or Users",
                        "method": "delete",
                        "endpoint": "me/following",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "On success, the HTTP status code in the response header is `204` No Content and the response body is empty.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get User's Followed Artists",
                        "method": "get",
                        "endpoint": "me/following",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"artists\": {\n    \"cursors\": {\n      \"after\": \"\"\n    },\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"followers\": {\n          \"href\": \"\",\n          \"total\": {{faker 'random.number'}}\n        },\n        \"genres\": [\n          \"\"\n        ],\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"popularity\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"total\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an `artists` object.\nThe `artists` object in turn contains a [cursor-based paging object](https://developer.spotify.com/documentation/web-api/reference/#object-cursorpagingobject) of [Artists](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject).\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Follow Artists or Users",
                        "method": "put",
                        "endpoint": "me/following",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "On success, the HTTP status code in the response header is `204` No Content and the response body is empty.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get Following State for Artists/Users",
                        "method": "get",
                        "endpoint": "me/following/contains",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "[\n  {{faker 'random.boolean'}}\n]",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get Information About The User's Current Playback",
                        "method": "get",
                        "endpoint": "me/player",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"actions\": {\n    \"interrupting_playback\": {{faker 'random.boolean'}},\n    \"pausing\": {{faker 'random.boolean'}},\n    \"resuming\": {{faker 'random.boolean'}},\n    \"seeking\": {{faker 'random.boolean'}},\n    \"skipping_next\": {{faker 'random.boolean'}},\n    \"skipping_prev\": {{faker 'random.boolean'}},\n    \"toggling_repeat_context\": {{faker 'random.boolean'}},\n    \"toggling_repeat_track\": {{faker 'random.boolean'}},\n    \"toggling_shuffle\": {{faker 'random.boolean'}},\n    \"transferring_playback\": {{faker 'random.boolean'}}\n  },\n  \"context\": {\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"href\": \"\",\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"currently_playing_type\": \"\",\n  \"device\": {\n    \"id\": \"\",\n    \"is_active\": {{faker 'random.boolean'}},\n    \"is_private_session\": {{faker 'random.boolean'}},\n    \"is_restricted\": {{faker 'random.boolean'}},\n    \"name\": \"\",\n    \"type\": \"\",\n    \"volume_percent\": {{faker 'random.number'}}\n  },\n  \"is_playing\": {{faker 'random.boolean'}},\n  \"item\": {\n    \"album\": {\n      \"album_group\": \"\",\n      \"album_type\": \"\",\n      \"artists\": [\n        {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"name\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      ],\n      \"available_markets\": [\n        \"\"\n      ],\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"release_date\": \"\",\n      \"release_date_precision\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"total_tracks\": {{faker 'random.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    },\n    \"artists\": [\n      {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"followers\": {\n          \"href\": \"\",\n          \"total\": {{faker 'random.number'}}\n        },\n        \"genres\": [\n          \"\"\n        ],\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"popularity\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"available_markets\": [\n      \"\"\n    ],\n    \"disc_number\": {{faker 'random.number'}},\n    \"duration_ms\": {{faker 'random.number'}},\n    \"explicit\": {{faker 'random.boolean'}},\n    \"external_ids\": {\n      \"ean\": \"\",\n      \"isrc\": \"\",\n      \"upc\": \"\"\n    },\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"href\": \"\",\n    \"id\": \"\",\n    \"is_local\": {{faker 'random.boolean'}},\n    \"is_playable\": {{faker 'random.boolean'}},\n    \"linked_from\": {\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"type\": \"\",\n      \"uri\": \"\"\n    },\n    \"name\": \"\",\n    \"popularity\": {{faker 'random.number'}},\n    \"preview_url\": \"\",\n    \"restrictions\": {\n      \"reason\": \"\"\n    },\n    \"track_number\": {{faker 'random.number'}},\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"progress_ms\": {{faker 'random.number'}},\n  \"repeat_state\": \"\",\n  \"shuffle_state\": \"\",\n  \"timestamp\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "A successful request will return a `200 OK` response code with a json payload that contains information about the current playback. The information returned is for the last known state, which means an inactive device could be returned if it was the last one to execute playback.\nWhen no available devices are found, the request will return a `200 OK` response but with no data populated.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "A successful request will return a `200 OK` response code with a json payload that contains information about the current playback. The information returned is for the last known state, which means an inactive device could be returned if it was the last one to execute playback.\nWhen no available devices are found, the request will return a `200 OK` response but with no data populated.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Transfer a User's Playback",
                        "method": "put",
                        "endpoint": "me/player",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get the User's Currently Playing Track",
                        "method": "get",
                        "endpoint": "me/player/currently-playing",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"context\": {\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"href\": \"\",\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"currently_playing_type\": \"\",\n  \"is_playing\": {{faker 'random.boolean'}},\n  \"item\": {\n    \"album\": {\n      \"album_group\": \"\",\n      \"album_type\": \"\",\n      \"artists\": [\n        {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"name\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      ],\n      \"available_markets\": [\n        \"\"\n      ],\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"release_date\": \"\",\n      \"release_date_precision\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"total_tracks\": {{faker 'random.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    },\n    \"artists\": [\n      {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"followers\": {\n          \"href\": \"\",\n          \"total\": {{faker 'random.number'}}\n        },\n        \"genres\": [\n          \"\"\n        ],\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"popularity\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"available_markets\": [\n      \"\"\n    ],\n    \"disc_number\": {{faker 'random.number'}},\n    \"duration_ms\": {{faker 'random.number'}},\n    \"explicit\": {{faker 'random.boolean'}},\n    \"external_ids\": {\n      \"ean\": \"\",\n      \"isrc\": \"\",\n      \"upc\": \"\"\n    },\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"href\": \"\",\n    \"id\": \"\",\n    \"is_local\": {{faker 'random.boolean'}},\n    \"is_playable\": {{faker 'random.boolean'}},\n    \"linked_from\": {\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"type\": \"\",\n      \"uri\": \"\"\n    },\n    \"name\": \"\",\n    \"popularity\": {{faker 'random.number'}},\n    \"preview_url\": \"\",\n    \"restrictions\": {\n      \"reason\": \"\"\n    },\n    \"track_number\": {{faker 'random.number'}},\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"progress_ms\": {{faker 'random.number'}},\n  \"timestamp\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "A successful request will return a `200 OK` response code with a json payload that contains information about the currently playing track or episode and its context (see below). The information returned is for the last known state, which means an inactive device could be returned if it was the last one to execute playback.\n\nWhen no available devices are found, the request will return a `200 OK` response but with no data populated.\n\nWhen no track is currently playing, the request will return a `204 NO CONTENT` response with no payload.\n\nIf private session is enabled the response will be a `204 NO CONTENT` with an empty payload.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "A successful request will return a `200 OK` response code with a json payload that contains information about the currently playing track or episode and its context (see below). The information returned is for the last known state, which means an inactive device could be returned if it was the last one to execute playback.\n\nWhen no available devices are found, the request will return a `200 OK` response but with no data populated.\n\nWhen no track is currently playing, the request will return a `204 NO CONTENT` response with no payload.\n\nIf private session is enabled the response will be a `204 NO CONTENT` with an empty payload.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get a User's Available Devices",
                        "method": "get",
                        "endpoint": "me/player/devices",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"devices\": [\n    {\n      \"id\": \"\",\n      \"is_active\": {{faker 'random.boolean'}},\n      \"is_private_session\": {{faker 'random.boolean'}},\n      \"is_restricted\": {{faker 'random.boolean'}},\n      \"name\": \"\",\n      \"type\": \"\",\n      \"volume_percent\": {{faker 'random.number'}}\n    }\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "A successful request will return a `200 OK` response code with a json payload that contains the device objects (see below).\nWhen no available devices are found, the request will return a 200 OK response with an empty devices list.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Skip User’s Playback To Next Track",
                        "method": "post",
                        "endpoint": "me/player/next",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Pause a User's Playback",
                        "method": "put",
                        "endpoint": "me/player/pause",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Start/Resume a User's Playback",
                        "method": "put",
                        "endpoint": "me/player/play",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Skip User’s Playback To Previous Track",
                        "method": "post",
                        "endpoint": "me/player/previous",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Add an item to queue",
                        "method": "post",
                        "endpoint": "me/player/queue",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get Current User's Recently Played Tracks",
                        "method": "get",
                        "endpoint": "me/player/recently-played",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"cursors\": {\n    \"after\": \"\"\n  },\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"context\": {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"played_at\": \"{{faker 'date.recent' 365}}\",\n      \"track\": {\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"disc_number\": {{faker 'random.number'}},\n        \"duration_ms\": {{faker 'random.number'}},\n        \"explicit\": {{faker 'random.boolean'}},\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"is_local\": {{faker 'random.boolean'}},\n        \"is_playable\": {{faker 'random.boolean'}},\n        \"linked_from\": {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"name\": \"\",\n        \"preview_url\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"track_number\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    }\n  ],\n  \"limit\": {{faker 'random.number'}},\n  \"next\": \"\",\n  \"total\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [play history objects](#play-history-object) (wrapped in a [cursor-based paging object](#cursor-based-paging-object)) in JSON format. The play history items each contain the context the track was played from (e.g. playlist, album), the date and time the track was played, and a [track object (simplified)](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject). On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\n\nIf private session is enabled the response will be a `204 NO CONTENT` with an empty payload.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [play history objects](#play-history-object) (wrapped in a [cursor-based paging object](#cursor-based-paging-object)) in JSON format. The play history items each contain the context the track was played from (e.g. playlist, album), the date and time the track was played, and a [track object (simplified)](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject). On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\n\nIf private session is enabled the response will be a `204 NO CONTENT` with an empty payload.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Set Repeat Mode On User’s Playback",
                        "method": "put",
                        "endpoint": "me/player/repeat",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Seek To Position In Currently Playing Track",
                        "method": "put",
                        "endpoint": "me/player/seek",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Toggle Shuffle For User’s Playback",
                        "method": "put",
                        "endpoint": "me/player/shuffle",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Set Volume For User's Playback",
                        "method": "put",
                        "endpoint": "me/player/volume",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 204,
                                "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get a List of Current User's Playlists",
                        "method": "get",
                        "endpoint": "me/playlists",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"collaborative\": {{faker 'random.boolean'}},\n      \"description\": \"\",\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"owner\": {\n        \"display_name\": \"\",\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"followers\": {\n          \"href\": \"\",\n          \"total\": {{faker 'random.number'}}\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"public\": {{faker 'random.boolean'}},\n      \"snapshot_id\": \"\",\n      \"tracks\": {\n        \"href\": \"\",\n        \"total\": {{faker 'random.number'}}\n      },\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ],\n  \"limit\": {{faker 'random.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'random.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified [playlist objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Please note that the access token has to be tied to a user.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Remove User's Saved Shows",
                        "method": "delete",
                        "endpoint": "me/shows",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details). A `403 Forbidden` while trying to add a show when you do not have the user's authorisation.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get User's Saved Shows",
                        "method": "get",
                        "endpoint": "me/shows",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"added_at\": \"{{faker 'date.recent' 365}}\",\n      \"show\": {\n        \"available_markets\": [\n          \"\"\n        ],\n        \"copyrights\": [\n          {\n            \"text\": \"\",\n            \"type\": \"\"\n          }\n        ],\n        \"description\": \"\",\n        \"explicit\": {{faker 'random.boolean'}},\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"html_description\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"is_externally_hosted\": {{faker 'random.boolean'}},\n        \"languages\": [\n          \"\"\n        ],\n        \"media_type\": \"\",\n        \"name\": \"\",\n        \"publisher\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    }\n  ],\n  \"limit\": {{faker 'random.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'random.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [saved show objects](https://developer.spotify.com/documentation/web-api/reference/#object-savedshowobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format.\nIf the current user has no shows saved, the response will be an empty array. If a show is unavailable in the given `market` it is filtered out. The `total` field in the paging object represents the number of all items, filtered or not, and thus might be larger than the actual total number of observable items.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Save Shows for Current User",
                        "method": "put",
                        "endpoint": "me/shows",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details). A `403 Forbidden` while trying to add a show when you do not have the user's authorisation or when the user already has have over 10,000 items saved in library.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Check User's Saved Shows",
                        "method": "get",
                        "endpoint": "me/shows/contains",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "[\n  {{faker 'random.boolean'}}\n]",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true`or `false` values, in the same order in which the `ids` were specified. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get a User's Top Artists and Tracks",
                        "method": "get",
                        "endpoint": "me/top/:type",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"followers\": {\n        \"href\": \"\",\n        \"total\": {{faker 'random.number'}}\n      },\n      \"genres\": [\n        \"\"\n      ],\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"popularity\": {{faker 'random.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ],\n  \"limit\": {{faker 'random.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'random.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200 OK` and the response body contains a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject) of [Artists](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject) or [Tracks](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject). On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Remove User's Saved Tracks",
                        "method": "delete",
                        "endpoint": "me/tracks",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` Success. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to remove an album when you do not have the user's authorization returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get User's Saved Tracks",
                        "method": "get",
                        "endpoint": "me/tracks",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"added_at\": \"{{faker 'date.recent' 365}}\",\n      \"track\": {\n        \"album\": {\n          \"album_group\": \"\",\n          \"album_type\": \"\",\n          \"artists\": [\n            {\n              \"external_urls\": {\n                \"spotify\": \"\"\n              },\n              \"href\": \"\",\n              \"id\": \"\",\n              \"name\": \"\",\n              \"type\": \"\",\n              \"uri\": \"\"\n            }\n          ],\n          \"available_markets\": [\n            \"\"\n          ],\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"name\": \"\",\n          \"release_date\": \"\",\n          \"release_date_precision\": \"\",\n          \"restrictions\": {\n            \"reason\": \"\"\n          },\n          \"total_tracks\": {{faker 'random.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"followers\": {\n              \"href\": \"\",\n              \"total\": {{faker 'random.number'}}\n            },\n            \"genres\": [\n              \"\"\n            ],\n            \"href\": \"\",\n            \"id\": \"\",\n            \"images\": [\n              {\n                \"height\": {{faker 'random.number'}},\n                \"url\": \"\",\n                \"width\": {{faker 'random.number'}}\n              }\n            ],\n            \"name\": \"\",\n            \"popularity\": {{faker 'random.number'}},\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"disc_number\": {{faker 'random.number'}},\n        \"duration_ms\": {{faker 'random.number'}},\n        \"explicit\": {{faker 'random.boolean'}},\n        \"external_ids\": {\n          \"ean\": \"\",\n          \"isrc\": \"\",\n          \"upc\": \"\"\n        },\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"is_local\": {{faker 'random.boolean'}},\n        \"is_playable\": {{faker 'random.boolean'}},\n        \"linked_from\": {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"name\": \"\",\n        \"popularity\": {{faker 'random.number'}},\n        \"preview_url\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"track_number\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    }\n  ],\n  \"limit\": {{faker 'random.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'random.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [saved track objects](https://developer.spotify.com/documentation/web-api/reference/#object-savedtrackobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Save Tracks for User",
                        "method": "put",
                        "endpoint": "me/tracks",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to add a track when you do not have the user's authorization, or when you have over 10.000 tracks in Your Music, returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Check User's Saved Tracks",
                        "method": "get",
                        "endpoint": "me/tracks/contains",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "[\n  {{faker 'random.boolean'}}\n]",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get a Playlist",
                        "method": "get",
                        "endpoint": "playlists/:playlist_id",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"collaborative\": {{faker 'random.boolean'}},\n  \"description\": \"\",\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"followers\": {\n    \"href\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"href\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'random.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'random.number'}}\n    }\n  ],\n  \"name\": \"\",\n  \"owner\": {\n    \"display_name\": \"\",\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"followers\": {\n      \"href\": \"\",\n      \"total\": {{faker 'random.number'}}\n    },\n    \"href\": \"\",\n    \"id\": \"\",\n    \"images\": [\n      {\n        \"height\": {{faker 'random.number'}},\n        \"url\": \"\",\n        \"width\": {{faker 'random.number'}}\n      }\n    ],\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"public\": {{faker 'random.boolean'}},\n  \"snapshot_id\": \"\",\n  \"tracks\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"added_at\": \"{{faker 'date.recent' 365}}\",\n        \"added_by\": {\n          \"display_name\": \"\",\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'random.number'}}\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"is_local\": {{faker 'random.boolean'}},\n        \"track\": {\n          \"album\": {\n            \"album_group\": \"\",\n            \"album_type\": \"\",\n            \"artists\": [\n              {\n                \"external_urls\": {\n                  \"spotify\": \"\"\n                },\n                \"href\": \"\",\n                \"id\": \"\",\n                \"name\": \"\",\n                \"type\": \"\",\n                \"uri\": \"\"\n              }\n            ],\n            \"available_markets\": [\n              \"\"\n            ],\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"images\": [\n              {\n                \"height\": {{faker 'random.number'}},\n                \"url\": \"\",\n                \"width\": {{faker 'random.number'}}\n              }\n            ],\n            \"name\": \"\",\n            \"release_date\": \"\",\n            \"release_date_precision\": \"\",\n            \"restrictions\": {\n              \"reason\": \"\"\n            },\n            \"total_tracks\": {{faker 'random.number'}},\n            \"type\": \"\",\n            \"uri\": \"\"\n          },\n          \"artists\": [\n            {\n              \"external_urls\": {\n                \"spotify\": \"\"\n              },\n              \"followers\": {\n                \"href\": \"\",\n                \"total\": {{faker 'random.number'}}\n              },\n              \"genres\": [\n                \"\"\n              ],\n              \"href\": \"\",\n              \"id\": \"\",\n              \"images\": [\n                {\n                  \"height\": {{faker 'random.number'}},\n                  \"url\": \"\",\n                  \"width\": {{faker 'random.number'}}\n                }\n              ],\n              \"name\": \"\",\n              \"popularity\": {{faker 'random.number'}},\n              \"type\": \"\",\n              \"uri\": \"\"\n            }\n          ],\n          \"available_markets\": [\n            \"\"\n          ],\n          \"disc_number\": {{faker 'random.number'}},\n          \"duration_ms\": {{faker 'random.number'}},\n          \"explicit\": {{faker 'random.boolean'}},\n          \"external_ids\": {\n            \"ean\": \"\",\n            \"isrc\": \"\",\n            \"upc\": \"\"\n          },\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"is_local\": {{faker 'random.boolean'}},\n          \"is_playable\": {{faker 'random.boolean'}},\n          \"linked_from\": {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          },\n          \"name\": \"\",\n          \"popularity\": {{faker 'random.number'}},\n          \"preview_url\": \"\",\n          \"restrictions\": {\n            \"reason\": \"\"\n          },\n          \"track_number\": {{faker 'random.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the response body contains a [playlist object](https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject) in JSON format and the HTTP status code in the response header is `200` OK. If an episode is unavailable in the given `market`, its information will not be included in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Requesting playlists that you do not have the user's authorization to access returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Change a Playlist's Details",
                        "method": "put",
                        "endpoint": "playlists/:playlist_id",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success the HTTP status code in the response header is `200` OK.\n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to change a playlist when you do not have the user's authorization returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Unfollow Playlist",
                        "method": "delete",
                        "endpoint": "playlists/:playlist_id/followers",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body is empty.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Follow a Playlist",
                        "method": "put",
                        "endpoint": "playlists/:playlist_id/followers",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body is empty.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Check if Users Follow a Playlist",
                        "method": "get",
                        "endpoint": "playlists/:playlist_id/followers/contains",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "[\n  {{faker 'random.boolean'}}\n]",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get a Playlist Cover Image",
                        "method": "get",
                        "endpoint": "playlists/:playlist_id/images",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "[\n  {\n    \"height\": {{faker 'random.number'}},\n    \"url\": \"\",\n    \"width\": {{faker 'random.number'}}\n  }\n]",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the response body contains a list of [image objects](https://developer.spotify.com/documentation/web-api/reference/#object-imageobject) in JSON format and the HTTP status code in the response header is `200` OK  \nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Upload a Custom Playlist Cover Image",
                        "method": "put",
                        "endpoint": "playlists/:playlist_id/images",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "",
                                "latency": 0,
                                "statusCode": 202,
                                "label": "If you get status code `429`, it means that you have sent too many requests.\nIf this happens, have a look in the `Retry-After` header, where you will see a number displayed.\nThis is the amount of seconds that you need to wait, before you can retry sending your requests.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Remove Items from a Playlist",
                        "method": "delete",
                        "endpoint": "playlists/:playlist_id/tracks",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"snapshot_id\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the response body contains a `snapshot_id` in JSON format\nand the HTTP status code in the response header is `200` OK. The `snapshot_id`\ncan be used to identify your playlist version in future requests.\n\nOn error, the header status code is an [error code](https://developer.spotify.com/spotify-documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/spotify-documentation/web-api/#response-schema).\nTrying to remove an item when you do not have the user's authorization returns error `403` Forbidden.\nAttempting to use several different ways to remove items returns `400` Bad Request.\nOther client errors returning `400` Bad Request include specifying invalid positions.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get a Playlist's Items",
                        "method": "get",
                        "endpoint": "playlists/:playlist_id/tracks",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"added_at\": \"{{faker 'date.recent' 365}}\",\n      \"added_by\": {\n        \"display_name\": \"\",\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"followers\": {\n          \"href\": \"\",\n          \"total\": {{faker 'random.number'}}\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"is_local\": {{faker 'random.boolean'}},\n      \"track\": {\n        \"album\": {\n          \"album_group\": \"\",\n          \"album_type\": \"\",\n          \"artists\": [\n            {\n              \"external_urls\": {\n                \"spotify\": \"\"\n              },\n              \"href\": \"\",\n              \"id\": \"\",\n              \"name\": \"\",\n              \"type\": \"\",\n              \"uri\": \"\"\n            }\n          ],\n          \"available_markets\": [\n            \"\"\n          ],\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"name\": \"\",\n          \"release_date\": \"\",\n          \"release_date_precision\": \"\",\n          \"restrictions\": {\n            \"reason\": \"\"\n          },\n          \"total_tracks\": {{faker 'random.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"followers\": {\n              \"href\": \"\",\n              \"total\": {{faker 'random.number'}}\n            },\n            \"genres\": [\n              \"\"\n            ],\n            \"href\": \"\",\n            \"id\": \"\",\n            \"images\": [\n              {\n                \"height\": {{faker 'random.number'}},\n                \"url\": \"\",\n                \"width\": {{faker 'random.number'}}\n              }\n            ],\n            \"name\": \"\",\n            \"popularity\": {{faker 'random.number'}},\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"disc_number\": {{faker 'random.number'}},\n        \"duration_ms\": {{faker 'random.number'}},\n        \"explicit\": {{faker 'random.boolean'}},\n        \"external_ids\": {\n          \"ean\": \"\",\n          \"isrc\": \"\",\n          \"upc\": \"\"\n        },\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"is_local\": {{faker 'random.boolean'}},\n        \"is_playable\": {{faker 'random.boolean'}},\n        \"linked_from\": {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"name\": \"\",\n        \"popularity\": {{faker 'random.number'}},\n        \"preview_url\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"track_number\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    }\n  ],\n  \"limit\": {{faker 'random.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'random.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the response body contains an array of [track objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject) and [episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedepisodeobject) (depends on the `additional_types` parameter), wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject) in JSON format and the HTTP status code in the response header is `200` OK. If an episode is unavailable in the given `market`, its information will not be included in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Requesting playlists that you do not have the user's authorization to access returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Add Items to a Playlist",
                        "method": "post",
                        "endpoint": "playlists/:playlist_id/tracks",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"snapshot_id\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 201,
                                "label": "On success, the HTTP status code in the response header is `201` Created. The response body contains a `snapshot_id` in JSON format. The `snapshot_id` can be used to identify your playlist version in future requests. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to add an item when you do not have the user's authorization, or when there are more than 10.000 items in the playlist, returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Reorder or Replace a Playlist's Items",
                        "method": "put",
                        "endpoint": "playlists/:playlist_id/tracks",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"snapshot_id\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On a successful **reorder** operation, the response body contains a `snapshot_id` in JSON format\nand the HTTP status code in the response header is `200` OK. The `snapshot_id`\ncan be used to identify your playlist version in future requests.\n\nOn a successful **replace** operation, the HTTP status code in the response header is `201`\nCreated.\n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes),\nthe response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema),\nand the existing playlist is unmodified.\nTrying to set an item when you do not have the user's authorization returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"snapshot_id\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 201,
                                "label": "On a successful **reorder** operation, the response body contains a `snapshot_id` in JSON format\nand the HTTP status code in the response header is `200` OK. The `snapshot_id`\ncan be used to identify your playlist version in future requests.\n\nOn a successful **replace** operation, the HTTP status code in the response header is `201`\nCreated.\n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes),\nthe response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema),\nand the existing playlist is unmodified.\nTrying to set an item when you do not have the user's authorization returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get Recommendations",
                        "method": "get",
                        "endpoint": "recommendations",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"seeds\": [\n    {\n      \"afterFilteringSize\": {{faker 'random.number'}},\n      \"afterRelinkingSize\": {{faker 'random.number'}},\n      \"href\": \"\",\n      \"id\": \"\",\n      \"initialPoolSize\": {{faker 'random.number'}},\n      \"type\": \"\"\n    }\n  ],\n  \"tracks\": [\n    {\n      \"album\": {\n        \"album_group\": \"\",\n        \"album_type\": \"\",\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"total_tracks\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"artists\": [\n        {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'random.number'}}\n          },\n          \"genres\": [\n            \"\"\n          ],\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"name\": \"\",\n          \"popularity\": {{faker 'random.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      ],\n      \"available_markets\": [\n        \"\"\n      ],\n      \"disc_number\": {{faker 'random.number'}},\n      \"duration_ms\": {{faker 'random.number'}},\n      \"explicit\": {{faker 'random.boolean'}},\n      \"external_ids\": {\n        \"ean\": \"\",\n        \"isrc\": \"\",\n        \"upc\": \"\"\n      },\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"is_local\": {{faker 'random.boolean'}},\n      \"is_playable\": {{faker 'random.boolean'}},\n      \"linked_from\": {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"name\": \"\",\n      \"popularity\": {{faker 'random.number'}},\n      \"preview_url\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"track_number\": {{faker 'random.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200 OK` and the response body contains a recommendations response object in JSON format.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get Recommendation Genres",
                        "method": "get",
                        "endpoint": "recommendations/available-genre-seeds",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"genres\": [\n    \"\"\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200 OK` and the response body contains a recommendations response object in JSON format.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Search for an Item",
                        "method": "get",
                        "endpoint": "search",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"albums\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"album_group\": \"\",\n        \"album_type\": \"\",\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"total_tracks\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"artists\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"followers\": {\n          \"href\": \"\",\n          \"total\": {{faker 'random.number'}}\n        },\n        \"genres\": [\n          \"\"\n        ],\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"popularity\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"episodes\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"audio_preview_url\": \"\",\n        \"description\": \"\",\n        \"duration_ms\": {{faker 'random.number'}},\n        \"explicit\": {{faker 'random.boolean'}},\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"html_description\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"is_externally_hosted\": {{faker 'random.boolean'}},\n        \"is_playable\": {{faker 'random.boolean'}},\n        \"language\": \"\",\n        \"languages\": [\n          \"\"\n        ],\n        \"name\": \"\",\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"resume_point\": {\n          \"fully_played\": {{faker 'random.boolean'}},\n          \"resume_position_ms\": {{faker 'random.number'}}\n        },\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"playlists\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"collaborative\": {{faker 'random.boolean'}},\n        \"description\": \"\",\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"owner\": {\n          \"display_name\": \"\",\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'random.number'}}\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"public\": {{faker 'random.boolean'}},\n        \"snapshot_id\": \"\",\n        \"tracks\": {\n          \"href\": \"\",\n          \"total\": {{faker 'random.number'}}\n        },\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"shows\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"available_markets\": [\n          \"\"\n        ],\n        \"copyrights\": [\n          {\n            \"text\": \"\",\n            \"type\": \"\"\n          }\n        ],\n        \"description\": \"\",\n        \"explicit\": {{faker 'random.boolean'}},\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"html_description\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"is_externally_hosted\": {{faker 'random.boolean'}},\n        \"languages\": [\n          \"\"\n        ],\n        \"media_type\": \"\",\n        \"name\": \"\",\n        \"publisher\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"tracks\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"album\": {\n          \"album_group\": \"\",\n          \"album_type\": \"\",\n          \"artists\": [\n            {\n              \"external_urls\": {\n                \"spotify\": \"\"\n              },\n              \"href\": \"\",\n              \"id\": \"\",\n              \"name\": \"\",\n              \"type\": \"\",\n              \"uri\": \"\"\n            }\n          ],\n          \"available_markets\": [\n            \"\"\n          ],\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"name\": \"\",\n          \"release_date\": \"\",\n          \"release_date_precision\": \"\",\n          \"restrictions\": {\n            \"reason\": \"\"\n          },\n          \"total_tracks\": {{faker 'random.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"followers\": {\n              \"href\": \"\",\n              \"total\": {{faker 'random.number'}}\n            },\n            \"genres\": [\n              \"\"\n            ],\n            \"href\": \"\",\n            \"id\": \"\",\n            \"images\": [\n              {\n                \"height\": {{faker 'random.number'}},\n                \"url\": \"\",\n                \"width\": {{faker 'random.number'}}\n              }\n            ],\n            \"name\": \"\",\n            \"popularity\": {{faker 'random.number'}},\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"disc_number\": {{faker 'random.number'}},\n        \"duration_ms\": {{faker 'random.number'}},\n        \"explicit\": {{faker 'random.boolean'}},\n        \"external_ids\": {\n          \"ean\": \"\",\n          \"isrc\": \"\",\n          \"upc\": \"\"\n        },\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"is_local\": {{faker 'random.boolean'}},\n        \"is_playable\": {{faker 'random.boolean'}},\n        \"linked_from\": {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"name\": \"\",\n        \"popularity\": {{faker 'random.number'}},\n        \"preview_url\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"track_number\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "**On success**:\n\n- In the response ***header*** the HTTP status code is `200` OK.\n- For each type provided in the `type` parameter, the response ***body*** contains an array of [artist objects](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject) / [simplified album objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedalbumobject) / [track objects](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject) / [simplified show objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedshowobject) / [simplified episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedepisodeobject) wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject) in JSON.\n\n**On error**:\n\n- The ***header*** status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes).\n- The response ***body*** contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get Multiple Shows",
                        "method": "get",
                        "endpoint": "shows",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"shows\": [\n    {\n      \"available_markets\": [\n        \"\"\n      ],\n      \"copyrights\": [\n        {\n          \"text\": \"\",\n          \"type\": \"\"\n        }\n      ],\n      \"description\": \"\",\n      \"explicit\": {{faker 'random.boolean'}},\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"html_description\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"is_externally_hosted\": {{faker 'random.boolean'}},\n      \"languages\": [\n        \"\"\n      ],\n      \"media_type\": \"\",\n      \"name\": \"\",\n      \"publisher\": \"\",\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200`\nOK and the response body contains an object whose key is `shows` and whose\nvalue is an array of [simple show object](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedshowobject)\nin JSON format.\n\nObjects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. If a show is unavailable in the given `market`, a `null` value is returned. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get a Show",
                        "method": "get",
                        "endpoint": "shows/:id",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"available_markets\": [\n    \"\"\n  ],\n  \"copyrights\": [\n    {\n      \"text\": \"\",\n      \"type\": \"\"\n    }\n  ],\n  \"description\": \"\",\n  \"episodes\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"audio_preview_url\": \"\",\n        \"description\": \"\",\n        \"duration_ms\": {{faker 'random.number'}},\n        \"explicit\": {{faker 'random.boolean'}},\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"html_description\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"is_externally_hosted\": {{faker 'random.boolean'}},\n        \"is_playable\": {{faker 'random.boolean'}},\n        \"language\": \"\",\n        \"languages\": [\n          \"\"\n        ],\n        \"name\": \"\",\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"resume_point\": {\n          \"fully_played\": {{faker 'random.boolean'}},\n          \"resume_position_ms\": {{faker 'random.number'}}\n        },\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"explicit\": {{faker 'random.boolean'}},\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"href\": \"\",\n  \"html_description\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'random.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'random.number'}}\n    }\n  ],\n  \"is_externally_hosted\": {{faker 'random.boolean'}},\n  \"languages\": [\n    \"\"\n  ],\n  \"media_type\": \"\",\n  \"name\": \"\",\n  \"publisher\": \"\",\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200`\nOK and the response body contains a [show object](https://developer.spotify.com/documentation/web-api/reference/#object-showobject)\nin JSON format.  \n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\nand the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).  \n\nIf a show is unavailable in the given `market` the HTTP status code in the response header is `404` NOT FOUND.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get a Show's Episodes",
                        "method": "get",
                        "endpoint": "shows/:id/episodes",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"audio_preview_url\": \"\",\n      \"description\": \"\",\n      \"duration_ms\": {{faker 'random.number'}},\n      \"explicit\": {{faker 'random.boolean'}},\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"html_description\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"is_externally_hosted\": {{faker 'random.boolean'}},\n      \"is_playable\": {{faker 'random.boolean'}},\n      \"language\": \"\",\n      \"languages\": [\n        \"\"\n      ],\n      \"name\": \"\",\n      \"release_date\": \"\",\n      \"release_date_precision\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"resume_point\": {\n        \"fully_played\": {{faker 'random.boolean'}},\n        \"resume_position_ms\": {{faker 'random.number'}}\n      },\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ],\n  \"limit\": {{faker 'random.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'random.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [simplified episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedepisodeobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format.  \n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details).  \n\nIf a show is unavailable in the given `market` the HTTP status code in the response header is `404` NOT FOUND. Unavailable episodes are filtered out.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get Several Tracks",
                        "method": "get",
                        "endpoint": "tracks",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"tracks\": [\n    {\n      \"album\": {\n        \"album_group\": \"\",\n        \"album_type\": \"\",\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"total_tracks\": {{faker 'random.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"artists\": [\n        {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'random.number'}}\n          },\n          \"genres\": [\n            \"\"\n          ],\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"name\": \"\",\n          \"popularity\": {{faker 'random.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      ],\n      \"available_markets\": [\n        \"\"\n      ],\n      \"disc_number\": {{faker 'random.number'}},\n      \"duration_ms\": {{faker 'random.number'}},\n      \"explicit\": {{faker 'random.boolean'}},\n      \"external_ids\": {\n        \"ean\": \"\",\n        \"isrc\": \"\",\n        \"upc\": \"\"\n      },\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"is_local\": {{faker 'random.boolean'}},\n      \"is_playable\": {{faker 'random.boolean'}},\n      \"linked_from\": {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"name\": \"\",\n      \"popularity\": {{faker 'random.number'}},\n      \"preview_url\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"track_number\": {{faker 'random.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ]\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200`\nOK and the response body contains an object whose key is `tracks` and whose\nvalue is an array of [track objects](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject)\nin JSON format.\n\nObjects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get a Track",
                        "method": "get",
                        "endpoint": "tracks/:id",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"album\": {\n    \"album_group\": \"\",\n    \"album_type\": \"\",\n    \"artists\": [\n      {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"name\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"available_markets\": [\n      \"\"\n    ],\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"href\": \"\",\n    \"id\": \"\",\n    \"images\": [\n      {\n        \"height\": {{faker 'random.number'}},\n        \"url\": \"\",\n        \"width\": {{faker 'random.number'}}\n      }\n    ],\n    \"name\": \"\",\n    \"release_date\": \"\",\n    \"release_date_precision\": \"\",\n    \"restrictions\": {\n      \"reason\": \"\"\n    },\n    \"total_tracks\": {{faker 'random.number'}},\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"artists\": [\n    {\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"followers\": {\n        \"href\": \"\",\n        \"total\": {{faker 'random.number'}}\n      },\n      \"genres\": [\n        \"\"\n      ],\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"popularity\": {{faker 'random.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ],\n  \"available_markets\": [\n    \"\"\n  ],\n  \"disc_number\": {{faker 'random.number'}},\n  \"duration_ms\": {{faker 'random.number'}},\n  \"explicit\": {{faker 'random.boolean'}},\n  \"external_ids\": {\n    \"ean\": \"\",\n    \"isrc\": \"\",\n    \"upc\": \"\"\n  },\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"href\": \"\",\n  \"id\": \"\",\n  \"is_local\": {{faker 'random.boolean'}},\n  \"is_playable\": {{faker 'random.boolean'}},\n  \"linked_from\": {\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"href\": \"\",\n    \"id\": \"\",\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"name\": \"\",\n  \"popularity\": {{faker 'random.number'}},\n  \"preview_url\": \"\",\n  \"restrictions\": {\n    \"reason\": \"\"\n  },\n  \"track_number\": {{faker 'random.number'}},\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200`\nOK and the response body contains a [track object](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject)\nin JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\nand the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get a User's Profile",
                        "method": "get",
                        "endpoint": "users/:user_id",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"display_name\": \"\",\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"followers\": {\n    \"href\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"href\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'random.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'random.number'}}\n    }\n  ],\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a [user object](https://developer.spotify.com/documentation/web-api/reference/#object-publicuserobject) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). If a user with that user_id doesn't exist, the status code is `404` NOT FOUND.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Get a List of a User's Playlists",
                        "method": "get",
                        "endpoint": "users/:user_id/playlists",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"collaborative\": {{faker 'random.boolean'}},\n      \"description\": \"\",\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'random.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'random.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"owner\": {\n        \"display_name\": \"\",\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"followers\": {\n          \"href\": \"\",\n          \"total\": {{faker 'random.number'}}\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'random.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'random.number'}}\n          }\n        ],\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"public\": {{faker 'random.boolean'}},\n      \"snapshot_id\": \"\",\n      \"tracks\": {\n        \"href\": \"\",\n        \"total\": {{faker 'random.number'}}\n      },\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ],\n  \"limit\": {{faker 'random.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'random.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'random.number'}}\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified [playlist objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    },
                    {
                        "uuid": "",
                        "documentation": "Create a Playlist",
                        "method": "post",
                        "endpoint": "users/:user_id/playlists",
                        "responses": [
                            {
                                "uuid": "",
                                "body": "{\n  \"collaborative\": {{faker 'random.boolean'}},\n  \"description\": \"\",\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"followers\": {\n    \"href\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"href\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'random.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'random.number'}}\n    }\n  ],\n  \"name\": \"\",\n  \"owner\": {\n    \"display_name\": \"\",\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"followers\": {\n      \"href\": \"\",\n      \"total\": {{faker 'random.number'}}\n    },\n    \"href\": \"\",\n    \"id\": \"\",\n    \"images\": [\n      {\n        \"height\": {{faker 'random.number'}},\n        \"url\": \"\",\n        \"width\": {{faker 'random.number'}}\n      }\n    ],\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"public\": {{faker 'random.boolean'}},\n  \"snapshot_id\": \"\",\n  \"tracks\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"added_at\": \"{{faker 'date.recent' 365}}\",\n        \"added_by\": {\n          \"display_name\": \"\",\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'random.number'}}\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"is_local\": {{faker 'random.boolean'}},\n        \"track\": {\n          \"album\": {\n            \"album_group\": \"\",\n            \"album_type\": \"\",\n            \"artists\": [\n              {\n                \"external_urls\": {\n                  \"spotify\": \"\"\n                },\n                \"href\": \"\",\n                \"id\": \"\",\n                \"name\": \"\",\n                \"type\": \"\",\n                \"uri\": \"\"\n              }\n            ],\n            \"available_markets\": [\n              \"\"\n            ],\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"images\": [\n              {\n                \"height\": {{faker 'random.number'}},\n                \"url\": \"\",\n                \"width\": {{faker 'random.number'}}\n              }\n            ],\n            \"name\": \"\",\n            \"release_date\": \"\",\n            \"release_date_precision\": \"\",\n            \"restrictions\": {\n              \"reason\": \"\"\n            },\n            \"total_tracks\": {{faker 'random.number'}},\n            \"type\": \"\",\n            \"uri\": \"\"\n          },\n          \"artists\": [\n            {\n              \"external_urls\": {\n                \"spotify\": \"\"\n              },\n              \"followers\": {\n                \"href\": \"\",\n                \"total\": {{faker 'random.number'}}\n              },\n              \"genres\": [\n                \"\"\n              ],\n              \"href\": \"\",\n              \"id\": \"\",\n              \"images\": [\n                {\n                  \"height\": {{faker 'random.number'}},\n                  \"url\": \"\",\n                  \"width\": {{faker 'random.number'}}\n                }\n              ],\n              \"name\": \"\",\n              \"popularity\": {{faker 'random.number'}},\n              \"type\": \"\",\n              \"uri\": \"\"\n            }\n          ],\n          \"available_markets\": [\n            \"\"\n          ],\n          \"disc_number\": {{faker 'random.number'}},\n          \"duration_ms\": {{faker 'random.number'}},\n          \"explicit\": {{faker 'random.boolean'}},\n          \"external_ids\": {\n            \"ean\": \"\",\n            \"isrc\": \"\",\n            \"upc\": \"\"\n          },\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"is_local\": {{faker 'random.boolean'}},\n          \"is_playable\": {{faker 'random.boolean'}},\n          \"linked_from\": {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          },\n          \"name\": \"\",\n          \"popularity\": {{faker 'random.number'}},\n          \"preview_url\": \"\",\n          \"restrictions\": {\n            \"reason\": \"\"\n          },\n          \"track_number\": {{faker 'random.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "On success, the response body contains the created [playlist object](https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject)\nin JSON format and the HTTP status code in the response header is `200` OK or\n`201` Created. There is also a `Location` response header giving the Web API\nendpoint for the new playlist.\n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to create a playlist when you do not have the user's authorization returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"collaborative\": {{faker 'random.boolean'}},\n  \"description\": \"\",\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"followers\": {\n    \"href\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"href\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'random.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'random.number'}}\n    }\n  ],\n  \"name\": \"\",\n  \"owner\": {\n    \"display_name\": \"\",\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"followers\": {\n      \"href\": \"\",\n      \"total\": {{faker 'random.number'}}\n    },\n    \"href\": \"\",\n    \"id\": \"\",\n    \"images\": [\n      {\n        \"height\": {{faker 'random.number'}},\n        \"url\": \"\",\n        \"width\": {{faker 'random.number'}}\n      }\n    ],\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"public\": {{faker 'random.boolean'}},\n  \"snapshot_id\": \"\",\n  \"tracks\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"added_at\": \"{{faker 'date.recent' 365}}\",\n        \"added_by\": {\n          \"display_name\": \"\",\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'random.number'}}\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'random.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'random.number'}}\n            }\n          ],\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"is_local\": {{faker 'random.boolean'}},\n        \"track\": {\n          \"album\": {\n            \"album_group\": \"\",\n            \"album_type\": \"\",\n            \"artists\": [\n              {\n                \"external_urls\": {\n                  \"spotify\": \"\"\n                },\n                \"href\": \"\",\n                \"id\": \"\",\n                \"name\": \"\",\n                \"type\": \"\",\n                \"uri\": \"\"\n              }\n            ],\n            \"available_markets\": [\n              \"\"\n            ],\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"images\": [\n              {\n                \"height\": {{faker 'random.number'}},\n                \"url\": \"\",\n                \"width\": {{faker 'random.number'}}\n              }\n            ],\n            \"name\": \"\",\n            \"release_date\": \"\",\n            \"release_date_precision\": \"\",\n            \"restrictions\": {\n              \"reason\": \"\"\n            },\n            \"total_tracks\": {{faker 'random.number'}},\n            \"type\": \"\",\n            \"uri\": \"\"\n          },\n          \"artists\": [\n            {\n              \"external_urls\": {\n                \"spotify\": \"\"\n              },\n              \"followers\": {\n                \"href\": \"\",\n                \"total\": {{faker 'random.number'}}\n              },\n              \"genres\": [\n                \"\"\n              ],\n              \"href\": \"\",\n              \"id\": \"\",\n              \"images\": [\n                {\n                  \"height\": {{faker 'random.number'}},\n                  \"url\": \"\",\n                  \"width\": {{faker 'random.number'}}\n                }\n              ],\n              \"name\": \"\",\n              \"popularity\": {{faker 'random.number'}},\n              \"type\": \"\",\n              \"uri\": \"\"\n            }\n          ],\n          \"available_markets\": [\n            \"\"\n          ],\n          \"disc_number\": {{faker 'random.number'}},\n          \"duration_ms\": {{faker 'random.number'}},\n          \"explicit\": {{faker 'random.boolean'}},\n          \"external_ids\": {\n            \"ean\": \"\",\n            \"isrc\": \"\",\n            \"upc\": \"\"\n          },\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"is_local\": {{faker 'random.boolean'}},\n          \"is_playable\": {{faker 'random.boolean'}},\n          \"linked_from\": {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          },\n          \"name\": \"\",\n          \"popularity\": {{faker 'random.number'}},\n          \"preview_url\": \"\",\n          \"restrictions\": {\n            \"reason\": \"\"\n          },\n          \"track_number\": {{faker 'random.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      }\n    ],\n    \"limit\": {{faker 'random.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'random.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'random.number'}}\n  },\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
                                "latency": 0,
                                "statusCode": 201,
                                "label": "On success, the response body contains the created [playlist object](https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject)\nin JSON format and the HTTP status code in the response header is `200` OK or\n`201` Created. There is also a `Location` response header giving the Web API\nendpoint for the new playlist.\n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to create a playlist when you do not have the user's authorization returns error `403` Forbidden.",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            },
                            {
                                "uuid": "",
                                "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'random.number'}}\n  }\n}",
                                "latency": 0,
                                "statusCode": 200,
                                "label": "Unexpected error",
                                "headers": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "filePath": "",
                                "sendFileAsBody": false,
                                "rules": [],
                                "rulesOperator": "OR",
                                "disableTemplating": false,
                                "fallbackTo404": false
                            }
                        ],
                        "enabled": true,
                        "randomResponse": false,
                        "sequentialResponse": false
                    }
                ],
                "proxyMode": false,
                "proxyHost": "",
                "proxyRemovePrefix": false,
                "https": false,
                "cors": true,
                "headers": [],
                "proxyReqHeaders": [
                    {
                        "key": "",
                        "value": ""
                    }
                ],
                "proxyResHeaders": [
                    {
                        "key": "",
                        "value": ""
                    }
                ]
            }
        }
    ]
}
